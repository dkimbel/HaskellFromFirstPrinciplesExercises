
==================== FINAL INTERFACE ====================
2017-07-25 00:49:44.10059 UTC

interface hangman-0.1.0.0-nj5xyex6SZEB8WXJhB7h8:Hangman 8002
  interface hash: d27bcdaeea52bcfc0fa878a3f7752f5a
  ABI hash: 80a4debf80e530d665679112220e359c
  export-list hash: c8853d1c6538a536eb1d890a1c006ea4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Hangman.allWords
  Hangman.alreadyGuessed
  Hangman.charInWord
  Hangman.fillInCharacter
  Hangman.freshPuzzle
  Hangman.gameOver
  Hangman.gameWin
  Hangman.gameWords
  Hangman.handleGuess
  Hangman.main
  Hangman.maxWordLength
  Hangman.minWordLength
  Hangman.numIncorrectGuessesAllowed
  Hangman.randomWord
  Hangman.randomWord'
  Hangman.renderPuzzleChar
  Hangman.runGame
  Hangman.Puzzle{Hangman.Puzzle}
  Hangman.WordList{Hangman.WordList}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog*
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Exit 068ba078eb20417d7af66db8b8ab4db1
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random cc3ef358c669b194cf9fe94db6f2430f
306a4ad7731cac209982e08a82f2be97
  $fEqWordList :: GHC.Classes.Eq Hangman.WordList
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hangman.WordList
                  Hangman.$fEqWordList_$c==
                  Hangman.$fEqWordList_$c/= -}
306a4ad7731cac209982e08a82f2be97
  $fEqWordList_$c/= ::
    Hangman.WordList -> Hangman.WordList -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$c/=2
                  `cast`
                (Sym (Hangman.N:WordList[0])
                 ->_R Sym (Hangman.N:WordList[0])
                 ->_R <GHC.Types.Bool>_R) -}
306a4ad7731cac209982e08a82f2be97
  $fEqWordList_$c== ::
    Hangman.WordList -> Hangman.WordList -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$c==2
                  `cast`
                (Sym (Hangman.N:WordList[0])
                 ->_R Sym (Hangman.N:WordList[0])
                 ->_R <GHC.Types.Bool>_R) -}
bc61a93f59698f2d5acab7444a14fd8f
  $fShowPuzzle :: GHC.Show.Show Hangman.Puzzle
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hangman.Puzzle
                  Hangman.$fShowPuzzle_$cshowsPrec
                  Hangman.$fShowPuzzle_$cshow
                  Hangman.$fShowPuzzle_$cshowList -}
bc61a93f59698f2d5acab7444a14fd8f
  $fShowPuzzle1 ::
    Hangman.Puzzle -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (x :: Hangman.Puzzle)
                   (s :: GHC.Base.String)[OneShot] ->
                 case x of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 GHC.Base.++ @ GHC.Types.Char (Hangman.$w$cshow ww2 ww3) s }) -}
a99e1e680f77fdc83f56e07e65b46fa0
  $fShowPuzzle2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
4502950eb70d176104e9d4c223d06c7f
  $fShowPuzzle3 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: (\ @ b
                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                   (n :: b)[OneShot] ->
                 GHC.CString.unpackFoldrCString# @ b " Guessed so far: "# c n) -}
bc61a93f59698f2d5acab7444a14fd8f
  $fShowPuzzle_$cshow :: Hangman.Puzzle -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Hangman.Puzzle) ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.$w$cshow ww2 ww3 }) -}
bc61a93f59698f2d5acab7444a14fd8f
  $fShowPuzzle_$cshowList :: [Hangman.Puzzle] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Hangman.Puzzle]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Hangman.Puzzle Hangman.$fShowPuzzle1 ls s) -}
bc61a93f59698f2d5acab7444a14fd8f
  $fShowPuzzle_$cshowsPrec ::
    GHC.Types.Int -> Hangman.Puzzle -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LSL),1*U(A,1*U,U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Hangman.Puzzle)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Hangman.$fShowPuzzle_$cshow x))
                   s) -}
306a4ad7731cac209982e08a82f2be97
  $fShowWordList :: GHC.Show.Show Hangman.WordList
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hangman.WordList
                  Hangman.$fShowWordList_$cshowsPrec
                  Hangman.$fShowWordList_$cshow
                  Hangman.$fShowWordList_$cshowList -}
306a4ad7731cac209982e08a82f2be97
  $fShowWordList1 :: Hangman.WordList -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Hangman.WordList) (w1 :: GHC.Base.String) ->
                 Hangman.$w$cshowsPrec 0# w w1) -}
425414988c2e7084a1760c35ba4efb87
  $fShowWordList2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "WordList "#) -}
306a4ad7731cac209982e08a82f2be97
  $fShowWordList_$cshow :: Hangman.WordList -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Hangman.WordList) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Hangman.$fShowWordList2)
                   (GHC.Show.showList__
                      @ [GHC.Types.Char]
                      GHC.Show.shows_$cshowList1
                      x `cast` (Hangman.N:WordList[0])
                      (GHC.Types.[] @ GHC.Types.Char))) -}
306a4ad7731cac209982e08a82f2be97
  $fShowWordList_$cshowList :: [Hangman.WordList] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Hangman.WordList
                   Hangman.$fShowWordList1) -}
306a4ad7731cac209982e08a82f2be97
  $fShowWordList_$cshowsPrec ::
    GHC.Types.Int -> Hangman.WordList -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Hangman.WordList)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Hangman.$w$cshowsPrec ww1 w1 w2 }) -}
7f75faa731d3b3662cbb83fa60e99860
  $tc'Puzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12086525861426696673##
                   3558481880000340908##
                   Hangman.$trModule
                   Hangman.$tc'Puzzle1) -}
5f0af36e46f73ed7c9d49a9c4a1976fa
  $tc'Puzzle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Puzzle"#) -}
efe5b9f04751a66567441815af2884ab
  $tc'WordList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2668532497532264723##
                   8860895598398212217##
                   Hangman.$trModule
                   Hangman.$tc'WordList1) -}
5b0b98cb7a0de3b0cd8b030b81c7f122
  $tc'WordList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WordList"#) -}
1eaef5dd769b8540bd9f7e871c128c14
  $tcPuzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5110771932720416907##
                   2797793567334960912##
                   Hangman.$trModule
                   Hangman.$tcPuzzle1) -}
0b3fb16bc1e4c1be22e7d521f0cfa288
  $tcPuzzle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Puzzle"#) -}
ca41252e62c58994bdc4e6fa9350e51b
  $tcWordList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1580792978249094177##
                   3113805190588209307##
                   Hangman.$trModule
                   Hangman.$tcWordList1) -}
d143b8829c8c476545ca05d923c79cb7
  $tcWordList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "WordList"#) -}
db781e8da7ec708f3f8ed79d49a67d5f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Hangman.$trModule2
                   Hangman.$trModule1) -}
66bff54abca0df7fa743ed362e7e6382
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Hangman"#) -}
96d9bd47784aa16e57fd0de98cb4f96e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "hangman-0.1.0.0-nj5xyex6SZEB8WXJhB7h8"#) -}
fa37933cb8937d86cc5c4c5778552e74
  $w$cshow ::
    [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.Maybe GHC.Types.Char])
                   (ww1 :: [GHC.Types.Char]) ->
                 case GHC.Base.map
                        @ (GHC.Base.Maybe GHC.Types.Char)
                        @ GHC.Types.Char
                        Hangman.renderPuzzleChar
                        ww of wild {
                   []
                   -> Hangman.$fShowPuzzle3
                        @ [GHC.Types.Char]
                        (GHC.Types.: @ GHC.Types.Char)
                        ww1
                   : x xs
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.:
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll
                              @ GHC.Types.Char
                              Hangman.$fShowPuzzle2
                              xs))
                        (Hangman.$fShowPuzzle3
                           @ [GHC.Types.Char]
                           (GHC.Types.: @ GHC.Types.Char)
                           ww1) }) -}
306a4ad7731cac209982e08a82f2be97
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Hangman.WordList -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Hangman.WordList)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Hangman.$fShowWordList2
                        (GHC.Show.showList__
                           @ [GHC.Types.Char]
                           GHC.Show.shows_$cshowList1
                           w `cast` (Hangman.N:WordList[0])
                           w1)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Hangman.$fShowWordList2
                           (GHC.Show.showList__
                              @ [GHC.Types.Char]
                              GHC.Show.shows_$cshowList1
                              w `cast` (Hangman.N:WordList[0])
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) }) -}
0cafa02fbc7bc57b9d838a5d9a75ed12
  $wgameOver ::
    GHC.Base.String
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
                     {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                   = \ (w1 :: [GHC.Types.Char]) (ww2 :: GHC.Prim.Int#) ->
                     case w1 of wild {
                       [] -> ww2
                       : y ys
                       -> case GHC.List.elem
                                 @ GHC.Types.Char
                                 GHC.Classes.$fEqChar
                                 y
                                 ww of wild1 {
                            GHC.Types.False -> $wgo ys (GHC.Prim.+# ww2 1#)
                            GHC.Types.True -> $wgo ys ww2 } }
                 } in
                 case $wgo ww1 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 4#) of wild {
                   GHC.Types.False -> (# w, GHC.Tuple.() #)
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Hangman.gameOver2
                             GHC.Types.True
                             w of ds1 { (#,#) ipv ipv1 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.CString.unpackAppendCString# "The word was: "# ww)
                             GHC.Types.True
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      System.Exit.exitSuccess1 @ () ipv2 } } } }) -}
f0ee8de243f0ace8ed78f0fb481b80ee
  $wgameWin ::
    [GHC.Base.Maybe GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.Maybe GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (Hangman.gameWin_go ww)
                        `cast`
                      (Data.Monoid.N:All[0]) of wild {
                   GHC.Types.False -> (# w, GHC.Tuple.() #)
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Hangman.gameWin2
                             GHC.Types.True
                             w of ds1 { (#,#) ipv ipv1 ->
                      System.Exit.exitSuccess1 @ () ipv } }) -}
8179e702c888f6818bd1c26d35792c21
  $wrunGame ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><S,U><L,U><S,U>, Inline: [0] -}
bc61a93f59698f2d5acab7444a14fd8f
  data Puzzle
    = Puzzle GHC.Base.String
             [GHC.Base.Maybe GHC.Types.Char]
             [GHC.Types.Char]
306a4ad7731cac209982e08a82f2be97
  newtype WordList = WordList [GHC.Base.String]
16e17378bb225e93cc5fe0740ec3f9ed
  allWords :: GHC.Types.IO Hangman.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.allWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Hangman.WordList>_R)) -}
6e5a0ea788ea86064ca2600608fe7894
  allWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Hangman.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Hangman.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (Data.OldList.lines ipv3)
                      `cast`
                    (Sym (Hangman.N:WordList[0])) #) } }) -}
2f64dd6947440d91326bbaa9f891e5e4
  allWords2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "data/dict.txt"#) -}
0b23fea6ad7054ea9f4dde953199656b
  alreadyGuessed ::
    Hangman.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Hangman.Puzzle) (c :: GHC.Types.Char) ->
                 case ds of wild { Hangman.Puzzle ds1 ds2 guesses ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar c guesses }) -}
ce6a0332ba90d8a09332825df8018411
  charInWord :: Hangman.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Hangman.Puzzle) (c :: GHC.Types.Char) ->
                 case ds of wild { Hangman.Puzzle word ds1 ds2 ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar c word }) -}
71d4e5bd4ceef7e0a0162b0e4df08f1c
  fillInCharacter ::
    Hangman.Puzzle -> GHC.Types.Char -> Hangman.Puzzle
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,1*U,U)><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Hangman.Puzzle) (w1 :: GHC.Types.Char) ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.Puzzle
                   ww1
                   (GHC.List.zipWith
                      @ GHC.Types.Char
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      (\ (wordChar :: GHC.Types.Char)
                         (guessChar :: GHC.Base.Maybe GHC.Types.Char)[OneShot] ->
                       case wordChar of wild { GHC.Types.C# x ->
                       case w1 of wild1 { GHC.Types.C# y ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.eqChar# x y) of wild2 {
                         GHC.Types.False -> guessChar
                         GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild } } })
                      ww1
                      ww2)
                   (GHC.Types.: @ GHC.Types.Char w1 ww3) }) -}
18f153346498d25d98e1e1123ee82918
  freshPuzzle :: GHC.Base.String -> Hangman.Puzzle
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (word :: GHC.Base.String) ->
                 Hangman.Puzzle
                   word
                   (GHC.Base.build
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      (\ @ b1
                         (c :: GHC.Base.Maybe GHC.Types.Char -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Base.Maybe GHC.Types.Char)
                            @ b1
                            @ GHC.Types.Char
                            c
                            Hangman.freshPuzzle1)
                         n
                         word))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e4172372da65f5372aabbeb9d909d261
  freshPuzzle1 :: GHC.Types.Char -> GHC.Base.Maybe GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (di :: GHC.Types.Char) -> GHC.Base.Nothing @ GHC.Types.Char) -}
fb7303a9e006a061c451334fe5d28bb0
  gameOver :: Hangman.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LLS),1*U(U,A,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.gameOver1
                  `cast`
                (<Hangman.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
365494d7514471660a6d2b8bc7b18140
  gameOver1 ::
    Hangman.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LLS),1*U(U,A,1*U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Hangman.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.$wgameOver ww1 ww3 w1 }) -}
6521c2e3cf48781939cab978a3eb5baf
  gameOver2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "You lose!"#) -}
610eeeccef7e8a49aa0af308ab906692
  gameWin :: Hangman.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.gameWin1
                  `cast`
                (<Hangman.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e02b555613ff72cc592611c1b02326e5
  gameWin1 ::
    Hangman.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Hangman.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.$wgameWin ww2 w1 }) -}
09d3a6428c84dc7b2a904235314f4cc5
  gameWin2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "You win!"#) -}
6595d6b834a4aab8df0af3a8835aef3c
  gameWin_go :: [GHC.Base.Maybe GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b19df38a7c901c26e54d1a59d0d63ff4
  gameWords :: GHC.Types.IO Hangman.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.gameWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Hangman.WordList>_R)) -}
51c84c34d1f33e101919f257a6a527f9
  gameWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Hangman.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Hangman.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (GHC.List.filter
                       @ [GHC.Types.Char]
                       Hangman.gameWords2
                       (Data.OldList.lines ipv3))
                      `cast`
                    (Sym (Hangman.N:WordList[0])) #) } }) -}
1b579668c9fae461300da6328611822b
  gameWords2 :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (w :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 5#) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww2 9#) } }) -}
1d8ceb293b8ae4255d7460bee14fdd86
  handleGuess ::
    Hangman.Puzzle -> GHC.Types.Char -> GHC.Types.IO Hangman.Puzzle
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.handleGuess1
                  `cast`
                (<Hangman.Puzzle>_R
                 ->_R <GHC.Types.Char>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Hangman.Puzzle>_R)) -}
b0652cfa071ea9cc1a9ca14835f25e39
  handleGuess1 ::
    Hangman.Puzzle
    -> GHC.Types.Char
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Hangman.Puzzle #)
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: (\ (puzzle :: Hangman.Puzzle)
                   (guess :: GHC.Types.Char)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "Your guess was: "#
                           (GHC.Types.:
                              @ GHC.Types.Char
                              guess
                              (GHC.Types.[] @ GHC.Types.Char)))
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case puzzle of wild { Hangman.Puzzle ds ds2 guesses ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        guess
                        guesses of wild1 {
                   GHC.Types.False
                   -> case GHC.List.elem
                             @ GHC.Types.Char
                             GHC.Classes.$fEqChar
                             guess
                             ds of wild2 {
                        GHC.Types.False
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Hangman.handleGuess4
                                  GHC.Types.True
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              Hangman.Puzzle
                                ds
                                (GHC.List.zipWith
                                   @ GHC.Types.Char
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   (\ (wordChar :: GHC.Types.Char)
                                      (guessChar :: GHC.Base.Maybe GHC.Types.Char)[OneShot] ->
                                    case wordChar of wild3 { GHC.Types.C# x ->
                                    case guess of wild4 { GHC.Types.C# y ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.eqChar# x y) of wild5 {
                                      GHC.Types.False -> guessChar
                                      GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild3 } } })
                                   ds
                                   ds2)
                                (GHC.Types.: @ GHC.Types.Char guess guesses) #) }
                        GHC.Types.True
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Hangman.handleGuess3
                                  GHC.Types.True
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              Hangman.Puzzle
                                ds
                                (GHC.List.zipWith
                                   @ GHC.Types.Char
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   (\ (wordChar :: GHC.Types.Char)
                                      (guessChar :: GHC.Base.Maybe GHC.Types.Char)[OneShot] ->
                                    case wordChar of wild3 { GHC.Types.C# x ->
                                    case guess of wild4 { GHC.Types.C# y ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.eqChar# x y) of wild5 {
                                      GHC.Types.False -> guessChar
                                      GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild3 } } })
                                   ds
                                   ds2)
                                (GHC.Types.: @ GHC.Types.Char guess guesses) #) } }
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Hangman.handleGuess2
                             GHC.Types.True
                             ipv of ds3 { (#,#) ipv2 ipv3 ->
                      (# ipv2, wild #) } } } }) -}
d0e36347daff943164e7180f16a0faa7
  handleGuess2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "You already guessed that character, pick something else!"#) -}
715e77f41bc7a52c8017de85a9cf0045
  handleGuess3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "This character was in the word, filling in the word accordingly"#) -}
aad03cd70200365b1bbe7e8b42cad94d
  handleGuess4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "This character wasn't in the word, try again."#) -}
54aa214320b45082952780ff2af916fb
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
c6851d2f0377291fb31c4952ebe05f03
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Hangman.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   ipv4 :: [[GHC.Types.Char]]
                   = GHC.List.filter
                       @ [GHC.Types.Char]
                       Hangman.gameWords2
                       (Data.OldList.lines ipv3)
                 } in
                 case System.Random.$fRandomInt3
                        (Hangman.main2,
                         case GHC.List.$wlenAcc
                                @ [GHC.Types.Char]
                                ipv4
                                0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        ipv2 of ds3 { (#,#) ipv5 ipv6 ->
                 case ipv6 of ww { GHC.Types.I# ww1 ->
                 let {
                   word :: GHC.Base.String
                   = GHC.Base.map
                       @ GHC.Types.Char
                       @ GHC.Types.Char
                       GHC.Unicode.toLower
                       (GHC.List.$w!! @ GHC.Base.String ipv4 ww1)
                 } in
                 Hangman.$wrunGame
                   word
                   (GHC.Base.map
                      @ GHC.Types.Char
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      Hangman.freshPuzzle1
                      word)
                   (GHC.Types.[] @ GHC.Types.Char)
                   ipv5 } } } }) -}
f9fe78c9f6ca6280466c63869a984133
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
d1279e48053a5fd3b99a1f651a14b033
  maxWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
85fb8f2d5282525ccb709683026c3ff5
  minWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
78d7a80b01940790b0f7179c97c35c05
  numIncorrectGuessesAllowed :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
f85a496a93c75c52cb2d73dcf275aca0
  randomWord :: Hangman.WordList -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.randomWord1
                  `cast`
                (<Hangman.WordList>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
d5f4509ed7caec64c5d8bc09488e9a61
  randomWord' :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.randomWord'1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
21f60d9a9b0cd10b595c1c2167258a94
  randomWord'1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Hangman.gameWords1 s of ds1 { (#,#) ipv ipv1 ->
                 Hangman.randomWord1 ipv1 ipv }) -}
dd5b2926a03dbcec8f44deef8874396c
  randomWord1 ::
    Hangman.WordList
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (ds :: Hangman.WordList)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.$fRandomInt3
                        (Hangman.main2,
                         case GHC.List.$wlenAcc
                                @ [GHC.Types.Char]
                                ds `cast` (Hangman.N:WordList[0])
                                0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.List.!!
                      @ GHC.Base.String
                      ds `cast` (Hangman.N:WordList[0])
                      ipv1 #) }) -}
b3782ca68fdfd22a5663920d5107a69c
  renderPuzzleChar :: GHC.Base.Maybe GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Types.Char) ->
                 case ds of wild {
                   GHC.Base.Nothing -> Hangman.renderPuzzleChar1
                   GHC.Base.Just c -> c }) -}
89269f7174038ea300645d3baf3ad9a9
  renderPuzzleChar1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '_'#) -}
73b4f07c56c93cd73d32546293ff8911
  runGame :: Hangman.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.runGame1
                  `cast`
                (<Hangman.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e7aac51ed1dee650cf5628e9fa32a97b
  runGame1 ::
    Hangman.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),U(U,U,U)><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Hangman.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.$wrunGame ww1 ww2 ww3 w1 }) -}
instance [safe] GHC.Classes.Eq [Hangman.WordList]
  = Hangman.$fEqWordList
instance [safe] GHC.Show.Show [Hangman.Puzzle]
  = Hangman.$fShowPuzzle
instance [safe] GHC.Show.Show [Hangman.WordList]
  = Hangman.$fShowWordList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

