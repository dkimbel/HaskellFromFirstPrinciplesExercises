
==================== FINAL INTERFACE ====================
2017-07-30 01:35:46.426824 UTC

interface exercises-0.1.0.0-5d7Flrmc8VqLSLbdKm59XF:Exercises 8002
  interface hash: 90aa60cc7369911ab87ecdf66fb347b8
  ABI hash: f4fcb6fcd95575be0d852558bad2e74e
  export-list hash: 939fc0f31a140f626a81c402da406b7f
  orphan hash: 78740a663463db334c4d3f9da380c86c
  flag hash: 6fc74547fbd72660fbdc96d0ba10d9b2
  sig of: Nothing
  used TH splices: False
  where
exports:
  Exercises.accumulateBothGen
  Exercises.accumulateRightGen
  Exercises.boolConjGen
  Exercises.boolDisjGen
  Exercises.fourGen
  Exercises.identityGen
  Exercises.main
  Exercises.orGen
  Exercises.semigroupAssoc
  Exercises.threeGen
  Exercises.twoGen
  Exercises.validationGen
  Exercises.AccumulateBoth{Exercises.AccumulateBoth}
  Exercises.AccumulateBothAssoc
  Exercises.AccumulateRight{Exercises.AccumulateRight}
  Exercises.AccumulateRightAssoc
  Exercises.BoolConj{Exercises.BoolConj}
  Exercises.BoolConjAssoc
  Exercises.BoolDisj{Exercises.BoolDisj}
  Exercises.BoolDisjAssoc
  Exercises.Combine{Exercises.Combine unCombine}
  Exercises.Comp{Exercises.Comp unComp}
  Exercises.Four{Exercises.Four}
  Exercises.FourAssoc
  Exercises.Identity{Exercises.Identity}
  Exercises.IdentityAssoc
  Exercises.Or{Exercises.Fst Exercises.Snd}
  Exercises.OrAssoc
  Exercises.Three{Exercises.Three}
  Exercises.ThreeAssoc
  Exercises.Trivial{Exercises.Trivial}
  Exercises.TrivialAssoc
  Exercises.Two{Exercises.Two}
  Exercises.TwoAssoc
  Exercises.Validation{Exercises.Fail Exercises.Succ}
  Exercises.ValidationAssoc
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Arbitrary 7186418da62e356916f17711482dca2f
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Gen 8c21a18006b7ca28eeb63c6653bc55ab
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Test af729ecd962d539009b6dff25903d6d1
import  -/  base-4.9.1.0:Data.List.NonEmpty 303e7ba5e7029ac213312f3d6a8b4613
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:Data.Semigroup fc55c71ff629dcbd821309c310055959
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
c27cf5c706cc25cc7112ff188a20336e
  $fArbitraryAccumulateBoth ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Exercises.AccumulateBoth a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Exercises.AccumulateBoth a b)
                  (Exercises.accumulateBothGen @ a @ b $dArbitrary $dArbitrary1)
                  (Exercises.$fArbitraryAccumulateBoth_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
c27cf5c706cc25cc7112ff188a20336e
  $fArbitraryAccumulateBoth_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Exercises.AccumulateBoth a b -> [Exercises.AccumulateBoth a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: Exercises.AccumulateBoth a b) ->
                 GHC.Types.[] @ (Exercises.AccumulateBoth a b)) -}
1bf9dd9976485f0ffe0cc76275b6f1a6
  $fArbitraryAccumulateBoth_$s$cshrink ::
    Exercises.AccumulateBoth
      (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
      (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
    -> [Exercises.AccumulateBoth
          (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
          (Data.List.NonEmpty.NonEmpty GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Exercises.AccumulateBoth
                             (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                             (Data.List.NonEmpty.NonEmpty GHC.Types.Int)) ->
                 GHC.Types.[]
                   @ (Exercises.AccumulateBoth
                        (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                        (Data.List.NonEmpty.NonEmpty GHC.Types.Int))) -}
0d2b8570e15c20c19973f13c2b414046
  $fArbitraryAccumulateBoth_$s$fArbitraryNonEmpty ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
                  (Test.QuickCheck.Arbitrary.$fArbitraryNonEmpty_$carbitrary
                     @ GHC.Types.Int
                     Test.QuickCheck.Arbitrary.$fArbitraryInt)
                  (Test.QuickCheck.Arbitrary.$fArbitraryNonEmpty_$cshrink
                     @ GHC.Types.Int
                     Test.QuickCheck.Arbitrary.$fArbitraryInt) -}
acbda7537715ba81f920eabd170054a7
  $fArbitraryAccumulateBoth_$s$fArbitraryNonEmpty1 ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                  (Test.QuickCheck.Arbitrary.$fArbitraryNonEmpty_$carbitrary
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar)
                  (Test.QuickCheck.Arbitrary.$fArbitraryNonEmpty_$cshrink
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fArbitraryAccumulateRight ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Exercises.AccumulateRight a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Exercises.AccumulateRight a b)
                  (Exercises.accumulateRightGen @ a @ b $dArbitrary $dArbitrary1)
                  (Exercises.$fArbitraryAccumulateRight_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fArbitraryAccumulateRight_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Exercises.AccumulateRight a b -> [Exercises.AccumulateRight a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: Exercises.AccumulateRight a b) ->
                 GHC.Types.[] @ (Exercises.AccumulateRight a b)) -}
31c9e8e8c2350e598df6391bc880dbc2
  $fArbitraryAccumulateRight_$s$cshrink ::
    Exercises.AccumulateRight
      GHC.Types.Bool (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
    -> [Exercises.AccumulateRight
          GHC.Types.Bool (Data.List.NonEmpty.NonEmpty GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Exercises.AccumulateRight
                             GHC.Types.Bool (Data.List.NonEmpty.NonEmpty GHC.Types.Int)) ->
                 GHC.Types.[]
                   @ (Exercises.AccumulateRight
                        GHC.Types.Bool (Data.List.NonEmpty.NonEmpty GHC.Types.Int))) -}
bf28a0505642d6c6d4331a9d926c82af
  $fArbitraryBoolConj ::
    Test.QuickCheck.Arbitrary.Arbitrary Exercises.BoolConj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.BoolConj
                  Exercises.boolConjGen
                  Exercises.$fArbitraryBoolConj_$cshrink -}
bf28a0505642d6c6d4331a9d926c82af
  $fArbitraryBoolConj_$cshrink ::
    Exercises.BoolConj -> [Exercises.BoolConj]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Exercises.BoolConj) ->
                 GHC.Types.[] @ Exercises.BoolConj) -}
224b931c3c586e626ad90b143df43ab2
  $fArbitraryBoolDisj ::
    Test.QuickCheck.Arbitrary.Arbitrary Exercises.BoolDisj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.BoolDisj
                  Exercises.boolDisjGen
                  Exercises.$fArbitraryBoolDisj_$cshrink -}
224b931c3c586e626ad90b143df43ab2
  $fArbitraryBoolDisj_$cshrink ::
    Exercises.BoolDisj -> [Exercises.BoolDisj]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Exercises.BoolDisj) ->
                 GHC.Types.[] @ Exercises.BoolDisj) -}
9b9ef5c8f42894b24053fccb02690f4b
  $fArbitraryFour ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Exercises.Four a b c d)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                      ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                      ($dArbitrary3 :: Test.QuickCheck.Arbitrary.Arbitrary d).
                  @ (Exercises.Four a b c d)
                  (Exercises.fourGen
                     @ a
                     @ b
                     @ c
                     @ d
                     $dArbitrary
                     $dArbitrary1
                     $dArbitrary2
                     $dArbitrary3)
                  (Exercises.$fArbitraryFour_$cshrink
                     @ a
                     @ b
                     @ c
                     @ d
                     $dArbitrary
                     $dArbitrary1
                     $dArbitrary2
                     $dArbitrary3) -}
9b9ef5c8f42894b24053fccb02690f4b
  $fArbitraryFour_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Exercises.Four a b c d -> [Exercises.Four a b c d]
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   ($dArbitrary3 :: Test.QuickCheck.Arbitrary.Arbitrary d)
                   (ds1 :: Exercises.Four a b c d) ->
                 GHC.Types.[] @ (Exercises.Four a b c d)) -}
2bba741870b11daf22cac21ca9d17a2b
  $fArbitraryIdentity ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Exercises.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Exercises.Identity a)
                  (Exercises.identityGen @ a $dArbitrary)
                  (Exercises.$fArbitraryIdentity_$cshrink @ a $dArbitrary) -}
2bba741870b11daf22cac21ca9d17a2b
  $fArbitraryIdentity_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Exercises.Identity a -> [Exercises.Identity a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds1 :: Exercises.Identity a) ->
                 GHC.Types.[] @ (Exercises.Identity a)) -}
453a719e8f8f694495ee9fd5e0399b35
  $fArbitraryIdentity_$s$cshrink ::
    Exercises.Identity (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
    -> [Exercises.Identity (Data.List.NonEmpty.NonEmpty GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Exercises.Identity
                             (Data.List.NonEmpty.NonEmpty GHC.Types.Int)) ->
                 GHC.Types.[]
                   @ (Exercises.Identity
                        (Data.List.NonEmpty.NonEmpty GHC.Types.Int))) -}
6597755182c9a37d881780851343d36b
  $fArbitraryOr ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Exercises.Or a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Exercises.Or a b)
                  (Exercises.orGen @ a @ b $dArbitrary $dArbitrary1)
                  (Exercises.$fArbitraryOr_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
6597755182c9a37d881780851343d36b
  $fArbitraryOr_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Exercises.Or a b -> [Exercises.Or a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: Exercises.Or a b) ->
                 GHC.Types.[] @ (Exercises.Or a b)) -}
8f987b97c23f58f3fb4cdadc46f84c49
  $fArbitraryOr_$s$cshrink ::
    Exercises.Or GHC.Types.Int GHC.Types.Bool
    -> [Exercises.Or GHC.Types.Int GHC.Types.Bool]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Exercises.Or GHC.Types.Int GHC.Types.Bool) ->
                 GHC.Types.[] @ (Exercises.Or GHC.Types.Int GHC.Types.Bool)) -}
1ce5192802781017921876de5991bb07
  $fArbitraryThree ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Exercises.Three a b c)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                      ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary c).
                  @ (Exercises.Three a b c)
                  (Exercises.threeGen
                     @ a
                     @ b
                     @ c
                     $dArbitrary
                     $dArbitrary1
                     $dArbitrary2)
                  (Exercises.$fArbitraryThree_$cshrink
                     @ a
                     @ b
                     @ c
                     $dArbitrary
                     $dArbitrary1
                     $dArbitrary2) -}
1ce5192802781017921876de5991bb07
  $fArbitraryThree_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Exercises.Three a b c -> [Exercises.Three a b c]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   @ b
                   @ c
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (ds1 :: Exercises.Three a b c) ->
                 GHC.Types.[] @ (Exercises.Three a b c)) -}
988bfb7fa5c37f9ad7b564813620fb32
  $fArbitraryTrivial ::
    Test.QuickCheck.Arbitrary.Arbitrary Exercises.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.Trivial
                  Exercises.$fArbitraryTrivial_$carbitrary
                  Exercises.$fArbitraryTrivial_$cshrink -}
988bfb7fa5c37f9ad7b564813620fb32
  $fArbitraryTrivial1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Exercises.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                 Exercises.Trivial) -}
988bfb7fa5c37f9ad7b564813620fb32
  $fArbitraryTrivial_$carbitrary ::
    Test.QuickCheck.Gen.Gen Exercises.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                Exercises.$fArbitraryTrivial1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <Exercises.Trivial>_R)) -}
988bfb7fa5c37f9ad7b564813620fb32
  $fArbitraryTrivial_$cshrink ::
    Exercises.Trivial -> [Exercises.Trivial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Exercises.Trivial) ->
                 GHC.Types.[] @ Exercises.Trivial) -}
f87841b7919b465d87283a32a3dbf95e
  $fArbitraryTwo ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Exercises.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Exercises.Two a b)
                  (Exercises.twoGen @ a @ b $dArbitrary $dArbitrary1)
                  (Exercises.$fArbitraryTwo_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
f87841b7919b465d87283a32a3dbf95e
  $fArbitraryTwo_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Exercises.Two a b -> [Exercises.Two a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: Exercises.Two a b) ->
                 GHC.Types.[] @ (Exercises.Two a b)) -}
6b88f35a43d36caf324fba6667c62a26
  $fArbitraryValidation ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Exercises.Validation a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Exercises.Validation a b)
                  (Exercises.validationGen @ a @ b $dArbitrary $dArbitrary1)
                  (Exercises.$fArbitraryValidation_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
6b88f35a43d36caf324fba6667c62a26
  $fArbitraryValidation_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Exercises.Validation a b -> [Exercises.Validation a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: Exercises.Validation a b) ->
                 GHC.Types.[] @ (Exercises.Validation a b)) -}
979d3a6261ddf33048270b3779cd4c30
  $fArbitraryValidation_$s$cshrink ::
    Exercises.Validation
      (Data.List.NonEmpty.NonEmpty GHC.Types.Int) GHC.Types.Bool
    -> [Exercises.Validation
          (Data.List.NonEmpty.NonEmpty GHC.Types.Int) GHC.Types.Bool]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Exercises.Validation
                             (Data.List.NonEmpty.NonEmpty GHC.Types.Int) GHC.Types.Bool) ->
                 GHC.Types.[]
                   @ (Exercises.Validation
                        (Data.List.NonEmpty.NonEmpty GHC.Types.Int) GHC.Types.Bool)) -}
c27cf5c706cc25cc7112ff188a20336e
  $fEqAccumulateBoth ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    GHC.Classes.Eq (Exercises.AccumulateBoth a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq a)
                      ($dEq1 :: GHC.Classes.Eq b).
                  @ (Exercises.AccumulateBoth a b)
                  (Exercises.$fEqAccumulateBoth_$c== @ a @ b $dEq $dEq1)
                  (Exercises.$fEqAccumulateBoth_$c/= @ a @ b $dEq $dEq1) -}
f0bfc4e43e29444d621e75bdbf22b7e3
  $fEqAccumulateBoth1 ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Exercises.Validation a b
    -> Exercises.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (eta :: Exercises.Validation a b)
                   (eta1 :: Exercises.Validation a b) ->
                 Exercises.$fEqAccumulateBoth_$c/=1 @ a @ b $dEq1 $dEq eta eta1) -}
2cd1689b309cb694666b90d26c17a0bb
  $fEqAccumulateBoth2 ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Exercises.Validation a b
    -> Exercises.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (eta :: Exercises.Validation a b)
                   (eta1 :: Exercises.Validation a b) ->
                 Exercises.$fEqAccumulateBoth_$c==1 @ a @ b $dEq1 $dEq eta eta1) -}
c27cf5c706cc25cc7112ff188a20336e
  $fEqAccumulateBoth_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Exercises.AccumulateBoth a b
    -> Exercises.AccumulateBoth a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.$fEqAccumulateBoth1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Classes.Eq b>_R
                 ->_R Sym (Exercises.N:AccumulateBoth[0]) <a>_N <b>_N
                 ->_R Sym (Exercises.N:AccumulateBoth[0]) <a>_N <b>_N
                 ->_R <GHC.Types.Bool>_R) -}
6b88f35a43d36caf324fba6667c62a26
  $fEqAccumulateBoth_$c/=1 ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Exercises.Validation a b
    -> Exercises.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (a1 :: Exercises.Validation a b)
                   (b1 :: Exercises.Validation a b) ->
                 case a1 of wild {
                   Exercises.Fail a2
                   -> case b1 of wild1 {
                        Exercises.Fail b2
                        -> case GHC.Classes.== @ a $dEq1 a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Exercises.Succ ipv -> GHC.Types.True }
                   Exercises.Succ a2
                   -> case b1 of wild1 {
                        Exercises.Fail ipv -> GHC.Types.True
                        Exercises.Succ b2
                        -> case GHC.Classes.== @ b $dEq a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
c27cf5c706cc25cc7112ff188a20336e
  $fEqAccumulateBoth_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Exercises.AccumulateBoth a b
    -> Exercises.AccumulateBoth a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.$fEqAccumulateBoth2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Classes.Eq b>_R
                 ->_R Sym (Exercises.N:AccumulateBoth[0]) <a>_N <b>_N
                 ->_R Sym (Exercises.N:AccumulateBoth[0]) <a>_N <b>_N
                 ->_R <GHC.Types.Bool>_R) -}
6b88f35a43d36caf324fba6667c62a26
  $fEqAccumulateBoth_$c==1 ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Exercises.Validation a b
    -> Exercises.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (ds :: Exercises.Validation a b)
                   (ds1 :: Exercises.Validation a b) ->
                 case ds of wild {
                   Exercises.Fail a1
                   -> case ds1 of wild1 {
                        Exercises.Fail b1 -> GHC.Classes.== @ a $dEq1 a1 b1
                        Exercises.Succ ipv -> GHC.Types.False }
                   Exercises.Succ a1
                   -> case ds1 of wild1 {
                        Exercises.Fail ipv -> GHC.Types.False
                        Exercises.Succ b1 -> GHC.Classes.== @ b $dEq a1 b1 } }) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fEqAccumulateRight ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    GHC.Classes.Eq (Exercises.AccumulateRight a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq a)
                      ($dEq1 :: GHC.Classes.Eq b).
                  @ (Exercises.AccumulateRight a b)
                  (Exercises.$fEqAccumulateRight_$c== @ a @ b $dEq $dEq1)
                  (Exercises.$fEqAccumulateRight_$c/= @ a @ b $dEq $dEq1) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fEqAccumulateRight_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Exercises.AccumulateRight a b
    -> Exercises.AccumulateRight a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.$fEqAccumulateBoth1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Classes.Eq b>_R
                 ->_R Sym (Exercises.N:AccumulateRight[0]) <a>_N <b>_N
                 ->_R Sym (Exercises.N:AccumulateRight[0]) <a>_N <b>_N
                 ->_R <GHC.Types.Bool>_R) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fEqAccumulateRight_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Exercises.AccumulateRight a b
    -> Exercises.AccumulateRight a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.$fEqAccumulateBoth2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Classes.Eq b>_R
                 ->_R Sym (Exercises.N:AccumulateRight[0]) <a>_N <b>_N
                 ->_R Sym (Exercises.N:AccumulateRight[0]) <a>_N <b>_N
                 ->_R <GHC.Types.Bool>_R) -}
bf28a0505642d6c6d4331a9d926c82af
  $fEqBoolConj :: GHC.Classes.Eq Exercises.BoolConj
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.BoolConj
                  Exercises.$fEqBoolConj_$c==
                  Exercises.$fEqBoolConj_$c/= -}
bf28a0505642d6c6d4331a9d926c82af
  $fEqBoolConj_$c/= ::
    Exercises.BoolConj -> Exercises.BoolConj -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c/=
                  `cast`
                (Sym (Exercises.N:BoolConj[0])
                 ->_R Sym (Exercises.N:BoolConj[0])
                 ->_R <GHC.Types.Bool>_R) -}
bf28a0505642d6c6d4331a9d926c82af
  $fEqBoolConj_$c== ::
    Exercises.BoolConj -> Exercises.BoolConj -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c==
                  `cast`
                (Sym (Exercises.N:BoolConj[0])
                 ->_R Sym (Exercises.N:BoolConj[0])
                 ->_R <GHC.Types.Bool>_R) -}
224b931c3c586e626ad90b143df43ab2
  $fEqBoolDisj :: GHC.Classes.Eq Exercises.BoolDisj
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.BoolDisj
                  Exercises.$fEqBoolDisj_$c==
                  Exercises.$fEqBoolDisj_$c/= -}
224b931c3c586e626ad90b143df43ab2
  $fEqBoolDisj_$c/= ::
    Exercises.BoolDisj -> Exercises.BoolDisj -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c/=
                  `cast`
                (Sym (Exercises.N:BoolDisj[0])
                 ->_R Sym (Exercises.N:BoolDisj[0])
                 ->_R <GHC.Types.Bool>_R) -}
224b931c3c586e626ad90b143df43ab2
  $fEqBoolDisj_$c== ::
    Exercises.BoolDisj -> Exercises.BoolDisj -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c==
                  `cast`
                (Sym (Exercises.N:BoolDisj[0])
                 ->_R Sym (Exercises.N:BoolDisj[0])
                 ->_R <GHC.Types.Bool>_R) -}
9b9ef5c8f42894b24053fccb02690f4b
  $fEqFour ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Exercises.Four a b c d)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dEq :: GHC.Classes.Eq d)
                      ($dEq1 :: GHC.Classes.Eq c)
                      ($dEq2 :: GHC.Classes.Eq b)
                      ($dEq3 :: GHC.Classes.Eq a).
                  @ (Exercises.Four a b c d)
                  (Exercises.$fEqFour_$c== @ a @ b @ c @ d $dEq $dEq1 $dEq2 $dEq3)
                  (Exercises.$fEqFour_$c/= @ a @ b @ c @ d $dEq $dEq1 $dEq2 $dEq3) -}
9b9ef5c8f42894b24053fccb02690f4b
  $fEqFour_$c/= ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    Exercises.Four a b c d -> Exercises.Four a b c d -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dEq :: GHC.Classes.Eq d)
                   ($dEq1 :: GHC.Classes.Eq c)
                   ($dEq2 :: GHC.Classes.Eq b)
                   ($dEq3 :: GHC.Classes.Eq a)
                   (a1 :: Exercises.Four a b c d)
                   (b1 :: Exercises.Four a b c d) ->
                 case Exercises.$fEqFour_$c==
                        @ a
                        @ b
                        @ c
                        @ d
                        $dEq
                        $dEq1
                        $dEq2
                        $dEq3
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9b9ef5c8f42894b24053fccb02690f4b
  $fEqFour_$c== ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    Exercises.Four a b c d -> Exercises.Four a b c d -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Classes.Eq d)
                   (w1 :: GHC.Classes.Eq c)
                   (w2 :: GHC.Classes.Eq b)
                   (w3 :: GHC.Classes.Eq a)
                   (w4 :: Exercises.Four a b c d)
                   (w5 :: Exercises.Four a b c d) ->
                 case w4 of ww { Exercises.Four ww1 ww2 ww3 ww4 ->
                 case w5 of ww5 { Exercises.Four ww6 ww7 ww8 ww9 ->
                 Exercises.$w$c==
                   @ a
                   @ b
                   @ c
                   @ d
                   w
                   w1
                   w2
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
2bba741870b11daf22cac21ca9d17a2b
  $fEqIdentity ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Exercises.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (Exercises.Identity a)
                  (Exercises.$fEqIdentity_$c== @ a $dEq)
                  (Exercises.$fEqIdentity_$c/= @ a $dEq) -}
2bba741870b11daf22cac21ca9d17a2b
  $fEqIdentity_$c/= ::
    GHC.Classes.Eq a =>
    Exercises.Identity a -> Exercises.Identity a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),U(A,U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes./=
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Exercises.N:Identity[0] <a>_R)
                 ->_R Sym (Exercises.N:Identity[0] <a>_R)
                 ->_R <GHC.Types.Bool>_R) -}
2bba741870b11daf22cac21ca9d17a2b
  $fEqIdentity_$c== ::
    GHC.Classes.Eq a =>
    Exercises.Identity a -> Exercises.Identity a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),U(U,A)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.==
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Exercises.N:Identity[0] <a>_R)
                 ->_R Sym (Exercises.N:Identity[0] <a>_R)
                 ->_R <GHC.Types.Bool>_R) -}
6597755182c9a37d881780851343d36b
  $fEqOr ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Exercises.Or a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (Exercises.Or a b)
                  (Exercises.$fEqOr_$c== @ a @ b $dEq $dEq1)
                  (Exercises.$fEqOr_$c/= @ a @ b $dEq $dEq1) -}
6597755182c9a37d881780851343d36b
  $fEqOr_$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Exercises.Or a b -> Exercises.Or a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (a1 :: Exercises.Or a b)
                   (b1 :: Exercises.Or a b) ->
                 case a1 of wild {
                   Exercises.Fst a2
                   -> case b1 of wild1 {
                        Exercises.Fst b2
                        -> case GHC.Classes.== @ a $dEq1 a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Exercises.Snd ipv -> GHC.Types.True }
                   Exercises.Snd a2
                   -> case b1 of wild1 {
                        Exercises.Fst ipv -> GHC.Types.True
                        Exercises.Snd b2
                        -> case GHC.Classes.== @ b $dEq a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
6597755182c9a37d881780851343d36b
  $fEqOr_$c== ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Exercises.Or a b -> Exercises.Or a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (ds :: Exercises.Or a b)
                   (ds1 :: Exercises.Or a b) ->
                 case ds of wild {
                   Exercises.Fst a1
                   -> case ds1 of wild1 {
                        Exercises.Fst b1 -> GHC.Classes.== @ a $dEq1 a1 b1
                        Exercises.Snd ipv -> GHC.Types.False }
                   Exercises.Snd a1
                   -> case ds1 of wild1 {
                        Exercises.Fst ipv -> GHC.Types.False
                        Exercises.Snd b1 -> GHC.Classes.== @ b $dEq a1 b1 } }) -}
1ce5192802781017921876de5991bb07
  $fEqThree ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Exercises.Three a b c)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dEq :: GHC.Classes.Eq c)
                      ($dEq1 :: GHC.Classes.Eq b)
                      ($dEq2 :: GHC.Classes.Eq a).
                  @ (Exercises.Three a b c)
                  (Exercises.$fEqThree_$c== @ a @ b @ c $dEq $dEq1 $dEq2)
                  (Exercises.$fEqThree_$c/= @ a @ b @ c $dEq $dEq1 $dEq2) -}
1ce5192802781017921876de5991bb07
  $fEqThree_$c/= ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Exercises.Three a b c -> Exercises.Three a b c -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dEq :: GHC.Classes.Eq c)
                   ($dEq1 :: GHC.Classes.Eq b)
                   ($dEq2 :: GHC.Classes.Eq a)
                   (a1 :: Exercises.Three a b c)
                   (b1 :: Exercises.Three a b c) ->
                 case Exercises.$fEqThree_$c==
                        @ a
                        @ b
                        @ c
                        $dEq
                        $dEq1
                        $dEq2
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1ce5192802781017921876de5991bb07
  $fEqThree_$c== ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Exercises.Three a b c -> Exercises.Three a b c -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Classes.Eq c)
                   (w1 :: GHC.Classes.Eq b)
                   (w2 :: GHC.Classes.Eq a)
                   (w3 :: Exercises.Three a b c)
                   (w4 :: Exercises.Three a b c) ->
                 case w3 of ww { Exercises.Three ww1 ww2 ww3 ->
                 case w4 of ww4 { Exercises.Three ww5 ww6 ww7 ->
                 Exercises.$w$c==1
                   @ a
                   @ b
                   @ c
                   w
                   w1
                   w2
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7 } }) -}
988bfb7fa5c37f9ad7b564813620fb32
  $fEqTrivial :: GHC.Classes.Eq Exercises.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.Trivial
                  Exercises.$fEqTrivial_$c==
                  Exercises.$fEqTrivial_$c/= -}
988bfb7fa5c37f9ad7b564813620fb32
  $fEqTrivial_$c/= ::
    Exercises.Trivial -> Exercises.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Exercises.Trivial) (b :: Exercises.Trivial) ->
                 case a of wild { Exercises.Trivial ->
                 case b of wild1 { Exercises.Trivial -> GHC.Types.False } }) -}
988bfb7fa5c37f9ad7b564813620fb32
  $fEqTrivial_$c== ::
    Exercises.Trivial -> Exercises.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Exercises.Trivial) (ds1 :: Exercises.Trivial) ->
                 case ds of wild { Exercises.Trivial ->
                 case ds1 of wild1 { Exercises.Trivial -> GHC.Types.True } }) -}
f87841b7919b465d87283a32a3dbf95e
  $fEqTwo ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Exercises.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (Exercises.Two a b)
                  (Exercises.$fEqTwo_$c== @ a @ b $dEq $dEq1)
                  (Exercises.$fEqTwo_$c/= @ a @ b $dEq $dEq1) -}
f87841b7919b465d87283a32a3dbf95e
  $fEqTwo_$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Exercises.Two a b -> Exercises.Two a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: Exercises.Two a b)
                   (w3 :: Exercises.Two a b) ->
                 case w2 of ww { Exercises.Two ww1 ww2 ->
                 case w3 of ww3 { Exercises.Two ww4 ww5 ->
                 Exercises.$w$c/= @ a @ b w w1 ww1 ww2 ww4 ww5 } }) -}
f87841b7919b465d87283a32a3dbf95e
  $fEqTwo_$c== ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Exercises.Two a b -> Exercises.Two a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: Exercises.Two a b)
                   (w3 :: Exercises.Two a b) ->
                 case w2 of ww { Exercises.Two ww1 ww2 ->
                 case w3 of ww3 { Exercises.Two ww4 ww5 ->
                 Exercises.$w$c==2 @ a @ b w w1 ww1 ww2 ww4 ww5 } }) -}
6b88f35a43d36caf324fba6667c62a26
  $fEqValidation ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Exercises.Validation a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (Exercises.Validation a b)
                  (Exercises.$fEqAccumulateBoth_$c==1 @ a @ b $dEq $dEq1)
                  (Exercises.$fEqAccumulateBoth_$c/=1 @ a @ b $dEq $dEq1) -}
c27cf5c706cc25cc7112ff188a20336e
  $fSemigroupAccumulateBoth ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.Semigroup.Semigroup (Exercises.AccumulateBoth a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b).
                  @ (Exercises.AccumulateBoth a b)
                  (Exercises.$fSemigroupAccumulateBoth_$c<>
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1)
                  (Exercises.$fSemigroupAccumulateBoth_$csconcat
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1)
                  (Exercises.$fSemigroupAccumulateBoth_$cstimes
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1) -}
c27cf5c706cc25cc7112ff188a20336e
  $fSemigroupAccumulateBoth_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Exercises.AccumulateBoth a b
    -> Exercises.AccumulateBoth a b -> Exercises.AccumulateBoth a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                   (ds :: Exercises.AccumulateBoth a b)
                   (ds1 :: Exercises.AccumulateBoth a b) ->
                 case ds
                        `cast`
                      (Exercises.N:AccumulateBoth[0] <a>_N <b>_N) of wild {
                   Exercises.Fail f0
                   -> case ds1
                             `cast`
                           (Exercises.N:AccumulateBoth[0] <a>_N <b>_N) of wild1 {
                        Exercises.Fail f1
                        -> (Exercises.Fail
                              @ a
                              @ b
                              (Data.Semigroup.<> @ a $dSemigroup f0 f1))
                             `cast`
                           (Sym (Exercises.N:AccumulateBoth[0]) <a>_N <b>_N)
                        Exercises.Succ ipv
                        -> wild1 `cast` (Sym (Exercises.N:AccumulateBoth[0]) <a>_N <b>_N) }
                   Exercises.Succ s0
                   -> case ds1
                             `cast`
                           (Exercises.N:AccumulateBoth[0] <a>_N <b>_N) of wild1 {
                        Exercises.Fail ipv
                        -> wild `cast` (Sym (Exercises.N:AccumulateBoth[0]) <a>_N <b>_N)
                        Exercises.Succ s1
                        -> (Exercises.Succ
                              @ a
                              @ b
                              (Data.Semigroup.<> @ b $dSemigroup1 s0 s1))
                             `cast`
                           (Sym (Exercises.N:AccumulateBoth[0]) <a>_N <b>_N) } }) -}
c27cf5c706cc25cc7112ff188a20336e
  $fSemigroupAccumulateBoth_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.List.NonEmpty.NonEmpty (Exercises.AccumulateBoth a b)
    -> Exercises.AccumulateBoth a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.List.NonEmpty.NonEmpty
                            (Exercises.AccumulateBoth a b)) ->
                 case w2 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Exercises.$w$csconcat @ a @ b w w1 ww1 ww2 }) -}
c27cf5c706cc25cc7112ff188a20336e
  $fSemigroupAccumulateBoth_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Exercises.AccumulateBoth a b -> Exercises.AccumulateBoth a b
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fSemigroupAccumulateRight ::
    Data.Semigroup.Semigroup b =>
    Data.Semigroup.Semigroup (Exercises.AccumulateRight a b)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ b
                      @ a
                      ($dSemigroup :: Data.Semigroup.Semigroup b).
                  @ (Exercises.AccumulateRight a b)
                  (Exercises.$fSemigroupAccumulateRight_$c<> @ b @ a $dSemigroup)
                  (Exercises.$fSemigroupAccumulateRight_$csconcat
                     @ b
                     @ a
                     $dSemigroup)
                  (Exercises.$fSemigroupAccumulateRight_$cstimes
                     @ b
                     @ a
                     $dSemigroup) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fSemigroupAccumulateRight_$c<> ::
    Data.Semigroup.Semigroup b =>
    Exercises.AccumulateRight a b
    -> Exercises.AccumulateRight a b -> Exercises.AccumulateRight a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   ($dSemigroup :: Data.Semigroup.Semigroup b)
                   (ds :: Exercises.AccumulateRight a b)
                   (ds1 :: Exercises.AccumulateRight a b) ->
                 case ds
                        `cast`
                      (Exercises.N:AccumulateRight[0] <a>_N <b>_N) of wild {
                   Exercises.Fail ipv
                   -> case ds1
                             `cast`
                           (Exercises.N:AccumulateRight[0] <a>_N <b>_N) of wild1 {
                        Exercises.Fail ipv1
                        -> wild `cast` (Sym (Exercises.N:AccumulateRight[0]) <a>_N <b>_N)
                        Exercises.Succ ds2
                        -> wild1
                             `cast`
                           (Sym (Exercises.N:AccumulateRight[0]) <a>_N <b>_N) }
                   Exercises.Succ s0
                   -> case ds1
                             `cast`
                           (Exercises.N:AccumulateRight[0] <a>_N <b>_N) of wild1 {
                        Exercises.Fail ipv
                        -> wild `cast` (Sym (Exercises.N:AccumulateRight[0]) <a>_N <b>_N)
                        Exercises.Succ s1
                        -> (Exercises.Succ
                              @ a
                              @ b
                              (Data.Semigroup.<> @ b $dSemigroup s0 s1))
                             `cast`
                           (Sym (Exercises.N:AccumulateRight[0]) <a>_N <b>_N) } }) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fSemigroupAccumulateRight_$csconcat ::
    Data.Semigroup.Semigroup b =>
    Data.List.NonEmpty.NonEmpty (Exercises.AccumulateRight a b)
    -> Exercises.AccumulateRight a b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   @ a
                   (w :: Data.Semigroup.Semigroup b)
                   (w1 :: Data.List.NonEmpty.NonEmpty
                            (Exercises.AccumulateRight a b)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Exercises.$w$csconcat1 @ b @ a w ww1 ww2 }) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fSemigroupAccumulateRight_$cstimes ::
    Data.Semigroup.Semigroup b =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1
    -> Exercises.AccumulateRight a b -> Exercises.AccumulateRight a b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
bf28a0505642d6c6d4331a9d926c82af
  $fSemigroupBoolConj :: Data.Semigroup.Semigroup Exercises.BoolConj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.BoolConj
                  Exercises.$fSemigroupBoolConj_$c<>
                  Exercises.$fSemigroupBoolConj_$csconcat
                  Exercises.$fSemigroupBoolConj_$cstimes -}
bf28a0505642d6c6d4331a9d926c82af
  $fSemigroupBoolConj_$c<> ::
    Exercises.BoolConj -> Exercises.BoolConj -> Exercises.BoolConj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Exercises.BoolConj) (ds1 :: Exercises.BoolConj) ->
                 case ds `cast` (Exercises.N:BoolConj[0]) of wild {
                   GHC.Types.False
                   -> GHC.Types.False `cast` (Sym (Exercises.N:BoolConj[0]))
                   GHC.Types.True -> ds1 }) -}
bf28a0505642d6c6d4331a9d926c82af
  $fSemigroupBoolConj_$csconcat ::
    Data.List.NonEmpty.NonEmpty Exercises.BoolConj
    -> Exercises.BoolConj
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.List.NonEmpty.NonEmpty Exercises.BoolConj) ->
                 case w of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Exercises.$fSemigroupBoolConj_go ww1 ww2 }) -}
bf28a0505642d6c6d4331a9d926c82af
  $fSemigroupBoolConj_$cstimes ::
    GHC.Real.Integral b =>
    b -> Exercises.BoolConj -> Exercises.BoolConj
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
bf28a0505642d6c6d4331a9d926c82af
  $fSemigroupBoolConj_go ::
    Exercises.BoolConj -> [Exercises.BoolConj] -> Exercises.BoolConj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
224b931c3c586e626ad90b143df43ab2
  $fSemigroupBoolDisj :: Data.Semigroup.Semigroup Exercises.BoolDisj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.BoolDisj
                  Exercises.$fSemigroupBoolDisj_$c<>
                  Exercises.$fSemigroupBoolDisj_$csconcat
                  Exercises.$fSemigroupBoolDisj_$cstimes -}
224b931c3c586e626ad90b143df43ab2
  $fSemigroupBoolDisj_$c<> ::
    Exercises.BoolDisj -> Exercises.BoolDisj -> Exercises.BoolDisj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Exercises.BoolDisj) (ds1 :: Exercises.BoolDisj) ->
                 case ds `cast` (Exercises.N:BoolDisj[0]) of wild {
                   GHC.Types.False -> ds1
                   GHC.Types.True
                   -> GHC.Types.True `cast` (Sym (Exercises.N:BoolDisj[0])) }) -}
224b931c3c586e626ad90b143df43ab2
  $fSemigroupBoolDisj_$csconcat ::
    Data.List.NonEmpty.NonEmpty Exercises.BoolDisj
    -> Exercises.BoolDisj
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.List.NonEmpty.NonEmpty Exercises.BoolDisj) ->
                 case w of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Exercises.$fSemigroupBoolDisj_go ww1 ww2 }) -}
224b931c3c586e626ad90b143df43ab2
  $fSemigroupBoolDisj_$cstimes ::
    GHC.Real.Integral b =>
    b -> Exercises.BoolDisj -> Exercises.BoolDisj
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
224b931c3c586e626ad90b143df43ab2
  $fSemigroupBoolDisj_go ::
    Exercises.BoolDisj -> [Exercises.BoolDisj] -> Exercises.BoolDisj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
c97cb48bb80c3b09914961da54159d7b
  $fSemigroupCombine ::
    Data.Semigroup.Semigroup b =>
    Data.Semigroup.Semigroup (Exercises.Combine a b)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ b
                      @ a
                      ($dSemigroup :: Data.Semigroup.Semigroup b).
                  @ (Exercises.Combine a b)
                  (Exercises.$fSemigroupCombine_$c<> @ b @ a $dSemigroup)
                  (Exercises.$fSemigroupCombine_$csconcat @ b @ a $dSemigroup)
                  (Exercises.$fSemigroupCombine_$cstimes @ b @ a $dSemigroup) -}
c97cb48bb80c3b09914961da54159d7b
  $fSemigroupCombine_$c<> ::
    Data.Semigroup.Semigroup b =>
    Exercises.Combine a b
    -> Exercises.Combine a b -> Exercises.Combine a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Semigroup.$fSemigroup(->)_$c<>
                  `cast`
                (forall (b :: <*>_N) (a :: <*>_N).
                 <Data.Semigroup.Semigroup b>_R
                 ->_R Sym (Exercises.N:Combine[0]) <a>_N <b>_N
                 ->_R Sym (Exercises.N:Combine[0]) <a>_N <b>_N
                 ->_R Sym (Exercises.N:Combine[0]) <a>_N <b>_N) -}
c97cb48bb80c3b09914961da54159d7b
  $fSemigroupCombine_$csconcat ::
    Data.Semigroup.Semigroup b =>
    Data.List.NonEmpty.NonEmpty (Exercises.Combine a b)
    -> Exercises.Combine a b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LS),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   @ a
                   (w :: Data.Semigroup.Semigroup b)
                   (w1 :: Data.List.NonEmpty.NonEmpty (Exercises.Combine a b)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Exercises.$w$csconcat2 @ b @ a w ww1 ww2 }) -}
c97cb48bb80c3b09914961da54159d7b
  $fSemigroupCombine_$cstimes ::
    Data.Semigroup.Semigroup b =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Exercises.Combine a b -> Exercises.Combine a b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U> -}
886d1a9722e3ed370360f01150189d9d
  $fSemigroupComp :: Data.Semigroup.Semigroup (Exercises.Comp a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Exercises.Comp a)
                  (Exercises.$fSemigroupComp_$c<> @ a)
                  (Exercises.$fSemigroupComp_$csconcat @ a)
                  (Exercises.$fSemigroupComp_$cstimes @ a) -}
886d1a9722e3ed370360f01150189d9d
  $fSemigroupComp1 ::
    Exercises.Comp a -> [Exercises.Comp a] -> Exercises.Comp a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
886d1a9722e3ed370360f01150189d9d
  $fSemigroupComp2 :: Exercises.Comp a -> Exercises.Comp a -> a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (ds :: Exercises.Comp a)
                   (ds1 :: Exercises.Comp a)
                   (eta :: a) ->
                 ds `cast` (Exercises.N:Comp[0] <a>_R)
                   (ds1 `cast` (Exercises.N:Comp[0] <a>_R) eta)) -}
886d1a9722e3ed370360f01150189d9d
  $fSemigroupComp_$c<> ::
    Exercises.Comp a -> Exercises.Comp a -> Exercises.Comp a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.$fSemigroupComp2
                  `cast`
                (forall (a :: <*>_N).
                 <Exercises.Comp a>_R
                 ->_R <Exercises.Comp a>_R
                 ->_R Sym (Exercises.N:Comp[0] <a>_R)) -}
886d1a9722e3ed370360f01150189d9d
  $fSemigroupComp_$csconcat ::
    Data.List.NonEmpty.NonEmpty (Exercises.Comp a) -> Exercises.Comp a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Data.List.NonEmpty.NonEmpty (Exercises.Comp a)) ->
                 case w of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Exercises.$fSemigroupComp1 @ a ww1 ww2 }) -}
886d1a9722e3ed370360f01150189d9d
  $fSemigroupComp_$cstimes ::
    GHC.Real.Integral b => b -> Exercises.Comp a -> Exercises.Comp a
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U> -}
9b9ef5c8f42894b24053fccb02690f4b
  $fSemigroupFour ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    Data.Semigroup.Semigroup (Exercises.Four a b c d)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                      ($dSemigroup2 :: Data.Semigroup.Semigroup c)
                      ($dSemigroup3 :: Data.Semigroup.Semigroup d).
                  @ (Exercises.Four a b c d)
                  (Exercises.$fSemigroupFour_$c<>
                     @ a
                     @ b
                     @ c
                     @ d
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2
                     $dSemigroup3)
                  (Exercises.$fSemigroupFour_$csconcat
                     @ a
                     @ b
                     @ c
                     @ d
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2
                     $dSemigroup3)
                  (Exercises.$fSemigroupFour_$cstimes
                     @ a
                     @ b
                     @ c
                     @ d
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2
                     $dSemigroup3) -}
9b9ef5c8f42894b24053fccb02690f4b
  $fSemigroupFour_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    Exercises.Four a b c d
    -> Exercises.Four a b c d -> Exercises.Four a b c d
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   (w4 :: Exercises.Four a b c d)
                   (w5 :: Exercises.Four a b c d) ->
                 case w4 of ww { Exercises.Four ww1 ww2 ww3 ww4 ->
                 case w5 of ww5 { Exercises.Four ww6 ww7 ww8 ww9 ->
                 Exercises.Four
                   @ a
                   @ b
                   @ c
                   @ d
                   (Data.Semigroup.<> @ a w ww1 ww6)
                   (Data.Semigroup.<> @ b w1 ww2 ww7)
                   (Data.Semigroup.<> @ c w2 ww3 ww8)
                   (Data.Semigroup.<> @ d w3 ww4 ww9) } }) -}
9b9ef5c8f42894b24053fccb02690f4b
  $fSemigroupFour_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    Data.List.NonEmpty.NonEmpty (Exercises.Four a b c d)
    -> Exercises.Four a b c d
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U,U,U),1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   (w4 :: Data.List.NonEmpty.NonEmpty (Exercises.Four a b c d)) ->
                 case w4 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 case ww1 of ww3 { Exercises.Four ww4 ww5 ww6 ww7 ->
                 case Exercises.$w$csconcat3
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww2 of ww8 { (#,,,#) ww9 ww10 ww11 ww12 ->
                 Exercises.Four @ a @ b @ c @ d ww9 ww10 ww11 ww12 } } }) -}
9b9ef5c8f42894b24053fccb02690f4b
  $fSemigroupFour_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Exercises.Four a b c d -> Exercises.Four a b c d
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U(U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   @ b1
                   (w4 :: GHC.Real.Integral b1)
                   (w5 :: b1)
                   (w6 :: Exercises.Four a b c d) ->
                 case w6 of ww { Exercises.Four ww1 ww2 ww3 ww4 ->
                 case Exercises.$w$cstimes
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        @ b1
                        w4
                        w5
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,,#) ww6 ww7 ww8 ww9 ->
                 Exercises.Four @ a @ b @ c @ d ww6 ww7 ww8 ww9 } }) -}
2bba741870b11daf22cac21ca9d17a2b
  $fSemigroupIdentity ::
    Data.Semigroup.Semigroup a =>
    Data.Semigroup.Semigroup (Exercises.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dSemigroup :: Data.Semigroup.Semigroup a).
                  @ (Exercises.Identity a)
                  (Exercises.$fSemigroupIdentity_$c<> @ a $dSemigroup)
                  (Exercises.$fSemigroupIdentity_$csconcat @ a $dSemigroup)
                  (Exercises.$fSemigroupIdentity_$cstimes @ a $dSemigroup) -}
2bba741870b11daf22cac21ca9d17a2b
  $fSemigroupIdentity1 ::
    Data.Semigroup.Semigroup a =>
    Exercises.Identity a -> Exercises.Identity a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   (ds :: Exercises.Identity a)
                   (ds1 :: Exercises.Identity a) ->
                 Data.Semigroup.<>
                   @ a
                   $dSemigroup
                   ds `cast` (Exercises.N:Identity[0] <a>_R)
                   ds1 `cast` (Exercises.N:Identity[0] <a>_R)) -}
2bba741870b11daf22cac21ca9d17a2b
  $fSemigroupIdentity_$c<> ::
    Data.Semigroup.Semigroup a =>
    Exercises.Identity a
    -> Exercises.Identity a -> Exercises.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.$fSemigroupIdentity1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Semigroup.Semigroup a>_R
                 ->_R <Exercises.Identity a>_R
                 ->_R <Exercises.Identity a>_R
                 ->_R Sym (Exercises.N:Identity[0] <a>_R)) -}
2bba741870b11daf22cac21ca9d17a2b
  $fSemigroupIdentity_$csconcat ::
    Data.Semigroup.Semigroup a =>
    Data.List.NonEmpty.NonEmpty (Exercises.Identity a)
    -> Exercises.Identity a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LS),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.List.NonEmpty.NonEmpty (Exercises.Identity a)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Exercises.$w$csconcat4 @ a w ww1 ww2 }) -}
2bba741870b11daf22cac21ca9d17a2b
  $fSemigroupIdentity_$cstimes ::
    Data.Semigroup.Semigroup a =>
    forall b.
    GHC.Real.Integral b =>
    b -> Exercises.Identity a -> Exercises.Identity a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U> -}
6597755182c9a37d881780851343d36b
  $fSemigroupOr :: Data.Semigroup.Semigroup (Exercises.Or a b)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a @ b.
                  @ (Exercises.Or a b)
                  (Exercises.$fSemigroupOr_$c<> @ a @ b)
                  (Exercises.$fSemigroupOr_$csconcat @ a @ b)
                  (Exercises.$fSemigroupOr_$cstimes @ a @ b) -}
6597755182c9a37d881780851343d36b
  $fSemigroupOr1 ::
    Exercises.Or a b -> [Exercises.Or a b] -> Exercises.Or a b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
6597755182c9a37d881780851343d36b
  $fSemigroupOr_$c<> ::
    Exercises.Or a b -> Exercises.Or a b -> Exercises.Or a b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (sec :: Exercises.Or a b) (ds :: Exercises.Or a b) ->
                 case sec of wild {
                   Exercises.Fst ipv -> ds Exercises.Snd ds1 -> wild }) -}
6597755182c9a37d881780851343d36b
  $fSemigroupOr_$csconcat ::
    Data.List.NonEmpty.NonEmpty (Exercises.Or a b) -> Exercises.Or a b
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b (w :: Data.List.NonEmpty.NonEmpty (Exercises.Or a b)) ->
                 case w of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Exercises.$fSemigroupOr1 @ a @ b ww1 ww2 }) -}
6597755182c9a37d881780851343d36b
  $fSemigroupOr_$cstimes ::
    GHC.Real.Integral b1 => b1 -> Exercises.Or a b -> Exercises.Or a b
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
1ce5192802781017921876de5991bb07
  $fSemigroupThree ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    Data.Semigroup.Semigroup (Exercises.Three a b c)
  DFunId
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                      ($dSemigroup2 :: Data.Semigroup.Semigroup c).
                  @ (Exercises.Three a b c)
                  (Exercises.$fSemigroupThree_$c<>
                     @ a
                     @ b
                     @ c
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2)
                  (Exercises.$fSemigroupThree_$csconcat
                     @ a
                     @ b
                     @ c
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2)
                  (Exercises.$fSemigroupThree_$cstimes
                     @ a
                     @ b
                     @ c
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2) -}
1ce5192802781017921876de5991bb07
  $fSemigroupThree_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    Exercises.Three a b c
    -> Exercises.Three a b c -> Exercises.Three a b c
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U)><S,1*U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Exercises.Three a b c)
                   (w4 :: Exercises.Three a b c) ->
                 case w3 of ww { Exercises.Three ww1 ww2 ww3 ->
                 case w4 of ww4 { Exercises.Three ww5 ww6 ww7 ->
                 Exercises.Three
                   @ a
                   @ b
                   @ c
                   (Data.Semigroup.<> @ a w ww1 ww5)
                   (Data.Semigroup.<> @ b w1 ww2 ww6)
                   (Data.Semigroup.<> @ c w2 ww3 ww7) } }) -}
1ce5192802781017921876de5991bb07
  $fSemigroupThree_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    Data.List.NonEmpty.NonEmpty (Exercises.Three a b c)
    -> Exercises.Three a b c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U,U),1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.List.NonEmpty.NonEmpty (Exercises.Three a b c)) ->
                 case w3 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 case ww1 of ww3 { Exercises.Three ww4 ww5 ww6 ->
                 case Exercises.$w$csconcat5
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        ww4
                        ww5
                        ww6
                        ww2 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 Exercises.Three @ a @ b @ c ww8 ww9 ww10 } } }) -}
1ce5192802781017921876de5991bb07
  $fSemigroupThree_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Exercises.Three a b c -> Exercises.Three a b c
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   @ b1
                   (w3 :: GHC.Real.Integral b1)
                   (w4 :: b1)
                   (w5 :: Exercises.Three a b c) ->
                 case w5 of ww { Exercises.Three ww1 ww2 ww3 ->
                 case Exercises.$w$cstimes1
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        @ b1
                        w3
                        w4
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Exercises.Three @ a @ b @ c ww5 ww6 ww7 } }) -}
988bfb7fa5c37f9ad7b564813620fb32
  $fSemigroupTrivial :: Data.Semigroup.Semigroup Exercises.Trivial
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.Trivial
                  Exercises.$fSemigroupTrivial_$c<>
                  Exercises.$fSemigroupTrivial_$csconcat
                  Exercises.$fSemigroupTrivial_$cstimes -}
988bfb7fa5c37f9ad7b564813620fb32
  $fSemigroupTrivial_$c<> ::
    Exercises.Trivial -> Exercises.Trivial -> Exercises.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Exercises.Trivial) (ds1 :: Exercises.Trivial) ->
                 Exercises.Trivial) -}
988bfb7fa5c37f9ad7b564813620fb32
  $fSemigroupTrivial_$csconcat ::
    Data.List.NonEmpty.NonEmpty Exercises.Trivial -> Exercises.Trivial
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*U(),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.List.NonEmpty.NonEmpty Exercises.Trivial) ->
                 case ds of wild { Data.List.NonEmpty.:| a1 as ->
                 case as of wild1 { [] -> a1 : c cs -> Exercises.Trivial } }) -}
988bfb7fa5c37f9ad7b564813620fb32
  $fSemigroupTrivial_$cstimes ::
    GHC.Real.Integral b => b -> Exercises.Trivial -> Exercises.Trivial
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,1*U()> -}
f87841b7919b465d87283a32a3dbf95e
  $fSemigroupTwo ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.Semigroup.Semigroup (Exercises.Two a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b).
                  @ (Exercises.Two a b)
                  (Exercises.$fSemigroupTwo_$c<> @ a @ b $dSemigroup $dSemigroup1)
                  (Exercises.$fSemigroupTwo_$csconcat
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1)
                  (Exercises.$fSemigroupTwo_$cstimes
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1) -}
f87841b7919b465d87283a32a3dbf95e
  $fSemigroupTwo_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Exercises.Two a b -> Exercises.Two a b -> Exercises.Two a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                   (ds :: Exercises.Two a b)
                   (ds1 :: Exercises.Two a b) ->
                 case ds of wild { Exercises.Two a0 b0 ->
                 case ds1 of wild1 { Exercises.Two a1 b1 ->
                 Exercises.Two
                   @ a
                   @ b
                   (Data.Semigroup.<> @ a $dSemigroup a0 a1)
                   (Data.Semigroup.<> @ b $dSemigroup1 b0 b1) } }) -}
f87841b7919b465d87283a32a3dbf95e
  $fSemigroupTwo_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.List.NonEmpty.NonEmpty (Exercises.Two a b)
    -> Exercises.Two a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U),1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.List.NonEmpty.NonEmpty (Exercises.Two a b)) ->
                 case w2 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 case ww1 of ww3 { Exercises.Two ww4 ww5 ->
                 case Exercises.$w$csconcat6
                        @ a
                        @ b
                        w
                        w1
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 Exercises.Two @ a @ b ww7 ww8 } } }) -}
f87841b7919b465d87283a32a3dbf95e
  $fSemigroupTwo_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Exercises.Two a b -> Exercises.Two a b
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   @ b1
                   (w2 :: GHC.Real.Integral b1)
                   (w3 :: b1)
                   (w4 :: Exercises.Two a b) ->
                 case w4 of ww { Exercises.Two ww1 ww2 ->
                 case Exercises.$w$cstimes2
                        @ a
                        @ b
                        w
                        w1
                        @ b1
                        w2
                        w3
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 Exercises.Two @ a @ b ww4 ww5 } }) -}
6b88f35a43d36caf324fba6667c62a26
  $fSemigroupValidation ::
    Data.Semigroup.Semigroup a =>
    Data.Semigroup.Semigroup (Exercises.Validation a b)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dSemigroup :: Data.Semigroup.Semigroup a).
                  @ (Exercises.Validation a b)
                  (Exercises.$fSemigroupValidation_$c<> @ a @ b $dSemigroup)
                  (Exercises.$fSemigroupValidation_$csconcat @ a @ b $dSemigroup)
                  (Exercises.$fSemigroupValidation_$cstimes @ a @ b $dSemigroup) -}
6b88f35a43d36caf324fba6667c62a26
  $fSemigroupValidation_$c<> ::
    Data.Semigroup.Semigroup a =>
    Exercises.Validation a b
    -> Exercises.Validation a b -> Exercises.Validation a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   (ds :: Exercises.Validation a b)
                   (ds1 :: Exercises.Validation a b) ->
                 case ds of wild {
                   Exercises.Fail a0
                   -> case ds1 of wild1 {
                        Exercises.Fail a1
                        -> Exercises.Fail @ a @ b (Data.Semigroup.<> @ a $dSemigroup a0 a1)
                        Exercises.Succ ipv -> wild }
                   Exercises.Succ ipv
                   -> case ds1 of wild1 {
                        Exercises.Fail ds2 -> wild1 Exercises.Succ ipv1 -> wild } }) -}
6b88f35a43d36caf324fba6667c62a26
  $fSemigroupValidation_$csconcat ::
    Data.Semigroup.Semigroup a =>
    Data.List.NonEmpty.NonEmpty (Exercises.Validation a b)
    -> Exercises.Validation a b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.List.NonEmpty.NonEmpty (Exercises.Validation a b)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Exercises.$w$csconcat7 @ a @ b w ww1 ww2 }) -}
6b88f35a43d36caf324fba6667c62a26
  $fSemigroupValidation_$cstimes ::
    Data.Semigroup.Semigroup a =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Exercises.Validation a b -> Exercises.Validation a b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
c27cf5c706cc25cc7112ff188a20336e
  $fShowAccumulateBoth ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Show.Show (Exercises.AccumulateBoth a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow7 :: GHC.Show.Show a)
                      ($dShow8 :: GHC.Show.Show b).
                  @ (Exercises.AccumulateBoth a b)
                  (Exercises.$fShowAccumulateBoth_$cshowsPrec
                     @ a
                     @ b
                     $dShow7
                     $dShow8)
                  (Exercises.$fShowAccumulateBoth_$cshow @ a @ b $dShow7 $dShow8)
                  (Exercises.$fShowAccumulateBoth_$cshowList
                     @ a
                     @ b
                     $dShow7
                     $dShow8) -}
a8ae391dd88992fea5b15df63275800c
  $fShowAccumulateBoth1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8acf010fec270d2316ac6e68b5ba0e62
  $fShowAccumulateBoth2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AccumulateBoth "#) -}
3291f482f6a465e04a8e2b40b0a32ea8
  $fShowAccumulateBoth3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Succ "#) -}
d3ddd40c0e5eee5886f0302eb6b22ac3
  $fShowAccumulateBoth4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fail "#) -}
5ac1334d8faebdc7384703ac47312805
  $fShowAccumulateBoth5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
2761151312401188110e730a96b850cf
  $fShowAccumulateBoth6 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c27cf5c706cc25cc7112ff188a20336e
  $fShowAccumulateBoth_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    Exercises.AccumulateBoth a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show a)
                   ($dShow8 :: GHC.Show.Show b)
                   (x :: Exercises.AccumulateBoth a b) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Exercises.$fShowAccumulateBoth2
                   (case x `cast`
                         (Exercises.N:AccumulateBoth[0] <a>_N <b>_N) of wild {
                      Exercises.Fail b1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Exercises.$fShowAccumulateBoth4
                              (GHC.Show.showsPrec
                                 @ a
                                 $dShow7
                                 Exercises.$fShowAccumulateBoth5
                                 b1
                                 Exercises.$fShowAccumulateBoth6))
                      Exercises.Succ b1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Exercises.$fShowAccumulateBoth3
                              (GHC.Show.showsPrec
                                 @ b
                                 $dShow8
                                 Exercises.$fShowAccumulateBoth5
                                 b1
                                 Exercises.$fShowAccumulateBoth6)) })) -}
c27cf5c706cc25cc7112ff188a20336e
  $fShowAccumulateBoth_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    [Exercises.AccumulateBoth a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show a)
                   ($dShow8 :: GHC.Show.Show b)
                   (eta :: [Exercises.AccumulateBoth a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Exercises.AccumulateBoth a b)
                   (Exercises.$fShowAccumulateBoth_$cshowsPrec
                      @ a
                      @ b
                      $dShow7
                      $dShow8
                      Exercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
c27cf5c706cc25cc7112ff188a20336e
  $fShowAccumulateBoth_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Types.Int -> Exercises.AccumulateBoth a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Exercises.AccumulateBoth a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Exercises.$w$cshowsPrec @ a @ b w w1 ww1 w3 }) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fShowAccumulateRight ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Show.Show (Exercises.AccumulateRight a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow7 :: GHC.Show.Show a)
                      ($dShow8 :: GHC.Show.Show b).
                  @ (Exercises.AccumulateRight a b)
                  (Exercises.$fShowAccumulateRight_$cshowsPrec
                     @ a
                     @ b
                     $dShow7
                     $dShow8)
                  (Exercises.$fShowAccumulateRight_$cshow @ a @ b $dShow7 $dShow8)
                  (Exercises.$fShowAccumulateRight_$cshowList
                     @ a
                     @ b
                     $dShow7
                     $dShow8) -}
18de46e442ba5000565c751a2c9a8f52
  $fShowAccumulateRight1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AccumulateRight "#) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fShowAccumulateRight_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    Exercises.AccumulateRight a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show a)
                   ($dShow8 :: GHC.Show.Show b)
                   (x :: Exercises.AccumulateRight a b) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Exercises.$fShowAccumulateRight1
                   (case x `cast`
                         (Exercises.N:AccumulateRight[0] <a>_N <b>_N) of wild {
                      Exercises.Fail b1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Exercises.$fShowAccumulateBoth4
                              (GHC.Show.showsPrec
                                 @ a
                                 $dShow7
                                 Exercises.$fShowAccumulateBoth5
                                 b1
                                 Exercises.$fShowAccumulateBoth6))
                      Exercises.Succ b1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Exercises.$fShowAccumulateBoth3
                              (GHC.Show.showsPrec
                                 @ b
                                 $dShow8
                                 Exercises.$fShowAccumulateBoth5
                                 b1
                                 Exercises.$fShowAccumulateBoth6)) })) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fShowAccumulateRight_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    [Exercises.AccumulateRight a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show a)
                   ($dShow8 :: GHC.Show.Show b)
                   (eta :: [Exercises.AccumulateRight a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Exercises.AccumulateRight a b)
                   (Exercises.$fShowAccumulateRight_$cshowsPrec
                      @ a
                      @ b
                      $dShow7
                      $dShow8
                      Exercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $fShowAccumulateRight_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Types.Int -> Exercises.AccumulateRight a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Exercises.AccumulateRight a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Exercises.$w$cshowsPrec2 @ a @ b w w1 ww1 w3 }) -}
bf28a0505642d6c6d4331a9d926c82af
  $fShowBoolConj :: GHC.Show.Show Exercises.BoolConj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.BoolConj
                  Exercises.$fShowBoolConj_$cshowsPrec
                  Exercises.$fShowBoolConj_$cshow
                  Exercises.$fShowBoolConj_$cshowList -}
bf28a0505642d6c6d4331a9d926c82af
  $fShowBoolConj1 :: Exercises.BoolConj -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Exercises.BoolConj) (w1 :: GHC.Base.String) ->
                 Exercises.$w$cshowsPrec3 0# w w1) -}
bbd278efd02ebb10faa4f5efaa0144b0
  $fShowBoolConj2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BoolConj "#) -}
bf28a0505642d6c6d4331a9d926c82af
  $fShowBoolConj_$cshow :: Exercises.BoolConj -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Exercises.BoolConj) ->
                 Exercises.$fShowBoolConj_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bf28a0505642d6c6d4331a9d926c82af
  $fShowBoolConj_$cshowList :: [Exercises.BoolConj] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Exercises.BoolConj
                   Exercises.$fShowBoolConj1) -}
bf28a0505642d6c6d4331a9d926c82af
  $fShowBoolConj_$cshowsPrec ::
    GHC.Types.Int -> Exercises.BoolConj -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Exercises.BoolConj)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Exercises.$w$cshowsPrec3 ww1 w1 w2 }) -}
224b931c3c586e626ad90b143df43ab2
  $fShowBoolDisj :: GHC.Show.Show Exercises.BoolDisj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.BoolDisj
                  Exercises.$fShowBoolDisj_$cshowsPrec
                  Exercises.$fShowBoolDisj_$cshow
                  Exercises.$fShowBoolDisj_$cshowList -}
224b931c3c586e626ad90b143df43ab2
  $fShowBoolDisj1 :: Exercises.BoolDisj -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Exercises.BoolDisj) (w1 :: GHC.Base.String) ->
                 Exercises.$w$cshowsPrec4 0# w w1) -}
51d9173430d3efbeb1a2c183aba15dc1
  $fShowBoolDisj2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BoolDisj "#) -}
224b931c3c586e626ad90b143df43ab2
  $fShowBoolDisj_$cshow :: Exercises.BoolDisj -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Exercises.BoolDisj) ->
                 Exercises.$fShowBoolDisj_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
224b931c3c586e626ad90b143df43ab2
  $fShowBoolDisj_$cshowList :: [Exercises.BoolDisj] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Exercises.BoolDisj
                   Exercises.$fShowBoolDisj1) -}
224b931c3c586e626ad90b143df43ab2
  $fShowBoolDisj_$cshowsPrec ::
    GHC.Types.Int -> Exercises.BoolDisj -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Exercises.BoolDisj)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Exercises.$w$cshowsPrec4 ww1 w1 w2 }) -}
9b9ef5c8f42894b24053fccb02690f4b
  $fShowFour ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    GHC.Show.Show (Exercises.Four a b c d)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dShow7 :: GHC.Show.Show d)
                      ($dShow8 :: GHC.Show.Show c)
                      ($dShow9 :: GHC.Show.Show b)
                      ($dShow10 :: GHC.Show.Show a).
                  @ (Exercises.Four a b c d)
                  (Exercises.$fShowFour_$cshowsPrec
                     @ a
                     @ b
                     @ c
                     @ d
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10)
                  (Exercises.$fShowFour_$cshow
                     @ a
                     @ b
                     @ c
                     @ d
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10)
                  (Exercises.$fShowFour_$cshowList
                     @ a
                     @ b
                     @ c
                     @ d
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10) -}
c937df2b46eb2d837e2922aad2aa0087
  $fShowFour1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Four "#) -}
9b9ef5c8f42894b24053fccb02690f4b
  $fShowFour_$cshow ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    Exercises.Four a b c d -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dShow7 :: GHC.Show.Show d)
                   ($dShow8 :: GHC.Show.Show c)
                   ($dShow9 :: GHC.Show.Show b)
                   ($dShow10 :: GHC.Show.Show a)
                   (x :: Exercises.Four a b c d) ->
                 Exercises.$fShowFour_$cshowsPrec
                   @ a
                   @ b
                   @ c
                   @ d
                   $dShow7
                   $dShow8
                   $dShow9
                   $dShow10
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9b9ef5c8f42894b24053fccb02690f4b
  $fShowFour_$cshowList ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    [Exercises.Four a b c d] -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dShow7 :: GHC.Show.Show d)
                   ($dShow8 :: GHC.Show.Show c)
                   ($dShow9 :: GHC.Show.Show b)
                   ($dShow10 :: GHC.Show.Show a)
                   (eta :: [Exercises.Four a b c d])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Exercises.Four a b c d)
                   (Exercises.$fShowFour_$cshowsPrec
                      @ a
                      @ b
                      @ c
                      @ d
                      $dShow7
                      $dShow8
                      $dShow9
                      $dShow10
                      Exercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
9b9ef5c8f42894b24053fccb02690f4b
  $fShowFour_$cshowsPrec ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    GHC.Types.Int -> Exercises.Four a b c d -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Show.Show d)
                   (w1 :: GHC.Show.Show c)
                   (w2 :: GHC.Show.Show b)
                   (w3 :: GHC.Show.Show a)
                   (w4 :: GHC.Types.Int)
                   (w5 :: Exercises.Four a b c d) ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 case w5 of ww2 { Exercises.Four ww3 ww4 ww5 ww6 ->
                 Exercises.$w$cshowsPrec5
                   @ a
                   @ b
                   @ c
                   @ d
                   w
                   w1
                   w2
                   w3
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
2bba741870b11daf22cac21ca9d17a2b
  $fShowIdentity ::
    GHC.Show.Show a => GHC.Show.Show (Exercises.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow7 :: GHC.Show.Show a).
                  @ (Exercises.Identity a)
                  (Exercises.$fShowIdentity_$cshowsPrec @ a $dShow7)
                  (Exercises.$fShowIdentity_$cshow @ a $dShow7)
                  (Exercises.$fShowIdentity_$cshowList @ a $dShow7) -}
bc8637f66a6db3c34201657339475ed7
  $fShowIdentity1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Identity "#) -}
2bba741870b11daf22cac21ca9d17a2b
  $fShowIdentity_$cshow ::
    GHC.Show.Show a => Exercises.Identity a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow7 :: GHC.Show.Show a) (x :: Exercises.Identity a) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Exercises.$fShowIdentity1)
                   (GHC.Show.showsPrec
                      @ a
                      $dShow7
                      Exercises.$fShowAccumulateBoth5
                      x `cast` (Exercises.N:Identity[0] <a>_R)
                      (GHC.Types.[] @ GHC.Types.Char))) -}
2bba741870b11daf22cac21ca9d17a2b
  $fShowIdentity_$cshowList ::
    GHC.Show.Show a => [Exercises.Identity a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow7 :: GHC.Show.Show a)
                   (eta :: [Exercises.Identity a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Exercises.Identity a)
                   (Exercises.$fShowIdentity_$cshowsPrec
                      @ a
                      $dShow7
                      Exercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
2bba741870b11daf22cac21ca9d17a2b
  $fShowIdentity_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Exercises.Identity a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Exercises.Identity a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Exercises.$w$cshowsPrec6 @ a w ww1 w2 }) -}
6597755182c9a37d881780851343d36b
  $fShowOr ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (Exercises.Or a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow7 :: GHC.Show.Show b)
                      ($dShow8 :: GHC.Show.Show a).
                  @ (Exercises.Or a b)
                  (Exercises.$fShowOr_$cshowsPrec @ a @ b $dShow7 $dShow8)
                  (Exercises.$fShowOr_$cshow @ a @ b $dShow7 $dShow8)
                  (Exercises.$fShowOr_$cshowList @ a @ b $dShow7 $dShow8) -}
6597755182c9a37d881780851343d36b
  $fShowOr1 ::
    Exercises.Or GHC.Types.Int GHC.Types.Bool -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Exercises.Or GHC.Types.Int GHC.Types.Bool)
                   (w1 :: GHC.Base.String) ->
                 Exercises.$w$s$cshowsPrec 0# w w1) -}
04a52fd6eaf36bdbfda21949f1a3ba5d
  $fShowOr2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Snd "#) -}
e86ea372fb554c074b2505f4ab68f7c2
  $fShowOr3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fst "#) -}
6597755182c9a37d881780851343d36b
  $fShowOr_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Exercises.Or a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show b)
                   ($dShow8 :: GHC.Show.Show a)
                   (x :: Exercises.Or a b) ->
                 case x of wild {
                   Exercises.Fst b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Exercises.$fShowOr3
                        (GHC.Show.showsPrec
                           @ a
                           $dShow8
                           Exercises.$fShowAccumulateBoth5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Exercises.Snd b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Exercises.$fShowOr2
                        (GHC.Show.showsPrec
                           @ b
                           $dShow7
                           Exercises.$fShowAccumulateBoth5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
6597755182c9a37d881780851343d36b
  $fShowOr_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Exercises.Or a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show b)
                   ($dShow8 :: GHC.Show.Show a)
                   (eta :: [Exercises.Or a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Exercises.Or a b)
                   (Exercises.$fShowOr_$cshowsPrec
                      @ a
                      @ b
                      $dShow7
                      $dShow8
                      Exercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
6597755182c9a37d881780851343d36b
  $fShowOr_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Exercises.Or a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Exercises.Or a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Exercises.$w$cshowsPrec7 @ a @ b w w1 ww1 w3 }) -}
6597755182c9a37d881780851343d36b
  $fShowOr_$s$cshow ::
    Exercises.Or GHC.Types.Int GHC.Types.Bool -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Exercises.Or GHC.Types.Int GHC.Types.Bool) ->
                 Exercises.$fShowOr_$s$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6597755182c9a37d881780851343d36b
  $fShowOr_$s$cshowList ::
    [Exercises.Or GHC.Types.Int GHC.Types.Bool] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Exercises.Or GHC.Types.Int GHC.Types.Bool])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Exercises.Or GHC.Types.Int GHC.Types.Bool)
                   Exercises.$fShowOr1
                   eta
                   eta1) -}
6597755182c9a37d881780851343d36b
  $fShowOr_$s$cshowsPrec ::
    GHC.Types.Int
    -> Exercises.Or GHC.Types.Int GHC.Types.Bool -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Exercises.Or GHC.Types.Int GHC.Types.Bool)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Exercises.$w$s$cshowsPrec ww1 w1 w2 }) -}
6597755182c9a37d881780851343d36b
  $fShowOr_$s$fShowOr ::
    GHC.Show.Show (Exercises.Or GHC.Types.Int GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Exercises.Or GHC.Types.Int GHC.Types.Bool)
                  Exercises.$fShowOr_$s$cshowsPrec
                  Exercises.$fShowOr_$s$cshow
                  Exercises.$fShowOr_$s$cshowList -}
1ce5192802781017921876de5991bb07
  $fShowThree ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (Exercises.Three a b c)
  DFunId
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dShow7 :: GHC.Show.Show c)
                      ($dShow8 :: GHC.Show.Show b)
                      ($dShow9 :: GHC.Show.Show a).
                  @ (Exercises.Three a b c)
                  (Exercises.$fShowThree_$cshowsPrec
                     @ a
                     @ b
                     @ c
                     $dShow7
                     $dShow8
                     $dShow9)
                  (Exercises.$fShowThree_$cshow @ a @ b @ c $dShow7 $dShow8 $dShow9)
                  (Exercises.$fShowThree_$cshowList
                     @ a
                     @ b
                     @ c
                     $dShow7
                     $dShow8
                     $dShow9) -}
6054a297cbbebfb6cdb481ddad7a1132
  $fShowThree1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Three "#) -}
1ce5192802781017921876de5991bb07
  $fShowThree_$cshow ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    Exercises.Three a b c -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dShow7 :: GHC.Show.Show c)
                   ($dShow8 :: GHC.Show.Show b)
                   ($dShow9 :: GHC.Show.Show a)
                   (x :: Exercises.Three a b c) ->
                 Exercises.$fShowThree_$cshowsPrec
                   @ a
                   @ b
                   @ c
                   $dShow7
                   $dShow8
                   $dShow9
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1ce5192802781017921876de5991bb07
  $fShowThree_$cshowList ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    [Exercises.Three a b c] -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dShow7 :: GHC.Show.Show c)
                   ($dShow8 :: GHC.Show.Show b)
                   ($dShow9 :: GHC.Show.Show a)
                   (eta :: [Exercises.Three a b c])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Exercises.Three a b c)
                   (Exercises.$fShowThree_$cshowsPrec
                      @ a
                      @ b
                      @ c
                      $dShow7
                      $dShow8
                      $dShow9
                      Exercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
1ce5192802781017921876de5991bb07
  $fShowThree_$cshowsPrec ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Exercises.Three a b c -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Show.Show c)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Show.Show a)
                   (w3 :: GHC.Types.Int)
                   (w4 :: Exercises.Three a b c) ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 case w4 of ww2 { Exercises.Three ww3 ww4 ww5 ->
                 Exercises.$w$cshowsPrec8
                   @ a
                   @ b
                   @ c
                   w
                   w1
                   w2
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
988bfb7fa5c37f9ad7b564813620fb32
  $fShowTrivial :: GHC.Show.Show Exercises.Trivial
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.Trivial
                  Exercises.$fShowTrivial_$cshowsPrec
                  Exercises.$fShowTrivial_$cshow
                  Exercises.$fShowTrivial_$cshowList -}
988bfb7fa5c37f9ad7b564813620fb32
  $fShowTrivial1 :: Exercises.Trivial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Exercises.Trivial) (eta :: GHC.Base.String) ->
                 case ds of wild { Exercises.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Exercises.$fShowTrivial2)
                   eta }) -}
327b13569fc390b2c0e3de64011049ac
  $fShowTrivial2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Trivial"#) -}
988bfb7fa5c37f9ad7b564813620fb32
  $fShowTrivial_$cshow :: Exercises.Trivial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Exercises.Trivial) ->
                 case x of wild { Exercises.Trivial ->
                 Exercises.$fShowTrivial2 }) -}
988bfb7fa5c37f9ad7b564813620fb32
  $fShowTrivial_$cshowList :: [Exercises.Trivial] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Exercises.Trivial
                   Exercises.$fShowTrivial1) -}
988bfb7fa5c37f9ad7b564813620fb32
  $fShowTrivial_$cshowsPrec ::
    GHC.Types.Int -> Exercises.Trivial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Exercises.Trivial)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { Exercises.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Exercises.$fShowTrivial2)
                   eta }) -}
f87841b7919b465d87283a32a3dbf95e
  $fShowTwo ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (Exercises.Two a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow7 :: GHC.Show.Show b)
                      ($dShow8 :: GHC.Show.Show a).
                  @ (Exercises.Two a b)
                  (Exercises.$fShowTwo_$cshowsPrec @ a @ b $dShow7 $dShow8)
                  (Exercises.$fShowTwo_$cshow @ a @ b $dShow7 $dShow8)
                  (Exercises.$fShowTwo_$cshowList @ a @ b $dShow7 $dShow8) -}
25b447f2c5c55cccdb4c0343e173ae94
  $fShowTwo1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Two "#) -}
f87841b7919b465d87283a32a3dbf95e
  $fShowTwo_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Exercises.Two a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show b)
                   ($dShow8 :: GHC.Show.Show a)
                   (x :: Exercises.Two a b) ->
                 Exercises.$fShowTwo_$cshowsPrec
                   @ a
                   @ b
                   $dShow7
                   $dShow8
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f87841b7919b465d87283a32a3dbf95e
  $fShowTwo_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Exercises.Two a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show b)
                   ($dShow8 :: GHC.Show.Show a)
                   (eta :: [Exercises.Two a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Exercises.Two a b)
                   (Exercises.$fShowTwo_$cshowsPrec
                      @ a
                      @ b
                      $dShow7
                      $dShow8
                      Exercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
f87841b7919b465d87283a32a3dbf95e
  $fShowTwo_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Exercises.Two a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Exercises.Two a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { Exercises.Two ww3 ww4 ->
                 Exercises.$w$cshowsPrec9 @ a @ b w w1 ww1 ww3 ww4 } }) -}
6b88f35a43d36caf324fba6667c62a26
  $fShowValidation ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (Exercises.Validation a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow7 :: GHC.Show.Show b)
                      ($dShow8 :: GHC.Show.Show a).
                  @ (Exercises.Validation a b)
                  (Exercises.$fShowValidation_$cshowsPrec @ a @ b $dShow7 $dShow8)
                  (Exercises.$fShowValidation_$cshow @ a @ b $dShow7 $dShow8)
                  (Exercises.$fShowValidation_$cshowList @ a @ b $dShow7 $dShow8) -}
6b88f35a43d36caf324fba6667c62a26
  $fShowValidation_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Exercises.Validation a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show b)
                   ($dShow8 :: GHC.Show.Show a)
                   (x :: Exercises.Validation a b) ->
                 case x of wild {
                   Exercises.Fail b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Exercises.$fShowAccumulateBoth4
                        (GHC.Show.showsPrec
                           @ a
                           $dShow8
                           Exercises.$fShowAccumulateBoth5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Exercises.Succ b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Exercises.$fShowAccumulateBoth3
                        (GHC.Show.showsPrec
                           @ b
                           $dShow7
                           Exercises.$fShowAccumulateBoth5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
6b88f35a43d36caf324fba6667c62a26
  $fShowValidation_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Exercises.Validation a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show b)
                   ($dShow8 :: GHC.Show.Show a)
                   (eta :: [Exercises.Validation a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Exercises.Validation a b)
                   (Exercises.$fShowValidation_$cshowsPrec
                      @ a
                      @ b
                      $dShow7
                      $dShow8
                      Exercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
6b88f35a43d36caf324fba6667c62a26
  $fShowValidation_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Exercises.Validation a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Exercises.Validation a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Exercises.$w$cshowsPrec1 @ a @ b w w1 ww1 w3 }) -}
dccedafe537319805b3c61c0764fb186
  $s$fShowNonEmpty ::
    GHC.Show.Show (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                  (Data.List.NonEmpty.$fShowNonEmpty_$cshowsPrec
                     @ GHC.Types.Char
                     GHC.Show.$fShowChar)
                  Exercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshow
                  Exercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshowList -}
64c312bef19c164fa8f5ba7d4dbcfe98
  $s$fShowNonEmpty1 ::
    GHC.Show.Show (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
                  (Data.List.NonEmpty.$fShowNonEmpty_$cshowsPrec
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt)
                  Exercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshow1
                  Exercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshowList1 -}
b5cd362d979273cc6d82b1c1fceb8de9
  $s$fShowNonEmpty_$s$fShowNonEmpty_$cshow ::
    Data.List.NonEmpty.NonEmpty GHC.Types.Char -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S(S)L),1*U(1*U(1*U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.List.NonEmpty.NonEmpty GHC.Types.Char) ->
                 Data.List.NonEmpty.$fShowNonEmpty_$cshowsPrec
                   @ GHC.Types.Char
                   GHC.Show.$fShowChar
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
88ab9ccd7c2537ba65013d91c1e1ee21
  $s$fShowNonEmpty_$s$fShowNonEmpty_$cshow1 ::
    Data.List.NonEmpty.NonEmpty GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S(S)L),1*U(1*U(U),1*U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.List.NonEmpty.NonEmpty GHC.Types.Int) ->
                 Data.List.NonEmpty.$fShowNonEmpty_$cshowsPrec
                   @ GHC.Types.Int
                   GHC.Show.$fShowInt
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c83f31945034c8222423196226bf1695
  $s$fShowNonEmpty_$s$fShowNonEmpty_$cshowList ::
    [Data.List.NonEmpty.NonEmpty GHC.Types.Char] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Data.List.NonEmpty.NonEmpty GHC.Types.Char])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                   (Data.List.NonEmpty.$fShowNonEmpty_$cshowsPrec
                      @ GHC.Types.Char
                      GHC.Show.$fShowChar
                      Data.List.NonEmpty.$fShowNonEmpty1)
                   eta
                   eta1) -}
7e60ff1455120acfd05701ddb187f969
  $s$fShowNonEmpty_$s$fShowNonEmpty_$cshowList1 ::
    [Data.List.NonEmpty.NonEmpty GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Data.List.NonEmpty.NonEmpty GHC.Types.Int])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
                   (Data.List.NonEmpty.$fShowNonEmpty_$cshowsPrec
                      @ GHC.Types.Int
                      GHC.Show.$fShowInt
                      Data.List.NonEmpty.$fShowNonEmpty1)
                   eta
                   eta1) -}
b2d0484792a2d3276e219416e4ebc142
  $tc'AccumulateBoth :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7300383203451153481##
                   13283990972577338676##
                   Exercises.$trModule
                   Exercises.$tc'AccumulateBoth1) -}
cf8b3b5722178f0ae917b6646db33113
  $tc'AccumulateBoth1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AccumulateBoth"#) -}
b8f237e8ed28aaa20a1e4ebdd9567463
  $tc'AccumulateRight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5548794195922559040##
                   3383355782732941048##
                   Exercises.$trModule
                   Exercises.$tc'AccumulateRight1) -}
f2431a4d8ecf9ea79b415a2749a03c53
  $tc'AccumulateRight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AccumulateRight"#) -}
9c3fc516237560beca1fb9b7d643ef11
  $tc'BoolConj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6881906866658935691##
                   7169247351271592650##
                   Exercises.$trModule
                   Exercises.$tc'BoolConj1) -}
d38bf720fed17cfa1479f9e6d2c83a28
  $tc'BoolConj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BoolConj"#) -}
a2ce865d0622d802b0cc67d1b78a2edb
  $tc'BoolDisj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7445153967500106639##
                   9293965449143369539##
                   Exercises.$trModule
                   Exercises.$tc'BoolDisj1) -}
80be75957298a69e5f4713baddc71631
  $tc'BoolDisj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BoolDisj"#) -}
68fcce01b6df73da2f9005064baac8a4
  $tc'Combine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16176895531865130154##
                   254018443292012093##
                   Exercises.$trModule
                   Exercises.$tc'Combine1) -}
7c2bdf672ba1082c8f58fe2eab8de181
  $tc'Combine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Combine"#) -}
0562dc015d61285b9ad9ca7ae5c5a78d
  $tc'Comp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9724314590561206894##
                   170382493551577246##
                   Exercises.$trModule
                   Exercises.$tc'Comp1) -}
18b163ec67053c6c575d12092fc3b076
  $tc'Comp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Comp"#) -}
798d596bed276ee1fb3c1825c92d0fae
  $tc'Fail :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5007454263608054221##
                   3904048713412231530##
                   Exercises.$trModule
                   Exercises.$tc'Fail1) -}
86097a10b7591a4afb6833611751f6ed
  $tc'Fail1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fail"#) -}
1fece7cb8b1395516683b1f41e3b8b44
  $tc'Four :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12187069997398769896##
                   9401706839406507686##
                   Exercises.$trModule
                   Exercises.$tc'Four1) -}
9199a6bc4610dfe8738a750367a34c1e
  $tc'Four1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Four"#) -}
eb9ec0727476528429ddc9e6d57e6b45
  $tc'Fst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10456317081223914994##
                   4481499124317614015##
                   Exercises.$trModule
                   Exercises.$tc'Fst1) -}
367189b2d1be22563e735174d1bb6240
  $tc'Fst1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fst"#) -}
defbdbed933a0be785d8095621521038
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2752663075040986084##
                   2809975950705382637##
                   Exercises.$trModule
                   Exercises.$tc'Identity1) -}
2c30c767283241cf5ea48d93d4dec6ec
  $tc'Identity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Identity"#) -}
61a068be82ac5508c1ad6b3df59f877b
  $tc'Snd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5923250300250040107##
                   15322699976255194925##
                   Exercises.$trModule
                   Exercises.$tc'Snd1) -}
ac4f98c060f7d211e8be7e1074298824
  $tc'Snd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Snd"#) -}
fa2f6778f8c26e11021aea1ac674a5be
  $tc'Succ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6794132190331157737##
                   12348184617457823322##
                   Exercises.$trModule
                   Exercises.$tc'Succ1) -}
377c2dabca8ce1b0da4ee2dac8dbefe8
  $tc'Succ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Succ"#) -}
fc8ed77b76d45bac4c5adc85668ba40d
  $tc'Three :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13282928776085568917##
                   9002210539473325828##
                   Exercises.$trModule
                   Exercises.$tc'Three1) -}
4ffeffc95d341d272017c17b15cfe404
  $tc'Three1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Three"#) -}
34d16c1f1bda769ceff32224a8012c06
  $tc'Trivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2616944626979588304##
                   5353363847765843694##
                   Exercises.$trModule
                   Exercises.$tc'Trivial1) -}
02ab75c1b2f9c24289ec3b0cea54d9f5
  $tc'Trivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Trivial"#) -}
702cb3944cae97a10755a245cb23aa4f
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12178668834480753744##
                   11387656294215727410##
                   Exercises.$trModule
                   Exercises.$tc'Two1) -}
7b1a8abe0538c6ebfbc83ccb4bb6a6d0
  $tc'Two1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Two"#) -}
dd52c15af2b66ca0bb7dcfbc60a259dc
  $tcAccumulateBoth :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13314751430627420576##
                   11801259478013516688##
                   Exercises.$trModule
                   Exercises.$tcAccumulateBoth1) -}
0e2f9d2a27847da211f05d4940f871b3
  $tcAccumulateBoth1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AccumulateBoth"#) -}
d266dcccd6ab0ed884252b34d338e39b
  $tcAccumulateRight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   556239031595404021##
                   17580527691659905421##
                   Exercises.$trModule
                   Exercises.$tcAccumulateRight1) -}
8027c69c8fa201b71316f14c3c69b00a
  $tcAccumulateRight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AccumulateRight"#) -}
9b42b0ff50a40e062c5d47531ad45766
  $tcBoolConj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7783525576582208801##
                   9271431074973830408##
                   Exercises.$trModule
                   Exercises.$tcBoolConj1) -}
5096d36785d5b3574ae1bd27fcfb987e
  $tcBoolConj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BoolConj"#) -}
07d7cbeeed55679ca75de740a5143277
  $tcBoolDisj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13771220508829771399##
                   11276754430902048441##
                   Exercises.$trModule
                   Exercises.$tcBoolDisj1) -}
d311028d87774e2122f09d4e8fd224a2
  $tcBoolDisj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BoolDisj"#) -}
64c0a1600830b70e94e91bca5c517288
  $tcCombine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5270375917372867664##
                   11374485325385968337##
                   Exercises.$trModule
                   Exercises.$tcCombine1) -}
8a253432a6ca4d0f4be135f92690a68f
  $tcCombine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Combine"#) -}
6d8b1b0c6801896d66fd98d721679c42
  $tcComp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11889359287707728812##
                   8383872775444456022##
                   Exercises.$trModule
                   Exercises.$tcComp1) -}
24e43523f030cbb8133fc81ee8e4a4b9
  $tcComp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Comp"#) -}
453eee27a2b358bab6f35cd2e0f7de5f
  $tcFour :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10224809931680081401##
                   4651528670266820842##
                   Exercises.$trModule
                   Exercises.$tcFour1) -}
63ea63b5cb1f2ee2ba82c6f0bd75d1a6
  $tcFour1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Four"#) -}
b3d2bc19620600306c452bd0ab4ff293
  $tcIdentity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4397470230711656038##
                   17810168832680979252##
                   Exercises.$trModule
                   Exercises.$tcIdentity1) -}
a3e85ba2fa2a138bc82081c51c724dd2
  $tcIdentity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Identity"#) -}
b916a7e5643b155073d75f8794cda651
  $tcOr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1963965755713429671##
                   2387300025394152948##
                   Exercises.$trModule
                   Exercises.$tcOr1) -}
f25684848f65c21402c351a1653ffa02
  $tcOr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Or"#) -}
6ad94a61f6873ae7853da13d834bf98e
  $tcThree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16414575423502074459##
                   18021256853155645060##
                   Exercises.$trModule
                   Exercises.$tcThree1) -}
1c939f00028bf7f5141674c06e4ef9d3
  $tcThree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Three"#) -}
02463c264dc4878a77202d07cea819b5
  $tcTrivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17902425939755261168##
                   14421874619708439235##
                   Exercises.$trModule
                   Exercises.$tcTrivial1) -}
0ab189dbb73a8f2c2d52a8ee8a717ca3
  $tcTrivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Trivial"#) -}
95378922493baa2a4133de43edf7dedb
  $tcTwo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6372153420997362923##
                   6487033983567053235##
                   Exercises.$trModule
                   Exercises.$tcTwo1) -}
17438cce0e5457c576c8038121bad946
  $tcTwo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Two"#) -}
2c00b9952c032a571cd5105817287b5a
  $tcValidation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8428406863026377639##
                   18230145958428249335##
                   Exercises.$trModule
                   Exercises.$tcValidation1) -}
7d32b85d5c8c2e6ad7774d85487e0da0
  $tcValidation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Validation"#) -}
9ce1640d5bcc63bad6efe1157ea771b2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Exercises.$trModule2
                   Exercises.$trModule1) -}
010a84a94f194e8316d1d8e7e9f45745
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Exercises"#) -}
0462aa58f19e7445df05e6e669f72f38
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "exercises-0.1.0.0-5d7Flrmc8VqLSLbdKm59XF"#) -}
815c5771ae17350e1d01a930de7617bb
  $w$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> a -> b -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: a)
                   (ww3 :: b) ->
                 case GHC.Classes.== @ a w1 ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.== @ b w ww1 ww3 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
ab837a0f7932530228768611d40a863b
  $w$c== ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    a -> b -> c -> d -> a -> b -> c -> d -> GHC.Types.Bool
  {- Arity: 12, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Classes.Eq d)
                   (w1 :: GHC.Classes.Eq c)
                   (w2 :: GHC.Classes.Eq b)
                   (w3 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: d)
                   (ww4 :: a)
                   (ww5 :: b)
                   (ww6 :: c)
                   (ww7 :: d) ->
                 case GHC.Classes.== @ a w3 ww ww4 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.== @ b w2 ww1 ww5 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Classes.== @ c w1 ww2 ww6 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ d w ww3 ww7 } } }) -}
3901357bff8866899c0cc4f03632a9e8
  $w$c==1 ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> c -> a -> b -> c -> GHC.Types.Bool
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Classes.Eq c)
                   (w1 :: GHC.Classes.Eq b)
                   (w2 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: a)
                   (ww4 :: b)
                   (ww5 :: c) ->
                 case GHC.Classes.== @ a w2 ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.== @ b w1 ww1 ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.== @ c w ww2 ww5 } }) -}
d60e729a3b56081c769433b802ef84a6
  $w$c==2 ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> a -> b -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: a)
                   (ww3 :: b) ->
                 case GHC.Classes.== @ a w1 ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.== @ b w ww1 ww3 }) -}
c27cf5c706cc25cc7112ff188a20336e
  $w$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Exercises.AccumulateBoth a b
    -> [Exercises.AccumulateBoth a b] -> Exercises.AccumulateBoth a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (ww :: Exercises.AccumulateBoth a b)
                   (ww1 :: [Exercises.AccumulateBoth a b]) ->
                 letrec {
                   go4 :: Exercises.AccumulateBoth a b
                          -> [Exercises.AccumulateBoth a b] -> Exercises.AccumulateBoth a b
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (b1 :: Exercises.AccumulateBoth a b)
                       (ds1 :: [Exercises.AccumulateBoth a b]) ->
                     case ds1 of wild1 {
                       [] -> b1
                       : c cs
                       -> Exercises.$fSemigroupAccumulateBoth_$c<>
                            @ a
                            @ b
                            w
                            w1
                            b1
                            (go4 c cs) }
                 } in
                 go4 ww ww1) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $w$csconcat1 ::
    Data.Semigroup.Semigroup b =>
    Exercises.AccumulateRight a b
    -> [Exercises.AccumulateRight a b] -> Exercises.AccumulateRight a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ b
                   @ a
                   (w :: Data.Semigroup.Semigroup b)
                   (ww :: Exercises.AccumulateRight a b)
                   (ww1 :: [Exercises.AccumulateRight a b]) ->
                 letrec {
                   go4 :: Exercises.AccumulateRight a b
                          -> [Exercises.AccumulateRight a b] -> Exercises.AccumulateRight a b
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (b1 :: Exercises.AccumulateRight a b)
                       (ds1 :: [Exercises.AccumulateRight a b]) ->
                     case ds1 of wild1 {
                       [] -> b1
                       : c cs
                       -> case b1
                                 `cast`
                               (Exercises.N:AccumulateRight[0] <a>_N <b>_N) of wild {
                            Exercises.Fail ipv
                            -> case (go4 c cs)
                                      `cast`
                                    (Exercises.N:AccumulateRight[0] <a>_N <b>_N) of wild2 {
                                 Exercises.Fail ipv1
                                 -> wild `cast` (Sym (Exercises.N:AccumulateRight[0]) <a>_N <b>_N)
                                 Exercises.Succ ds
                                 -> wild2
                                      `cast`
                                    (Sym (Exercises.N:AccumulateRight[0]) <a>_N <b>_N) }
                            Exercises.Succ s0
                            -> case (go4 c cs)
                                      `cast`
                                    (Exercises.N:AccumulateRight[0] <a>_N <b>_N) of wild2 {
                                 Exercises.Fail ipv
                                 -> wild `cast` (Sym (Exercises.N:AccumulateRight[0]) <a>_N <b>_N)
                                 Exercises.Succ s1
                                 -> (Exercises.Succ @ a @ b (Data.Semigroup.<> @ b w s0 s1))
                                      `cast`
                                    (Sym (Exercises.N:AccumulateRight[0]) <a>_N <b>_N) } } }
                 } in
                 go4 ww ww1) -}
c97cb48bb80c3b09914961da54159d7b
  $w$csconcat2 ::
    Data.Semigroup.Semigroup b =>
    Exercises.Combine a b
    -> [Exercises.Combine a b] -> Exercises.Combine a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ b
                   @ a
                   (w :: Data.Semigroup.Semigroup b)
                   (ww :: Exercises.Combine a b)
                   (ww1 :: [Exercises.Combine a b]) ->
                 letrec {
                   go4 :: Exercises.Combine a b
                          -> [Exercises.Combine a b] -> Exercises.Combine a b
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (b1 :: Exercises.Combine a b)
                       (ds1 :: [Exercises.Combine a b]) ->
                     case ds1 of wild1 {
                       [] -> b1
                       : c cs
                       -> let {
                            g :: Exercises.Combine a b = go4 c cs
                          } in
                          (\ (a1 :: a) ->
                           Data.Semigroup.<>
                             @ b
                             w
                             (b1 `cast` (Exercises.N:Combine[0] <a>_N <b>_N) a1)
                             (g `cast` (Exercises.N:Combine[0] <a>_N <b>_N) a1))
                            `cast`
                          (Sym (Exercises.N:Combine[0]) <a>_N <b>_N) }
                 } in
                 go4 ww ww1) -}
9b9ef5c8f42894b24053fccb02690f4b
  $w$csconcat3 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    a -> b -> c -> d -> [Exercises.Four a b c d] -> (# a, b, c, d #)
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: d)
                   (ww4 :: [Exercises.Four a b c d]) ->
                 letrec {
                   $wgo2 :: a
                            -> b -> c -> d -> [Exercises.Four a b c d] -> (# a, b, c, d #)
                     {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
                        Inline: [0] -}
                   = \ (ww5 :: a)
                       (ww6 :: b)
                       (ww7 :: c)
                       (ww8 :: d)
                       (w4 :: [Exercises.Four a b c d]) ->
                     case w4 of wild1 {
                       [] -> (# ww5, ww6, ww7, ww8 #)
                       : c1 cs
                       -> case c1 of ww9 { Exercises.Four ww10 ww11 ww12 ww13 ->
                          case $wgo2
                                 ww10
                                 ww11
                                 ww12
                                 ww13
                                 cs of ww14 { (#,,,#) ww15 ww16 ww17 ww18 ->
                          (# Data.Semigroup.<> @ a w ww5 ww15,
                             Data.Semigroup.<> @ b w1 ww6 ww16,
                             Data.Semigroup.<> @ c w2 ww7 ww17,
                             Data.Semigroup.<> @ d w3 ww8 ww18 #) } } }
                 } in
                 $wgo2 ww ww1 ww2 ww3 ww4) -}
2bba741870b11daf22cac21ca9d17a2b
  $w$csconcat4 ::
    Data.Semigroup.Semigroup a =>
    Exercises.Identity a
    -> [Exercises.Identity a] -> Exercises.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Semigroup.Semigroup a)
                   (ww :: Exercises.Identity a)
                   (ww1 :: [Exercises.Identity a]) ->
                 letrec {
                   go4 :: Exercises.Identity a
                          -> [Exercises.Identity a] -> Exercises.Identity a
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (b :: Exercises.Identity a) (ds1 :: [Exercises.Identity a]) ->
                     case ds1 of wild1 {
                       [] -> b
                       : c cs
                       -> (Data.Semigroup.<>
                             @ a
                             w
                             b `cast` (Exercises.N:Identity[0] <a>_R)
                             (go4 c cs) `cast` (Exercises.N:Identity[0] <a>_R))
                            `cast`
                          (Sym (Exercises.N:Identity[0] <a>_R)) }
                 } in
                 go4 ww ww1) -}
1ce5192802781017921876de5991bb07
  $w$csconcat5 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    a -> b -> c -> [Exercises.Three a b c] -> (# a, b, c #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: [Exercises.Three a b c]) ->
                 letrec {
                   $wgo2 :: a -> b -> c -> [Exercises.Three a b c] -> (# a, b, c #)
                     {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
                   = \ (ww4 :: a)
                       (ww5 :: b)
                       (ww6 :: c)
                       (w3 :: [Exercises.Three a b c]) ->
                     case w3 of wild1 {
                       [] -> (# ww4, ww5, ww6 #)
                       : c1 cs
                       -> case c1 of ww7 { Exercises.Three ww8 ww9 ww10 ->
                          case $wgo2 ww8 ww9 ww10 cs of ww11 { (#,,#) ww12 ww13 ww14 ->
                          (# Data.Semigroup.<> @ a w ww4 ww12,
                             Data.Semigroup.<> @ b w1 ww5 ww13,
                             Data.Semigroup.<> @ c w2 ww6 ww14 #) } } }
                 } in
                 $wgo2 ww ww1 ww2 ww3) -}
f87841b7919b465d87283a32a3dbf95e
  $w$csconcat6 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    a -> b -> [Exercises.Two a b] -> (# a, b #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: [Exercises.Two a b]) ->
                 letrec {
                   $wgo2 :: a -> b -> [Exercises.Two a b] -> (# a, b #)
                     {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
                   = \ (ww3 :: a) (ww4 :: b) (w2 :: [Exercises.Two a b]) ->
                     case w2 of wild1 {
                       [] -> (# ww3, ww4 #)
                       : c cs
                       -> case c of ww5 { Exercises.Two ww6 ww7 ->
                          case $wgo2 ww6 ww7 cs of ww8 { (#,#) ww9 ww10 ->
                          (# Data.Semigroup.<> @ a w ww3 ww9,
                             Data.Semigroup.<> @ b w1 ww4 ww10 #) } } }
                 } in
                 $wgo2 ww ww1 ww2) -}
6b88f35a43d36caf324fba6667c62a26
  $w$csconcat7 ::
    Data.Semigroup.Semigroup a =>
    Exercises.Validation a b
    -> [Exercises.Validation a b] -> Exercises.Validation a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (ww :: Exercises.Validation a b)
                   (ww1 :: [Exercises.Validation a b]) ->
                 letrec {
                   go4 :: Exercises.Validation a b
                          -> [Exercises.Validation a b] -> Exercises.Validation a b
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (b1 :: Exercises.Validation a b)
                       (ds1 :: [Exercises.Validation a b]) ->
                     case ds1 of wild1 {
                       [] -> b1
                       : c cs
                       -> case b1 of wild {
                            Exercises.Fail a0
                            -> case go4 c cs of wild2 {
                                 Exercises.Fail a1
                                 -> Exercises.Fail @ a @ b (Data.Semigroup.<> @ a w a0 a1)
                                 Exercises.Succ ipv -> wild }
                            Exercises.Succ ipv
                            -> case go4 c cs of wild2 {
                                 Exercises.Fail ds -> wild2 Exercises.Succ ipv1 -> wild } } }
                 } in
                 go4 ww ww1) -}
c27cf5c706cc25cc7112ff188a20336e
  $w$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Prim.Int# -> Exercises.AccumulateBoth a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Exercises.AccumulateBoth a b) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Exercises.$w$cshowsPrec1
                       @ a
                       @ b
                       w1
                       w
                       11#
                       w2 `cast` (Exercises.N:AccumulateBoth[0] <a>_N <b>_N)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Exercises.$fShowAccumulateBoth2 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Exercises.$fShowAccumulateBoth2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
6b88f35a43d36caf324fba6667c62a26
  $w$cshowsPrec1 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> Exercises.Validation a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Exercises.Validation a b) ->
                 case w2 of wild {
                   Exercises.Fail b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w1 Exercises.$fShowAccumulateBoth5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Exercises.$fShowAccumulateBoth4 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Exercises.$fShowAccumulateBoth4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Exercises.Succ b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ b w Exercises.$fShowAccumulateBoth5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Exercises.$fShowAccumulateBoth3 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Exercises.$fShowAccumulateBoth3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
215fa5e6aa86193c928e65bccc2bb5ef
  $w$cshowsPrec2 ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Prim.Int# -> Exercises.AccumulateRight a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Exercises.AccumulateRight a b) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Exercises.$w$cshowsPrec1
                       @ a
                       @ b
                       w1
                       w
                       11#
                       w2 `cast` (Exercises.N:AccumulateRight[0] <a>_N <b>_N)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Exercises.$fShowAccumulateRight1 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Exercises.$fShowAccumulateRight1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
bf28a0505642d6c6d4331a9d926c82af
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Exercises.BoolConj -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Exercises.BoolConj)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Exercises.$fShowBoolConj2
                       (case w `cast` (Exercises.N:BoolConj[0]) of wild {
                          GHC.Types.False -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows18 x
                          GHC.Types.True
                          -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 x })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) }) -}
224b931c3c586e626ad90b143df43ab2
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Exercises.BoolDisj -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Exercises.BoolDisj)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Exercises.$fShowBoolDisj2
                       (case w `cast` (Exercises.N:BoolDisj[0]) of wild {
                          GHC.Types.False -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows18 x
                          GHC.Types.True
                          -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 x })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) }) -}
f3c26f4e5d4cc0dc48915e9fd9f492af
  $w$cshowsPrec5 ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> c -> d -> GHC.Show.ShowS
  {- Arity: 9,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Show.Show d)
                   (w1 :: GHC.Show.Show c)
                   (w2 :: GHC.Show.Show b)
                   (w3 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b)
                   (ww3 :: c)
                   (ww4 :: d) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w3 Exercises.$fShowAccumulateBoth5 ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w2 Exercises.$fShowAccumulateBoth5 ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ c w1 Exercises.$fShowAccumulateBoth5 ww3
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ d w Exercises.$fShowAccumulateBoth5 ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Exercises.$fShowFour1
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (f1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (f2 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
2bba741870b11daf22cac21ca9d17a2b
  $w$cshowsPrec6 ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> Exercises.Identity a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Exercises.Identity a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Exercises.$fShowAccumulateBoth5
                       w1 `cast` (Exercises.N:Identity[0] <a>_R)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Exercises.$fShowIdentity1 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Exercises.$fShowIdentity1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
6597755182c9a37d881780851343d36b
  $w$cshowsPrec7 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> Exercises.Or a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Exercises.Or a b) ->
                 case w2 of wild {
                   Exercises.Fst b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w1 Exercises.$fShowAccumulateBoth5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Exercises.$fShowOr3 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Exercises.$fShowOr3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Exercises.Snd b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ b w Exercises.$fShowAccumulateBoth5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Exercises.$fShowOr2 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Exercises.$fShowOr2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
55d467acba16a365120ee804370dfff3
  $w$cshowsPrec8 ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> c -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Show.Show c)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b)
                   (ww3 :: c) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w2 Exercises.$fShowAccumulateBoth5 ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w1 Exercises.$fShowAccumulateBoth5 ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ c w Exercises.$fShowAccumulateBoth5 ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Exercises.$fShowThree1
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (f1 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
fc6d232980960b9046910d3d67c3ff8c
  $w$cshowsPrec9 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w1 Exercises.$fShowAccumulateBoth5 ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w Exercises.$fShowAccumulateBoth5 ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Exercises.$fShowTwo1
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Exercises.$fShowTwo1
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))))) }) -}
91d9c1c348fc34628e61f08ffd85ab6c
  $w$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> a -> b -> c -> d -> (# a, b, c, d #)
  {- Arity: 10,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
39568e9d9165a4d4841641d9aae9aca2
  $w$cstimes1 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> a -> b -> c -> (# a, b, c #)
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
dbdcebceb311cdd58a64b27ce28c1715
  $w$cstimes2 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    forall b1. GHC.Real.Integral b1 => b1 -> a -> b -> (# a, b #)
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U>,
     Inline: [0] -}
6597755182c9a37d881780851343d36b
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> Exercises.Or GHC.Types.Int GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Exercises.Or GHC.Types.Int GHC.Types.Bool)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Exercises.Fst b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Exercises.$fShowOr3
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Exercises.$fShowOr3
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   Exercises.Snd b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Exercises.$fShowOr2
                            (case b1 of wild1 {
                               GHC.Types.False -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows18 x
                               GHC.Types.True
                               -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 x })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) } }) -}
c343d706ec2551e4df872c23ec2ce79e
  $wfourGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (# a, b, c, d #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Arbitrary.Arbitrary d)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case w4
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 let {
                   ds3 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds2 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      (case ds1 of wild { (,) r1 r2 -> r1 })
                      w5,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      (case ds2 of wild { (,) r1 r2 -> r1 })
                      w5,
                    (Test.QuickCheck.Arbitrary.arbitrary @ c w2)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <c>_R)
                      (case ds3 of wild { (,) r1 r2 -> r1 })
                      w5,
                    (Test.QuickCheck.Arbitrary.arbitrary @ d w3)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <d>_R)
                      (case ds3 of wild { (,) r1 r2 ->
                       case r2
                              `cast`
                            (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } })
                      w5 #)) -}
94c15d033a038c191d68e64d529f06b6
  $wthreeGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (# a, b, c #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Random.QCGen)
                   (w4 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case w3
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      (case ds1 of wild { (,) r1 r2 -> r1 })
                      w4,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      (case ds2 of wild { (,) r1 r2 -> r1 })
                      w4,
                    (Test.QuickCheck.Arbitrary.arbitrary @ c w2)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <c>_R)
                      (case ds2 of wild { (,) r1 r2 ->
                       case r2
                              `cast`
                            (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } })
                      w4 #)) -}
e969847eb7b6af8da95d24353a75bb84
  $wtwoGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (# a, b #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case w2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      (case ds1 of wild { (,) r1 r2 -> r1 })
                      w3,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      (case ds1 of wild { (,) r1 r2 ->
                       case r2
                              `cast`
                            (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } })
                      w3 #)) -}
c27cf5c706cc25cc7112ff188a20336e
  newtype AccumulateBoth a b
    = AccumulateBoth (Exercises.Validation a b)
1b3dce59a26aa2bf4095fde70fcabfcf
  type AccumulateBothAssoc a b =
    Exercises.AccumulateBoth a b
    -> Exercises.AccumulateBoth a b
    -> Exercises.AccumulateBoth a b
    -> GHC.Types.Bool
215fa5e6aa86193c928e65bccc2bb5ef
  newtype AccumulateRight a b
    = AccumulateRight (Exercises.Validation a b)
f5bd1fec876e30ae6053982fd9cd4fdd
  type AccumulateRightAssoc a b =
    Exercises.AccumulateRight a b
    -> Exercises.AccumulateRight a b
    -> Exercises.AccumulateRight a b
    -> GHC.Types.Bool
bf28a0505642d6c6d4331a9d926c82af
  newtype BoolConj = BoolConj GHC.Types.Bool
f7c13c7d6f034c689022bffa31988123
  type BoolConjAssoc =
    Exercises.BoolConj
    -> Exercises.BoolConj -> Exercises.BoolConj -> GHC.Types.Bool
224b931c3c586e626ad90b143df43ab2
  newtype BoolDisj = BoolDisj GHC.Types.Bool
3302ec68f43841dbb0d6dc8c1bce22e4
  type BoolDisjAssoc =
    Exercises.BoolDisj
    -> Exercises.BoolDisj -> Exercises.BoolDisj -> GHC.Types.Bool
c97cb48bb80c3b09914961da54159d7b
  newtype Combine a b = Combine {unCombine :: a -> b}
886d1a9722e3ed370360f01150189d9d
  newtype Comp a = Comp {unComp :: a -> a}
9b9ef5c8f42894b24053fccb02690f4b
  data Four a b c d = Four a b c d
af3ac33e2b8da59b2798148184696c89
  type FourAssoc a b c d =
    Exercises.Four a b c d
    -> Exercises.Four a b c d
    -> Exercises.Four a b c d
    -> GHC.Types.Bool
2bba741870b11daf22cac21ca9d17a2b
  newtype Identity a = Identity a
a4327aff299d227bdc53e92265966a98
  type IdentityAssoc a =
    Exercises.Identity a
    -> Exercises.Identity a -> Exercises.Identity a -> GHC.Types.Bool
6597755182c9a37d881780851343d36b
  data Or a b = Fst a | Snd b
1e5b4b4c58d6e8652a6ea6b6c2a213df
  type OrAssoc a b =
    Exercises.Or a b
    -> Exercises.Or a b -> Exercises.Or a b -> GHC.Types.Bool
1ce5192802781017921876de5991bb07
  data Three a b c = Three a b c
894792712bbf2ea59b664e502b5f1fe8
  type ThreeAssoc a b c =
    Exercises.Three a b c
    -> Exercises.Three a b c -> Exercises.Three a b c -> GHC.Types.Bool
988bfb7fa5c37f9ad7b564813620fb32
  data Trivial = Trivial
62b223a5aaa7e4aaddc55600bf392df6
  type TrivialAssoc =
    Exercises.Trivial
    -> Exercises.Trivial -> Exercises.Trivial -> GHC.Types.Bool
f87841b7919b465d87283a32a3dbf95e
  data Two a b = Two a b
0aa5ef9190b2d7f7eb07b80dd5cb8125
  type TwoAssoc a b =
    Exercises.Two a b
    -> Exercises.Two a b -> Exercises.Two a b -> GHC.Types.Bool
6b88f35a43d36caf324fba6667c62a26
  data Validation a b = Fail a | Succ b
b215a19814f2f4c60ddc2f157b3751cb
  type ValidationAssoc a b =
    Exercises.Validation a b
    -> Exercises.Validation a b
    -> Exercises.Validation a b
    -> GHC.Types.Bool
c27cf5c706cc25cc7112ff188a20336e
  accumulateBothGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Exercises.AccumulateBoth a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.accumulateBothGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <Exercises.AccumulateBoth a b>_R)) -}
c27cf5c706cc25cc7112ff188a20336e
  accumulateBothGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Exercises.AccumulateBoth a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (Test.QuickCheck.Gen.elements
                    @ (Exercises.AccumulateBoth a b)
                    (GHC.Types.:
                       @ (Exercises.AccumulateBoth a b)
                       (Exercises.Fail
                          @ a
                          @ b
                          ((Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                             `cast`
                           (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                             (case ds1 of wild { (,) r1 r2 -> r1 })
                             eta1))
                         `cast`
                       (Sym (Exercises.N:AccumulateBoth[0]) <a>_N <b>_N)
                       (GHC.Types.:
                          @ (Exercises.AccumulateBoth a b)
                          (Exercises.Succ
                             @ a
                             @ b
                             ((Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                                `cast`
                              (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                                (case ds2 of wild { (,) r1 r2 -> r1 })
                                eta1))
                            `cast`
                          (Sym (Exercises.N:AccumulateBoth[0]) <a>_N <b>_N)
                          (GHC.Types.[] @ (Exercises.AccumulateBoth a b)))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Exercises.AccumulateBoth a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
215fa5e6aa86193c928e65bccc2bb5ef
  accumulateRightGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Exercises.AccumulateRight a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.accumulateRightGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <Exercises.AccumulateRight a b>_R)) -}
215fa5e6aa86193c928e65bccc2bb5ef
  accumulateRightGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Exercises.AccumulateRight a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 let {
                   a1 :: a
                   = (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                       (case ds1 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 let {
                   b1 :: b
                   = (Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                       (case ds2 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 (Test.QuickCheck.Gen.frequency
                    @ (Exercises.AccumulateRight a b)
                    (GHC.Types.:
                       @ (GHC.Types.Int,
                          Test.QuickCheck.Gen.Gen (Exercises.AccumulateRight a b))
                       (Exercises.accumulateRightGen3,
                        let {
                          x :: Exercises.Validation a b = Exercises.Fail @ a @ b a1
                        } in
                        (\ (ds :: Test.QuickCheck.Random.QCGen) (ds3 :: GHC.Types.Int) ->
                         x)
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Exercises.N:AccumulateRight[0] <a>_N <b>_N))))
                       (GHC.Types.:
                          @ (GHC.Types.Int,
                             Test.QuickCheck.Gen.Gen (Exercises.AccumulateRight a b))
                          (Exercises.accumulateRightGen2,
                           let {
                             x :: Exercises.Validation a b = Exercises.Succ @ a @ b b1
                           } in
                           (\ (ds :: Test.QuickCheck.Random.QCGen) (ds3 :: GHC.Types.Int) ->
                            x)
                             `cast`
                           (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                     (Exercises.N:AccumulateRight[0] <a>_N <b>_N))))
                          (GHC.Types.[]
                             @ (GHC.Types.Int,
                                Test.QuickCheck.Gen.Gen (Exercises.AccumulateRight a b))))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Exercises.AccumulateRight a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
8a09bbd5a56ccd0b1d88619d0ad853d6
  accumulateRightGen2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
50ad5cc16318cbd76fbd315366290aee
  accumulateRightGen3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
bf28a0505642d6c6d4331a9d926c82af
  boolConjGen :: Test.QuickCheck.Gen.Gen Exercises.BoolConj
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,A>,
     Unfolding: InlineRule (0, True, True)
                Exercises.boolConjGen1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] (Exercises.N:BoolConj[0]))) -}
4b9d359de55dd7cc0b6c317a1d5bf680
  boolConjGen1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,A>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 Test.QuickCheck.Arbitrary.$w$carbitrary6
                   (case r `cast`
                         (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                    case System.Random.TF.Gen.$wtfGenSplit
                           ww1
                           ww2
                           ww3
                           ww4 of ww7 { (#,#) ww8 ww9 ->
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } })) -}
224b931c3c586e626ad90b143df43ab2
  boolDisjGen :: Test.QuickCheck.Gen.Gen Exercises.BoolDisj
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,A>,
     Unfolding: InlineRule (0, True, True)
                Exercises.boolConjGen1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] (Exercises.N:BoolDisj[0]))) -}
9b9ef5c8f42894b24053fccb02690f4b
  fourGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Gen.Gen (Exercises.Four a b c d)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Exercises.fourGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary c>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary d>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <Exercises.Four a b c d>_R)) -}
9b9ef5c8f42894b24053fccb02690f4b
  fourGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Exercises.Four a b c d
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Arbitrary.Arbitrary d)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case Exercises.$wfourGen
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 Exercises.Four @ a @ b @ c @ d ww1 ww2 ww3 ww4 }) -}
2bba741870b11daf22cac21ca9d17a2b
  identityGen ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (Exercises.Identity a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.identityGen1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               (Exercises.N:Identity[0] <a>_R))) -}
ff67661705ffb59e67e37a662b11ca88
  identityGen1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                   (case eta
                           `cast`
                         (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                    case System.Random.TF.Gen.$wtfGenSplit
                           ww1
                           ww2
                           ww3
                           ww4 of ww7 { (#,#) ww8 ww9 ->
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } })
                   eta1) -}
35cb5093fe9e6357c90c2528c4cf0a52
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
f6b6d98a1e9b35e65129fa20e62908d1
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
6597755182c9a37d881780851343d36b
  orGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Exercises.Or a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.orGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Exercises.Or a b>_R)) -}
6597755182c9a37d881780851343d36b
  orGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Exercises.Or a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (Test.QuickCheck.Gen.elements
                    @ (Exercises.Or a b)
                    (GHC.Types.:
                       @ (Exercises.Or a b)
                       (Exercises.Fst
                          @ a
                          @ b
                          ((Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                             `cast`
                           (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                             (case ds1 of wild { (,) r1 r2 -> r1 })
                             eta1))
                       (GHC.Types.:
                          @ (Exercises.Or a b)
                          (Exercises.Snd
                             @ a
                             @ b
                             ((Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                                `cast`
                              (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                                (case ds2 of wild { (,) r1 r2 -> r1 })
                                eta1))
                          (GHC.Types.[] @ (Exercises.Or a b)))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Exercises.Or a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
682692b689137b978b4331bc1faebd8e
  semigroupAssoc ::
    (GHC.Classes.Eq m, Data.Semigroup.Semigroup m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dSemigroup :: Data.Semigroup.Semigroup m)
                   (a :: m)
                   (b :: m)
                   (c :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (Data.Semigroup.<> @ m $dSemigroup a b)
                      c)
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      a
                      (Data.Semigroup.<> @ m $dSemigroup b c))) -}
9fd8c6cc931ff2418e1a781e44cd747a
  semigroupAssoc_$ssemigroupAssoc10 ::
    Exercises.Trivial
    -> Exercises.Trivial -> Exercises.Trivial -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ (a :: Exercises.Trivial)
                   (b :: Exercises.Trivial)
                   (c :: Exercises.Trivial) ->
                 GHC.Types.True) -}
e1363291a59013128dde7c104cc251f2
  semigroupAssoc_$ssemigroupAssoc4 ::
    Exercises.BoolDisj
    -> Exercises.BoolDisj -> Exercises.BoolDisj -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (a :: Exercises.BoolDisj)
                   (b :: Exercises.BoolDisj)
                   (c :: Exercises.BoolDisj) ->
                 case a `cast` (Exercises.N:BoolDisj[0]) of wild {
                   GHC.Types.False
                   -> case b `cast` (Exercises.N:BoolDisj[0]) of wild1 {
                        GHC.Types.False -> case c of tpl { DEFAULT -> GHC.Types.True }
                        GHC.Types.True -> GHC.Types.True }
                   GHC.Types.True -> GHC.Types.True }) -}
91cd246442f19c288abfce63b8a415f5
  semigroupAssoc_$ssemigroupAssoc5 ::
    Exercises.BoolConj
    -> Exercises.BoolConj -> Exercises.BoolConj -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (a :: Exercises.BoolConj)
                   (b :: Exercises.BoolConj)
                   (c :: Exercises.BoolConj) ->
                 case a `cast` (Exercises.N:BoolConj[0]) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case b `cast` (Exercises.N:BoolConj[0]) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case c of tpl { DEFAULT -> GHC.Types.True } } }) -}
1ce5192802781017921876de5991bb07
  threeGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Gen.Gen (Exercises.Three a b c)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Exercises.threeGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary c>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <Exercises.Three a b c>_R)) -}
1ce5192802781017921876de5991bb07
  threeGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Exercises.Three a b c
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Random.QCGen)
                   (w4 :: GHC.Types.Int) ->
                 case Exercises.$wthreeGen
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,,#) ww1 ww2 ww3 ->
                 Exercises.Three @ a @ b @ c ww1 ww2 ww3 }) -}
f87841b7919b465d87283a32a3dbf95e
  twoGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Exercises.Two a b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Exercises.twoGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Exercises.Two a b>_R)) -}
f87841b7919b465d87283a32a3dbf95e
  twoGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Exercises.Two a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case Exercises.$wtwoGen @ a @ b w w1 w2 w3 of ww { (#,#) ww1 ww2 ->
                 Exercises.Two @ a @ b ww1 ww2 }) -}
f695694124e9445bb3e50b67d7ac6065
  unCombine :: Exercises.Combine a b -> a -> b
  RecSel Left Exercises.Combine
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.unCombine1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Exercises.Combine a b>_R
                 ->_R Exercises.N:Combine[0] <a>_N <b>_N) -}
bde8dca645518be17dc4079d2ea99764
  unCombine1 :: Exercises.Combine a b -> Exercises.Combine a b
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a @ b (ds :: Exercises.Combine a b) -> ds) -}
9f9aca4b94dbe8b105b84e27addea204
  unComp :: Exercises.Comp a -> a -> a
  RecSel Left Exercises.Comp
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.unComp1
                  `cast`
                (forall (a :: <*>_N).
                 <Exercises.Comp a>_R ->_R Exercises.N:Comp[0] <a>_R) -}
dba467275ffb329d801136e843cca74c
  unComp1 :: Exercises.Comp a -> Exercises.Comp a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Exercises.Comp a) -> ds) -}
6b88f35a43d36caf324fba6667c62a26
  validationGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Exercises.Validation a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.validationGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <Exercises.Validation a b>_R)) -}
6b88f35a43d36caf324fba6667c62a26
  validationGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Exercises.Validation a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 let {
                   a1 :: b
                   = (Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                       (case ds1 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 let {
                   b1 :: a
                   = (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                       (case ds2 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 (Test.QuickCheck.Gen.frequency
                    @ (Exercises.Validation a b)
                    (GHC.Types.:
                       @ (GHC.Types.Int,
                          Test.QuickCheck.Gen.Gen (Exercises.Validation a b))
                       (Exercises.accumulateRightGen3,
                        let {
                          x :: Exercises.Validation a b = Exercises.Succ @ a @ b a1
                        } in
                        (\ (ds :: Test.QuickCheck.Random.QCGen) (ds3 :: GHC.Types.Int) ->
                         x)
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0] <Exercises.Validation a b>_R)))
                       (GHC.Types.:
                          @ (GHC.Types.Int,
                             Test.QuickCheck.Gen.Gen (Exercises.Validation a b))
                          (Exercises.accumulateRightGen2,
                           let {
                             x :: Exercises.Validation a b = Exercises.Fail @ a @ b b1
                           } in
                           (\ (ds :: Test.QuickCheck.Random.QCGen) (ds3 :: GHC.Types.Int) ->
                            x)
                             `cast`
                           (Sym (Test.QuickCheck.Gen.N:Gen[0] <Exercises.Validation a b>_R)))
                          (GHC.Types.[]
                             @ (GHC.Types.Int,
                                Test.QuickCheck.Gen.Gen (Exercises.Validation a b))))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Exercises.Validation a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Exercises.AccumulateBoth]
  = Exercises.$fArbitraryAccumulateBoth
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Exercises.AccumulateRight]
  = Exercises.$fArbitraryAccumulateRight
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Exercises.BoolConj]
  = Exercises.$fArbitraryBoolConj
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Exercises.BoolDisj]
  = Exercises.$fArbitraryBoolDisj
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Exercises.Four]
  = Exercises.$fArbitraryFour
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Exercises.Identity]
  = Exercises.$fArbitraryIdentity
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Exercises.Or]
  = Exercises.$fArbitraryOr
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Exercises.Three]
  = Exercises.$fArbitraryThree
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Exercises.Trivial]
  = Exercises.$fArbitraryTrivial
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Exercises.Two]
  = Exercises.$fArbitraryTwo
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Exercises.Validation]
  = Exercises.$fArbitraryValidation
instance [safe] GHC.Classes.Eq [Exercises.AccumulateBoth]
  = Exercises.$fEqAccumulateBoth
instance [safe] GHC.Classes.Eq [Exercises.AccumulateRight]
  = Exercises.$fEqAccumulateRight
instance [safe] GHC.Classes.Eq [Exercises.BoolConj]
  = Exercises.$fEqBoolConj
instance [safe] GHC.Classes.Eq [Exercises.BoolDisj]
  = Exercises.$fEqBoolDisj
instance [safe] GHC.Classes.Eq [Exercises.Four]
  = Exercises.$fEqFour
instance [safe] GHC.Classes.Eq [Exercises.Identity]
  = Exercises.$fEqIdentity
instance [safe] GHC.Classes.Eq [Exercises.Or] = Exercises.$fEqOr
instance [safe] GHC.Classes.Eq [Exercises.Three]
  = Exercises.$fEqThree
instance [safe] GHC.Classes.Eq [Exercises.Trivial]
  = Exercises.$fEqTrivial
instance [safe] GHC.Classes.Eq [Exercises.Two] = Exercises.$fEqTwo
instance [safe] GHC.Classes.Eq [Exercises.Validation]
  = Exercises.$fEqValidation
instance [safe] Data.Semigroup.Semigroup [Exercises.AccumulateBoth]
  = Exercises.$fSemigroupAccumulateBoth
instance [safe] Data.Semigroup.Semigroup [Exercises.AccumulateRight]
  = Exercises.$fSemigroupAccumulateRight
instance [safe] Data.Semigroup.Semigroup [Exercises.BoolConj]
  = Exercises.$fSemigroupBoolConj
instance [safe] Data.Semigroup.Semigroup [Exercises.BoolDisj]
  = Exercises.$fSemigroupBoolDisj
instance [safe] Data.Semigroup.Semigroup [Exercises.Combine]
  = Exercises.$fSemigroupCombine
instance [safe] Data.Semigroup.Semigroup [Exercises.Comp]
  = Exercises.$fSemigroupComp
instance [safe] Data.Semigroup.Semigroup [Exercises.Four]
  = Exercises.$fSemigroupFour
instance [safe] Data.Semigroup.Semigroup [Exercises.Identity]
  = Exercises.$fSemigroupIdentity
instance [safe] Data.Semigroup.Semigroup [Exercises.Or]
  = Exercises.$fSemigroupOr
instance [safe] Data.Semigroup.Semigroup [Exercises.Three]
  = Exercises.$fSemigroupThree
instance [safe] Data.Semigroup.Semigroup [Exercises.Trivial]
  = Exercises.$fSemigroupTrivial
instance [safe] Data.Semigroup.Semigroup [Exercises.Two]
  = Exercises.$fSemigroupTwo
instance [safe] Data.Semigroup.Semigroup [Exercises.Validation]
  = Exercises.$fSemigroupValidation
instance [safe] GHC.Show.Show [Exercises.AccumulateBoth]
  = Exercises.$fShowAccumulateBoth
instance [safe] GHC.Show.Show [Exercises.AccumulateRight]
  = Exercises.$fShowAccumulateRight
instance [safe] GHC.Show.Show [Exercises.BoolConj]
  = Exercises.$fShowBoolConj
instance [safe] GHC.Show.Show [Exercises.BoolDisj]
  = Exercises.$fShowBoolDisj
instance [safe] GHC.Show.Show [Exercises.Four]
  = Exercises.$fShowFour
instance [safe] GHC.Show.Show [Exercises.Identity]
  = Exercises.$fShowIdentity
instance [safe] GHC.Show.Show [Exercises.Or] = Exercises.$fShowOr
instance [safe] GHC.Show.Show [Exercises.Three]
  = Exercises.$fShowThree
instance [safe] GHC.Show.Show [Exercises.Trivial]
  = Exercises.$fShowTrivial
instance [safe] GHC.Show.Show [Exercises.Two] = Exercises.$fShowTwo
instance [safe] GHC.Show.Show [Exercises.Validation]
  = Exercises.$fShowValidation
"SPEC $cshow @ Int @ Bool" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                         GHC.Types.Int)
                                           ($dShow8 :: GHC.Show.Show GHC.Types.Bool)
  Exercises.$fShowOr_$cshow @ GHC.Types.Int
                            @ GHC.Types.Bool
                            $dShow8
                            $dShow7
  = Exercises.$fShowOr_$s$cshow
"SPEC $cshowList @ Int @ Bool" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                             GHC.Types.Int)
                                               ($dShow8 :: GHC.Show.Show GHC.Types.Bool)
  Exercises.$fShowOr_$cshowList @ GHC.Types.Int
                                @ GHC.Types.Bool
                                $dShow8
                                $dShow7
  = Exercises.$fShowOr_$s$cshowList
"SPEC $cshowsPrec @ Int @ Bool" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                              GHC.Types.Int)
                                                ($dShow8 :: GHC.Show.Show GHC.Types.Bool)
  Exercises.$fShowOr_$cshowsPrec @ GHC.Types.Int
                                 @ GHC.Types.Bool
                                 $dShow8
                                 $dShow7
  = Exercises.$fShowOr_$s$cshowsPrec
"SPEC $cshrink @ (NonEmpty Char) @ (NonEmpty Int)" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                     (Data.List.NonEmpty.NonEmpty
                                                                                        GHC.Types.Int))
                                                                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                      (Data.List.NonEmpty.NonEmpty
                                                                                         GHC.Types.Char))
  Exercises.$fArbitraryAccumulateBoth_$cshrink @ (Data.List.NonEmpty.NonEmpty
                                                    GHC.Types.Char)
                                               @ (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
                                               $dArbitrary1
                                               $dArbitrary
  = Exercises.$fArbitraryAccumulateBoth_$s$cshrink
"SPEC $cshrink @ (NonEmpty Int)" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                   (Data.List.NonEmpty.NonEmpty
                                                                      GHC.Types.Int))
  Exercises.$fArbitraryIdentity_$cshrink @ (Data.List.NonEmpty.NonEmpty
                                              GHC.Types.Int)
                                         $dArbitrary
  = Exercises.$fArbitraryIdentity_$s$cshrink
"SPEC $cshrink @ (NonEmpty Int) @ Bool" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                          GHC.Types.Bool)
                                                        ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                           (Data.List.NonEmpty.NonEmpty
                                                                              GHC.Types.Int))
  Exercises.$fArbitraryValidation_$cshrink @ (Data.List.NonEmpty.NonEmpty
                                                GHC.Types.Int)
                                           @ GHC.Types.Bool
                                           $dArbitrary1
                                           $dArbitrary
  = Exercises.$fArbitraryValidation_$s$cshrink
"SPEC $cshrink @ Bool @ (NonEmpty Int)" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                          (Data.List.NonEmpty.NonEmpty
                                                                             GHC.Types.Int))
                                                        ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                           GHC.Types.Bool)
  Exercises.$fArbitraryAccumulateRight_$cshrink @ GHC.Types.Bool
                                                @ (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
                                                $dArbitrary1
                                                $dArbitrary
  = Exercises.$fArbitraryAccumulateRight_$s$cshrink
"SPEC $cshrink @ Int @ Bool" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                               GHC.Types.Bool)
                                             ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                GHC.Types.Int)
  Exercises.$fArbitraryOr_$cshrink @ GHC.Types.Int
                                   @ GHC.Types.Bool
                                   $dArbitrary1
                                   $dArbitrary
  = Exercises.$fArbitraryOr_$s$cshrink
"SPEC $fShowOr @ Int @ Bool" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                           GHC.Types.Int)
                                             ($dShow8 :: GHC.Show.Show GHC.Types.Bool)
  Exercises.$fShowOr @ GHC.Types.Int @ GHC.Types.Bool $dShow8 $dShow7
  = Exercises.$fShowOr_$s$fShowOr
"SPEC semigroupAssoc @ BoolConj" [ALWAYS] forall ($dSemigroup :: Data.Semigroup.Semigroup
                                                                   Exercises.BoolConj)
                                                 ($dEq :: GHC.Classes.Eq Exercises.BoolConj)
  Exercises.semigroupAssoc @ Exercises.BoolConj $dEq $dSemigroup
  = Exercises.semigroupAssoc_$ssemigroupAssoc5
"SPEC semigroupAssoc @ BoolDisj" [ALWAYS] forall ($dSemigroup :: Data.Semigroup.Semigroup
                                                                   Exercises.BoolDisj)
                                                 ($dEq :: GHC.Classes.Eq Exercises.BoolDisj)
  Exercises.semigroupAssoc @ Exercises.BoolDisj $dEq $dSemigroup
  = Exercises.semigroupAssoc_$ssemigroupAssoc4
"SPEC semigroupAssoc @ Trivial" [ALWAYS] forall ($dSemigroup :: Data.Semigroup.Semigroup
                                                                  Exercises.Trivial)
                                                ($dEq :: GHC.Classes.Eq Exercises.Trivial)
  Exercises.semigroupAssoc @ Exercises.Trivial $dEq $dSemigroup
  = Exercises.semigroupAssoc_$ssemigroupAssoc10
"SPEC/Exercises $fArbitraryNonEmpty @ Char" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                              GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitraryNonEmpty @ GHC.Types.Char
                                                $dArbitrary
  = Exercises.$fArbitraryAccumulateBoth_$s$fArbitraryNonEmpty1
"SPEC/Exercises $fArbitraryNonEmpty @ Int" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                             GHC.Types.Int)
  Test.QuickCheck.Arbitrary.$fArbitraryNonEmpty @ GHC.Types.Int
                                                $dArbitrary
  = Exercises.$fArbitraryAccumulateBoth_$s$fArbitraryNonEmpty
"SPEC/Exercises $fShowNonEmpty @ Char" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                                     GHC.Types.Char)
  Data.List.NonEmpty.$fShowNonEmpty @ GHC.Types.Char $dShow7
  = Exercises.$s$fShowNonEmpty
"SPEC/Exercises $fShowNonEmpty @ Int" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                                    GHC.Types.Int)
  Data.List.NonEmpty.$fShowNonEmpty @ GHC.Types.Int $dShow7
  = Exercises.$s$fShowNonEmpty1
"SPEC/Exercises $fShowNonEmpty_$cshow @ Char" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                                            GHC.Types.Char)
  Data.List.NonEmpty.$fShowNonEmpty_$cshow @ GHC.Types.Char $dShow7
  = Exercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshow
"SPEC/Exercises $fShowNonEmpty_$cshow @ Int" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                                           GHC.Types.Int)
  Data.List.NonEmpty.$fShowNonEmpty_$cshow @ GHC.Types.Int $dShow7
  = Exercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshow1
"SPEC/Exercises $fShowNonEmpty_$cshowList @ Char" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                                                GHC.Types.Char)
  Data.List.NonEmpty.$fShowNonEmpty_$cshowList @ GHC.Types.Char
                                               $dShow7
  = Exercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshowList
"SPEC/Exercises $fShowNonEmpty_$cshowList @ Int" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                                               GHC.Types.Int)
  Data.List.NonEmpty.$fShowNonEmpty_$cshowList @ GHC.Types.Int
                                               $dShow7
  = Exercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshowList1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

