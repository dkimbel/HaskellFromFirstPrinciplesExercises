
==================== FINAL INTERFACE ====================
2017-08-08 02:05:01.007759 UTC

interface exercises-0.1.0.0-JPaODKrLNdbIJ5LSA3v2AM:Exercises 8002
  interface hash: adf167f5e70310631842c1439dd1f321
  ABI hash: dd468b8d96e97d3ac1b68c2706159468
  export-list hash: 7e615d07915913a58925bc49fa93842c
  orphan hash: 4a0b1c55ad223500453859b46af8fef4
  flag hash: 6fc74547fbd72660fbdc96d0ba10d9b2
  sig of: Nothing
  used TH splices: False
  where
exports:
  Exercises.main
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      checkers-0.4.7@checkers-0.4.7-JCilnLl5HALEbvtY44GPJt
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-4.9.1.0:Text.Show.Functions
         checkers-0.4.7@checkers-0.4.7-JCilnLl5HALEbvtY44GPJt:Test.QuickCheck.Checkers
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  checkers-0.4.7@checkers-0.4.7-JCilnLl5HALEbvtY44GPJt:Test.QuickCheck.Checkers c0d9f231420cecf268fbc6cdcc71847d
import  -/  checkers-0.4.7@checkers-0.4.7-JCilnLl5HALEbvtY44GPJt:Test.QuickCheck.Classes c5fcc590b7abd6f25ab55fae9d49e81c
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
8bc8f0ecc133f348b809c3a11372109c
  $s$fArbitrary[] ::
    Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Int]
                  (Test.QuickCheck.Arbitrary.$fArbitrary[]_$carbitrary
                     @ GHC.Types.Int
                     Test.QuickCheck.Arbitrary.$fArbitraryInt)
                  Exercises.$s$fArbitrary[]_$s$fArbitrary[]_$cshrink -}
2ca89a6705cf87ad8d6e1509566ba6b0
  $s$fArbitrary[]_$s$fArbitrary[]_$cshrink ::
    [GHC.Types.Int] -> [[GHC.Types.Int]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (xs :: [GHC.Types.Int]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Int
                   Test.QuickCheck.Arbitrary.$fArbitraryInt_$cshrink
                   xs) -}
d6dcf11c77a51a589d1bbf0eed70e23a
  $smonad1 ::
    [GHC.Types.Int]
    -> [GHC.Types.Int] -> Test.QuickCheck.Property.Property
  {- Arity: 2,
     Unfolding: (Test.QuickCheck.Checkers.$fEqProp[]_$c=-=
                   @ GHC.Types.Int
                   Test.QuickCheck.Checkers.$fEqPropInt_$c=-=
                     `cast`
                   (Sym (Test.QuickCheck.Checkers.N:EqProp[0] <GHC.Types.Int>_N))) -}
cd687e8cf611c2bfa585f993c191745f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Exercises.$trModule2
                   Exercises.$trModule1) -}
9665422a0611bdddf99931ee53d6ecc1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Exercises"#) -}
2ecb6ad43e9d26a4c7725cfe6131ef7a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "exercises-0.1.0.0-JPaODKrLNdbIJ5LSA3v2AM"#) -}
706685af793106fe12fdf29d3fbaed60
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Exercises.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
3717381ca2f1c32de7c495764229a9e2
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.QuickCheck.Checkers.quickBatch1
                   Exercises.main2) -}
8a1afc095712f122e4eaa1d0ba66a9ff
  main2 :: Test.QuickCheck.Checkers.TestBatch
  {- Unfolding: (case Test.QuickCheck.Classes.$wmonad
                        @ []
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        GHC.Base.$fMonad[]
                        GHC.Show.$fShowInt
                        Test.QuickCheck.Arbitrary.$fArbitraryInt
                        Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                          `cast`
                        (Trans
                             (forall (b2 :: <*>_N).
                              <GHC.Types.Int>_R
                              ->_R <Test.QuickCheck.Gen.Gen b2>_R
                              ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <b2>_R))
                             (Sym (Test.QuickCheck.Arbitrary.N:CoArbitrary[0]
                                       <GHC.Types.Int>_N)))
                        Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                          `cast`
                        (Trans
                             (forall (b2 :: <*>_N).
                              <GHC.Types.Int>_R
                              ->_R <Test.QuickCheck.Gen.Gen b2>_R
                              ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <b2>_R))
                             (Sym (Test.QuickCheck.Arbitrary.N:CoArbitrary[0]
                                       <GHC.Types.Int>_N)))
                        Exercises.$s$fArbitrary[]
                        Exercises.$smonad1
                          `cast`
                        (Sym (Test.QuickCheck.Checkers.N:EqProp[0] <[GHC.Types.Int]>_N))
                        GHC.Show.$fShow[]_$s$fShow[]
                        Exercises.$s$fArbitrary[]
                        Exercises.$smonad1
                          `cast`
                        (Sym (Test.QuickCheck.Checkers.N:EqProp[0] <[GHC.Types.Int]>_N))
                        Exercises.$s$fArbitrary[]
                        Exercises.$smonad1
                          `cast`
                        (Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                                  <[GHC.Types.Int]>_N)) of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
"SPEC/Exercises $fArbitrary[] @ Int" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                       GHC.Types.Int)
  Test.QuickCheck.Arbitrary.$fArbitrary[] @ GHC.Types.Int $dArbitrary
  = Exercises.$s$fArbitrary[]
"SPEC/Exercises $fArbitrary[]_$cshrink @ Int" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                GHC.Types.Int)
  Test.QuickCheck.Arbitrary.$fArbitrary[]_$cshrink @ GHC.Types.Int
                                                   $dArbitrary
  = Exercises.$s$fArbitrary[]_$s$fArbitrary[]_$cshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

