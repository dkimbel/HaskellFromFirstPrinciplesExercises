
==================== FINAL INTERFACE ====================
2017-08-28 01:27:04.388979 UTC

interface exercises-0.1.0.0-Dlc12BTUrEQK6RgYfgxVHF:Exercises 8002
  interface hash: ed940bca53692ea63afd0eb29525bf8e
  ABI hash: 4d935d7edfae5ea57a32f7f4845e90ca
  export-list hash: 8500615267c92315101fe6c784f119aa
  orphan hash: bad2f78d1d14917647bad7806780b12d
  flag hash: 4f8cee337f717799b182576d5fd6650c
  sig of: Nothing
  used TH splices: True
  where
exports:
  Exercises.accumulate
  Exercises.base10Integer
  Exercises.base10Integer'
  Exercises.base10Integer''
  Exercises.charToInteger
  Exercises.logStr
  Exercises.main
  Exercises.maybeSuccess
  Exercises.negativeBase10Integer
  Exercises.parseActivity
  Exercises.parseActivityName
  Exercises.parseActivityNameEnd
  Exercises.parseAnyWhitespaceThenComment
  Exercises.parseAreaCode
  Exercises.parseComment
  Exercises.parseCommentSymbol
  Exercises.parseCorVer
  Exercises.parseCountryCode
  Exercises.parseDigit
  Exercises.parseExchange
  Exercises.parseHeader
  Exercises.parseLineNumber
  Exercises.parseLog
  Exercises.parseLogDate
  Exercises.parseMetadata
  Exercises.parseNumOrStr
  Exercises.parseNumOrStrList
  Exercises.parseOptionalParens
  Exercises.parsePhone
  Exercises.parseRelease
  Exercises.parseSemVer
  Exercises.skipComment
  Exercises.skipComments
  Exercises.skipEOL
  Exercises.stringToInt
  Exercises.Activity{Exercises.Activity}
  Exercises.Exchange
  Exercises.LineNumber
  Exercises.Log{Exercises.Log}
  Exercises.LogDate{Exercises.LogDate}
  Exercises.Major
  Exercises.Metadata
  Exercises.Minor
  Exercises.Name
  Exercises.NumberOrString{Exercises.NOSI Exercises.NOSS}
  Exercises.NumberingPlanArea
  Exercises.Patch
  Exercises.PhoneNumber{Exercises.PhoneNumber}
  Exercises.Release
  Exercises.SemVer{Exercises.SemVer}
  Exercises.StartTime
module dependencies:
package dependencies: HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI
                      QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      adjunctions-4.3@adjunctions-4.3-6nMo9ca9E95L1lsN6Br4XL
                      ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-A79v826bgPr574HtaZPPqC
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-8bUdsjh6UCE83aHCxOEHna
                      base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-html-0.9.0.1@blaze-html-0.9.0.1-GQ0yZtPYt2i2KdgnUEOA8p
                      blaze-markup-0.8.0.0@blaze-markup-0.8.0.0-GsxkVbRgODkgUQDmmDVob
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      call-stack-0.1.0@call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
                      charset-0.3.7.1@charset-0.3.7.1-8XzlqAFUmfXDSOZRmiDkgy
                      comonad-5.0.1@comonad-5.0.1-2dOTQljdUSmGwatNHkYwW3
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-29zF0Im431177ovfbHYCGv
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      distributive-0.5.2@distributive-0.5.2-KlkgfUmuqy3Z181VSjKfJ
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      filepath-1.4.1.1@filepath-1.4.1.1
                      fingertree-0.1.1.0@fingertree-0.1.1.0-Aiaf912zjZGHvH3XyjxrYA
                      free-4.12.4@free-4.12.4-JUYfwQOGje1F6ljlwhsQfP
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      hspec-2.4.4@hspec-2.4.4-Ct0Af2AzisB8bPqGMHHFvj
                      hspec-core-2.4.4@hspec-core-2.4.4-Ezb0jq4rRfBJWZtpolvs1E
                      hspec-expectations-0.8.2@hspec-expectations-0.8.2-DujBeQFEMmfJJRLad7XQgd
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      kan-extensions-5.0.2@kan-extensions-5.0.2-5SVDrYVManyKLFvHkx6yaS
                      lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-1aqiimsgq2dCv7eoaC8WuX
                      parsers-0.12.5@parsers-0.12.5-GnYuXhr66xHG7QyPR4udRA
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      profunctors-5.2@profunctors-5.2-7ONvCmXw8M9Co9mYrudYx
                      quickcheck-io-0.2.0@quickcheck-io-0.2.0-4pLO1WRxoBW9gt8EnME0zS
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      raw-strings-qq-1.1@raw-strings-qq-1.1-HjO0jIPgyz3nrMVQqTSCs
                      reducers-3.12.1@reducers-3.12.1-9f8Ic9ruWZ1FsGrCfB0ZLr
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      scientific-0.3.5.1@scientific-0.3.5.1-JHsAAp34Yyd8e5v3sK3O5Q
                      semigroupoids-5.2@semigroupoids-5.2-8RI6HtO1LKLE496qmzB9Po
                      setenv-0.1.1.3@setenv-0.1.1.3-8dEhk6JWvlmCmVyBammSpu
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      th-abstraction-0.2.3.0@th-abstraction-0.2.3.0-IC8R8TEnxiaENlxvcI4gyL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      trifecta-1.6.2.1@trifecta-1.6.2.1-ErZ9MJa2zIqLpxrGHQVKNm
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         quickcheck-io-0.2.0@quickcheck-io-0.2.0-4pLO1WRxoBW9gt8EnME0zS:Test.QuickCheck.IO
         reducers-3.12.1@reducers-3.12.1-9f8Ic9ruWZ1FsGrCfB0ZLr:Data.Semigroup.Instances
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         trifecta-1.6.2.1@trifecta-1.6.2.1-ErZ9MJa2zIqLpxrGHQVKNm:Text.Trifecta.Instances
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-6nMo9ca9E95L1lsN6Br4XL:Data.Functor.Rep
                         attoparsec-0.13.1.0@attoparsec-0.13.1.0-8bUdsjh6UCE83aHCxOEHna:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Fix
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Flip
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Join
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Sum
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Tannen
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         hspec-core-2.4.4@hspec-core-2.4.4-Ezb0jq4rRfBJWZtpolvs1E:Test.Hspec.Core.Example
                         kan-extensions-5.0.2@kan-extensions-5.0.2-5SVDrYVManyKLFvHkx6yaS:Data.Functor.Day
                         kan-extensions-5.0.2@kan-extensions-5.0.2-5SVDrYVManyKLFvHkx6yaS:Data.Functor.Yoneda
                         lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.At
                         lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Internal.Indexed
                         lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Reified
                         lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Tuple
                         lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Wrapped
                         lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Zoom
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         profunctors-5.2@profunctors-5.2-7ONvCmXw8M9Co9mYrudYx:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         th-abstraction-0.2.3.0@th-abstraction-0.2.3.0-IC8R8TEnxiaENlxvcI4gyL:Language.Haskell.TH.Datatype
                         trifecta-1.6.2.1@trifecta-1.6.2.1-ErZ9MJa2zIqLpxrGHQVKNm:Text.Trifecta.Delta
                         trifecta-1.6.2.1@trifecta-1.6.2.1-ErZ9MJa2zIqLpxrGHQVKNm:Text.Trifecta.Rendering
                         trifecta-1.6.2.1@trifecta-1.6.2.1-ErZ9MJa2zIqLpxrGHQVKNm:Text.Trifecta.Rope
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 0fd5c8559af8bc4b6f38b9cf9ba5a467
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hspec-2.4.4@hspec-2.4.4-Ct0Af2AzisB8bPqGMHHFvj:Test.Hspec 04ea8eba4a0731a497f82df2f1be76d5
import  -/  hspec-core-2.4.4@hspec-core-2.4.4-Ezb0jq4rRfBJWZtpolvs1E:Test.Hspec.Core.Runner c79a89c5a9ba4275f04053dfa6118e70
import  -/  hspec-core-2.4.4@hspec-core-2.4.4-Ezb0jq4rRfBJWZtpolvs1E:Test.Hspec.Core.Spec 4de3fc7b2286a4370366c92ba3ff97ab
import  -/  hspec-expectations-0.8.2@hspec-expectations-0.8.2-DujBeQFEMmfJJRLad7XQgd:Test.Hspec.Expectations 29d4e6711b7d6d8a68fed679467f46e6
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
import  -/  parsers-0.12.5@parsers-0.12.5-GnYuXhr66xHG7QyPR4udRA:Text.Parser.Char 02119161c21303a8e6e8e1424fbf0522
import  -/  parsers-0.12.5@parsers-0.12.5-GnYuXhr66xHG7QyPR4udRA:Text.Parser.Combinators a777f7af1d33b1aa90bf146480f9c826
import  -/  parsers-0.12.5@parsers-0.12.5-GnYuXhr66xHG7QyPR4udRA:Text.Parser.Token 07cf1926abb76d9f4937ccbca172834f
import  -/  raw-strings-qq-1.1@raw-strings-qq-1.1-HjO0jIPgyz3nrMVQqTSCs:Text.RawString.QQ 049903e110b50d2e2afc78f5648fcd4b
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time f3fc075e226487ba9b287f2bf43f4b8f
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Days 78ed9a2705f389e7f436788cb8a1127d
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian 6bfe6a0d86b130087d12d0228a47fb8a
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.Scale f5f334fccfef4dabb1293b3a0a18e4ff
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.UTC 042a9b8f7ae05c2937d1ff59fdfe0852
import  -/  trifecta-1.6.2.1@trifecta-1.6.2.1-ErZ9MJa2zIqLpxrGHQVKNm:Text.Trifecta 0a6f21b55919d63da58a1e1018300625
import  -/  trifecta-1.6.2.1@trifecta-1.6.2.1-ErZ9MJa2zIqLpxrGHQVKNm:Text.Trifecta.Parser 5b90489d47f3ee6b8d3fe0ceabdcd207
import  -/  trifecta-1.6.2.1@trifecta-1.6.2.1-ErZ9MJa2zIqLpxrGHQVKNm:Text.Trifecta.Result 3a0c888a3b5103c769b09d415f5f9e50
48500a98d59d7d36c2d2deb072562c50
  $fEqNumberOrString :: GHC.Classes.Eq Exercises.NumberOrString
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.NumberOrString
                  Exercises.$fEqNumberOrString_$c==
                  Exercises.$fEqNumberOrString_$c/= -}
48500a98d59d7d36c2d2deb072562c50
  $fEqNumberOrString_$c/= ::
    Exercises.NumberOrString
    -> Exercises.NumberOrString -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Exercises.NumberOrString)
                   (b :: Exercises.NumberOrString) ->
                 case a of wild {
                   Exercises.NOSS a1
                   -> case b of wild1 {
                        Exercises.NOSS b1
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Exercises.NOSI ipv -> GHC.Types.True }
                   Exercises.NOSI a1
                   -> case b of wild1 {
                        Exercises.NOSS ipv -> GHC.Types.True
                        Exercises.NOSI b1
                        -> case GHC.Integer.Type.eqInteger# a1 b1 of wild2 { DEFAULT ->
                           case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } }) -}
48500a98d59d7d36c2d2deb072562c50
  $fEqNumberOrString_$c== ::
    Exercises.NumberOrString
    -> Exercises.NumberOrString -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Exercises.NumberOrString)
                   (ds4 :: Exercises.NumberOrString) ->
                 case ds of wild {
                   Exercises.NOSS a1
                   -> case ds4 of wild1 {
                        Exercises.NOSS b1 -> GHC.Base.eqString a1 b1
                        Exercises.NOSI ipv -> GHC.Types.False }
                   Exercises.NOSI a1
                   -> case ds4 of wild1 {
                        Exercises.NOSS ipv -> GHC.Types.False
                        Exercises.NOSI b1 -> GHC.Integer.Type.eqInteger a1 b1 } }) -}
86397c7de6c8e8aad47e631d4590a30b
  $fEqPhoneNumber :: GHC.Classes.Eq Exercises.PhoneNumber
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.PhoneNumber
                  Exercises.$fEqPhoneNumber_$c==
                  Exercises.$fEqPhoneNumber_$c/= -}
86397c7de6c8e8aad47e631d4590a30b
  $fEqPhoneNumber_$c/= ::
    Exercises.PhoneNumber -> Exercises.PhoneNumber -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Exercises.PhoneNumber) (b :: Exercises.PhoneNumber) ->
                 case Exercises.$fEqPhoneNumber_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
86397c7de6c8e8aad47e631d4590a30b
  $fEqPhoneNumber_$c== ::
    Exercises.PhoneNumber -> Exercises.PhoneNumber -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Exercises.PhoneNumber) (w1 :: Exercises.PhoneNumber) ->
                 case w of ww { Exercises.PhoneNumber ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 case w1 of ww6 { Exercises.PhoneNumber ww7 ww8 ww9 ->
                 case ww7 of ww10 { GHC.Types.I# ww11 ->
                 Exercises.$w$c== ww5 ww2 ww3 ww11 ww8 ww9 } } } }) -}
1d61724211cf563d43a96a92cffaf73d
  $fEqSemVer :: GHC.Classes.Eq Exercises.SemVer
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.SemVer
                  Exercises.$fEqSemVer_$c==
                  Exercises.$fEqSemVer_$c/= -}
1d61724211cf563d43a96a92cffaf73d
  $fEqSemVer_$c/= ::
    Exercises.SemVer -> Exercises.SemVer -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U,1*U,1*U,1*U)><S(SLLLL),1*U(1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Exercises.SemVer) (b :: Exercises.SemVer) ->
                 case Exercises.$fEqSemVer_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1d61724211cf563d43a96a92cffaf73d
  $fEqSemVer_$c== ::
    Exercises.SemVer -> Exercises.SemVer -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U,1*U,1*U,1*U)><S(SLLLL),1*U(1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Exercises.SemVer) (w1 :: Exercises.SemVer) ->
                 case w of ww { Exercises.SemVer ww1 ww2 ww3 ww4 ww5 ->
                 case w1 of ww6 { Exercises.SemVer ww7 ww8 ww9 ww10 ww11 ->
                 Exercises.$w$c==1 ww1 ww2 ww3 ww4 ww5 ww7 ww8 ww9 ww10 ww11 } }) -}
48500a98d59d7d36c2d2deb072562c50
  $fOrdNumberOrString :: GHC.Classes.Ord Exercises.NumberOrString
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.NumberOrString
                  Exercises.$fEqNumberOrString
                  Exercises.$fOrdNumberOrString_$ccompare
                  Exercises.$fOrdNumberOrString_$c<
                  Exercises.$fOrdNumberOrString_$c<=
                  Exercises.$fOrdNumberOrString_$c>
                  Exercises.$fOrdNumberOrString_$c>=
                  Exercises.$fOrdNumberOrString_$cmax
                  Exercises.$fOrdNumberOrString_$cmin -}
48500a98d59d7d36c2d2deb072562c50
  $fOrdNumberOrString_$c< ::
    Exercises.NumberOrString
    -> Exercises.NumberOrString -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x4 :: Exercises.NumberOrString)
                   (y :: Exercises.NumberOrString) ->
                 case x4 of wild {
                   Exercises.NOSS s0
                   -> case y of wild1 {
                        Exercises.NOSS s1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 s0 s1 of wild2 {
                             DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }
                        Exercises.NOSI ds -> GHC.Types.False }
                   Exercises.NOSI i0
                   -> case y of wild1 {
                        Exercises.NOSS ds -> GHC.Types.True
                        Exercises.NOSI i1
                        -> case GHC.Integer.Type.compareInteger i0 i1 of wild2 {
                             DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True } } }) -}
48500a98d59d7d36c2d2deb072562c50
  $fOrdNumberOrString_$c<= ::
    Exercises.NumberOrString
    -> Exercises.NumberOrString -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x4 :: Exercises.NumberOrString)
                   (y :: Exercises.NumberOrString) ->
                 case x4 of wild {
                   Exercises.NOSS s0
                   -> case y of wild1 {
                        Exercises.NOSS s1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 s0 s1 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }
                        Exercises.NOSI ds -> GHC.Types.False }
                   Exercises.NOSI i0
                   -> case y of wild1 {
                        Exercises.NOSS ds -> GHC.Types.True
                        Exercises.NOSI i1
                        -> case GHC.Integer.Type.compareInteger i0 i1 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False } } }) -}
48500a98d59d7d36c2d2deb072562c50
  $fOrdNumberOrString_$c> ::
    Exercises.NumberOrString
    -> Exercises.NumberOrString -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x4 :: Exercises.NumberOrString)
                   (y :: Exercises.NumberOrString) ->
                 case x4 of wild {
                   Exercises.NOSS s0
                   -> case y of wild1 {
                        Exercises.NOSS s1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 s0 s1 of wild2 {
                             DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }
                        Exercises.NOSI ds -> GHC.Types.True }
                   Exercises.NOSI i0
                   -> case y of wild1 {
                        Exercises.NOSS ds -> GHC.Types.False
                        Exercises.NOSI i1
                        -> case GHC.Integer.Type.compareInteger i0 i1 of wild2 {
                             DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True } } }) -}
48500a98d59d7d36c2d2deb072562c50
  $fOrdNumberOrString_$c>= ::
    Exercises.NumberOrString
    -> Exercises.NumberOrString -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x4 :: Exercises.NumberOrString)
                   (y :: Exercises.NumberOrString) ->
                 case x4 of wild {
                   Exercises.NOSS s0
                   -> case y of wild1 {
                        Exercises.NOSS s1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 s0 s1 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                        Exercises.NOSI ds -> GHC.Types.True }
                   Exercises.NOSI i0
                   -> case y of wild1 {
                        Exercises.NOSS ds -> GHC.Types.False
                        Exercises.NOSI i1
                        -> case GHC.Integer.Type.compareInteger i0 i1 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
48500a98d59d7d36c2d2deb072562c50
  $fOrdNumberOrString_$ccompare ::
    Exercises.NumberOrString
    -> Exercises.NumberOrString -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Exercises.NumberOrString)
                   (ds4 :: Exercises.NumberOrString) ->
                 case ds of wild {
                   Exercises.NOSS s0
                   -> case ds4 of wild1 {
                        Exercises.NOSS s1 -> GHC.Classes.$fOrd[]_$s$ccompare1 s0 s1
                        Exercises.NOSI ds5 -> GHC.Types.GT }
                   Exercises.NOSI i0
                   -> case ds4 of wild1 {
                        Exercises.NOSS ds5 -> GHC.Types.LT
                        Exercises.NOSI i1 -> GHC.Integer.Type.compareInteger i0 i1 } }) -}
48500a98d59d7d36c2d2deb072562c50
  $fOrdNumberOrString_$cmax ::
    Exercises.NumberOrString
    -> Exercises.NumberOrString -> Exercises.NumberOrString
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x4 :: Exercises.NumberOrString)
                   (y :: Exercises.NumberOrString) ->
                 case x4 of wild {
                   Exercises.NOSS s0
                   -> case y of wild1 {
                        Exercises.NOSS s1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 s0 s1 of wild2 {
                             DEFAULT -> wild1 GHC.Types.GT -> wild }
                        Exercises.NOSI ds -> wild }
                   Exercises.NOSI i0
                   -> case y of wild1 {
                        Exercises.NOSS ds -> wild1
                        Exercises.NOSI i1
                        -> case GHC.Integer.Type.compareInteger i0 i1 of wild2 {
                             DEFAULT -> wild1 GHC.Types.GT -> wild } } }) -}
48500a98d59d7d36c2d2deb072562c50
  $fOrdNumberOrString_$cmin ::
    Exercises.NumberOrString
    -> Exercises.NumberOrString -> Exercises.NumberOrString
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x4 :: Exercises.NumberOrString)
                   (y :: Exercises.NumberOrString) ->
                 case x4 of wild {
                   Exercises.NOSS s0
                   -> case y of wild1 {
                        Exercises.NOSS s1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 s0 s1 of wild2 {
                             DEFAULT -> wild GHC.Types.GT -> wild1 }
                        Exercises.NOSI ds -> wild1 }
                   Exercises.NOSI i0
                   -> case y of wild1 {
                        Exercises.NOSS ds -> wild
                        Exercises.NOSI i1
                        -> case GHC.Integer.Type.compareInteger i0 i1 of wild2 {
                             DEFAULT -> wild GHC.Types.GT -> wild1 } } }) -}
1d61724211cf563d43a96a92cffaf73d
  $fOrdSemVer :: GHC.Classes.Ord Exercises.SemVer
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.SemVer
                  Exercises.$fEqSemVer
                  Exercises.$fOrdSemVer_$ccompare
                  Exercises.$fOrdSemVer_$c<
                  Exercises.$fOrdSemVer_$c<=
                  Exercises.$fOrdSemVer_$c>
                  Exercises.$fOrdSemVer_$c>=
                  Exercises.$fOrdSemVer_$cmax
                  Exercises.$fOrdSemVer_$cmin -}
1d61724211cf563d43a96a92cffaf73d
  $fOrdSemVer_$c< ::
    Exercises.SemVer -> Exercises.SemVer -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(U,U,U,U,A)><S(SLLLL),1*U(U,U,U,U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x4 :: Exercises.SemVer) (y :: Exercises.SemVer) ->
                 case Exercises.$fOrdSemVer_$ccompare x4 y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
1d61724211cf563d43a96a92cffaf73d
  $fOrdSemVer_$c<= ::
    Exercises.SemVer -> Exercises.SemVer -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(U,U,U,U,A)><S(SLLLL),1*U(U,U,U,U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x4 :: Exercises.SemVer) (y :: Exercises.SemVer) ->
                 case Exercises.$fOrdSemVer_$ccompare x4 y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
1d61724211cf563d43a96a92cffaf73d
  $fOrdSemVer_$c> ::
    Exercises.SemVer -> Exercises.SemVer -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(U,U,U,U,A)><S(SLLLL),1*U(U,U,U,U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x4 :: Exercises.SemVer) (y :: Exercises.SemVer) ->
                 case Exercises.$fOrdSemVer_$ccompare x4 y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
1d61724211cf563d43a96a92cffaf73d
  $fOrdSemVer_$c>= ::
    Exercises.SemVer -> Exercises.SemVer -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(U,U,U,U,A)><S(SLLLL),1*U(U,U,U,U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x4 :: Exercises.SemVer) (y :: Exercises.SemVer) ->
                 case Exercises.$fOrdSemVer_$ccompare x4 y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
1d61724211cf563d43a96a92cffaf73d
  $fOrdSemVer_$ccompare ::
    Exercises.SemVer -> Exercises.SemVer -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(U,U,U,U,A)><S(SLLLL),1*U(U,U,U,U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Exercises.SemVer) (w1 :: Exercises.SemVer) ->
                 case w of ww { Exercises.SemVer ww1 ww2 ww3 ww4 ww5 ->
                 case w1 of ww6 { Exercises.SemVer ww7 ww8 ww9 ww10 ww11 ->
                 Exercises.$w$ccompare ww1 ww2 ww3 ww4 ww7 ww8 ww9 ww10 } }) -}
1d61724211cf563d43a96a92cffaf73d
  $fOrdSemVer_$cmax ::
    Exercises.SemVer -> Exercises.SemVer -> Exercises.SemVer
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),U(U,U,U,U,U)><S(SLLLL),U(U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x4 :: Exercises.SemVer) (y :: Exercises.SemVer) ->
                 case Exercises.$fOrdSemVer_$ccompare x4 y of wild {
                   DEFAULT -> y GHC.Types.GT -> x4 }) -}
1d61724211cf563d43a96a92cffaf73d
  $fOrdSemVer_$cmin ::
    Exercises.SemVer -> Exercises.SemVer -> Exercises.SemVer
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),U(U,U,U,U,U)><S(SLLLL),U(U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x4 :: Exercises.SemVer) (y :: Exercises.SemVer) ->
                 case Exercises.$fOrdSemVer_$ccompare x4 y of wild {
                   DEFAULT -> x4 GHC.Types.GT -> y }) -}
f9c824ace5537fdb908bc1cb46219ae9
  $fShowActivity :: GHC.Show.Show Exercises.Activity
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.Activity
                  Exercises.$fShowActivity_$cshowsPrec
                  Exercises.$fShowActivity_$cshow
                  Exercises.$fShowActivity_$cshowList -}
f9c824ace5537fdb908bc1cb46219ae9
  $fShowActivity1 :: Exercises.Activity -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Exercises.Activity) (w1 :: GHC.Base.String) ->
                 case w of ww { Exercises.Activity ww1 ww2 ->
                 Exercises.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
2b95b059ecafb9099d5aff2a76381a4d
  $fShowActivity2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Activity "#) -}
f9c824ace5537fdb908bc1cb46219ae9
  $fShowActivity_$cshow :: Exercises.Activity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(1*U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x4 :: Exercises.Activity) ->
                 Exercises.$fShowActivity_$cshowsPrec
                   GHC.Show.shows22
                   x4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f9c824ace5537fdb908bc1cb46219ae9
  $fShowActivity_$cshowList :: [Exercises.Activity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Exercises.Activity
                   Exercises.$fShowActivity1) -}
f9c824ace5537fdb908bc1cb46219ae9
  $fShowActivity_$cshowsPrec ::
    GHC.Types.Int -> Exercises.Activity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(1*U,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Exercises.Activity)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Exercises.Activity ww3 ww4 ->
                 Exercises.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
36c46d356b9f815eee4f1ff9d32f72ff
  $fShowLog :: GHC.Show.Show Exercises.Log
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.Log
                  Exercises.$fShowLog_$cshowsPrec
                  Exercises.$fShowLog_$cshow
                  Exercises.$fShowLog_$cshowList -}
36c46d356b9f815eee4f1ff9d32f72ff
  $fShowLog1 :: Exercises.Log -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Exercises.Log) (w1 :: GHC.Base.String) ->
                 case w of ww { Exercises.Log ww1 ->
                 Exercises.$w$cshowsPrec1 0# ww1 w1 }) -}
37f5fa62b0b3b07695632c6dd4da11f8
  $fShowLog2 :: Exercises.LogDate -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Exercises.LogDate) (w1 :: GHC.Base.String) ->
                 case w of ww { Exercises.LogDate ww1 ww2 ->
                 Exercises.$w$cshowsPrec2 0# ww1 ww2 w1 }) -}
1e363663ac4cfc62d66882d568841757
  $fShowLog3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LogDate "#) -}
e9b10258374f94a5f34ca3c5a0d48195
  $fShowLog4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Log "#) -}
37f5fa62b0b3b07695632c6dd4da11f8
  $fShowLogDate :: GHC.Show.Show Exercises.LogDate
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.LogDate
                  Exercises.$fShowLogDate_$cshowsPrec
                  Exercises.$fShowLogDate_$cshow
                  Exercises.$fShowLogDate_$cshowList -}
37f5fa62b0b3b07695632c6dd4da11f8
  $fShowLogDate_$cshow :: Exercises.LogDate -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x4 :: Exercises.LogDate) ->
                 Exercises.$fShowLogDate_$cshowsPrec
                   GHC.Show.shows22
                   x4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
37f5fa62b0b3b07695632c6dd4da11f8
  $fShowLogDate_$cshowList :: [Exercises.LogDate] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Exercises.LogDate
                   Exercises.$fShowLog2) -}
37f5fa62b0b3b07695632c6dd4da11f8
  $fShowLogDate_$cshowsPrec ::
    GHC.Types.Int -> Exercises.LogDate -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Exercises.LogDate)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Exercises.LogDate ww3 ww4 ->
                 Exercises.$w$cshowsPrec2 ww1 ww3 ww4 w2 } }) -}
36c46d356b9f815eee4f1ff9d32f72ff
  $fShowLog_$cshow :: Exercises.Log -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x4 :: Exercises.Log) ->
                 case x4 of wild { Exercises.Log b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Exercises.$fShowLog4)
                   (GHC.Show.showList__
                      @ Exercises.LogDate
                      Exercises.$fShowLog2
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
36c46d356b9f815eee4f1ff9d32f72ff
  $fShowLog_$cshowList :: [Exercises.Log] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Exercises.Log
                   Exercises.$fShowLog1) -}
36c46d356b9f815eee4f1ff9d32f72ff
  $fShowLog_$cshowsPrec ::
    GHC.Types.Int -> Exercises.Log -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Exercises.Log)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Exercises.Log ww3 ->
                 Exercises.$w$cshowsPrec1 ww1 ww3 w2 } }) -}
48500a98d59d7d36c2d2deb072562c50
  $fShowNumberOrString :: GHC.Show.Show Exercises.NumberOrString
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.NumberOrString
                  Exercises.$fShowNumberOrString_$cshowsPrec
                  Exercises.$fShowNumberOrString_$cshow
                  Exercises.$fShowNumberOrString_$cshowList -}
48500a98d59d7d36c2d2deb072562c50
  $fShowNumberOrString1 :: Exercises.NumberOrString -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Exercises.NumberOrString)
                   (w1 :: GHC.Base.String) ->
                 Exercises.$w$cshowsPrec3 0# w w1) -}
09d2d33f58e9ea69003688a6f26ea67b
  $fShowNumberOrString2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOSI "#) -}
266b1f8928f68532ad2c9cdc04c3c24f
  $fShowNumberOrString3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOSS "#) -}
48500a98d59d7d36c2d2deb072562c50
  $fShowNumberOrString_$cshow ::
    Exercises.NumberOrString -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x4 :: Exercises.NumberOrString) ->
                 Exercises.$fShowNumberOrString_$cshowsPrec
                   GHC.Show.shows22
                   x4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
48500a98d59d7d36c2d2deb072562c50
  $fShowNumberOrString_$cshowList ::
    [Exercises.NumberOrString] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Exercises.NumberOrString
                   Exercises.$fShowNumberOrString1) -}
48500a98d59d7d36c2d2deb072562c50
  $fShowNumberOrString_$cshowsPrec ::
    GHC.Types.Int -> Exercises.NumberOrString -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Exercises.NumberOrString)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Exercises.$w$cshowsPrec3 ww1 w1 w2 }) -}
86397c7de6c8e8aad47e631d4590a30b
  $fShowPhoneNumber :: GHC.Show.Show Exercises.PhoneNumber
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.PhoneNumber
                  Exercises.$fShowPhoneNumber_$cshowsPrec
                  Exercises.$fShowPhoneNumber_$cshow
                  Exercises.$fShowPhoneNumber_$cshowList -}
86397c7de6c8e8aad47e631d4590a30b
  $fShowPhoneNumber1 :: Exercises.PhoneNumber -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Exercises.PhoneNumber)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Exercises.PhoneNumber ww1 ww2 ww3 ->
                 Exercises.$w$cshowsPrec4 0# ww1 ww2 ww3 w1 }) -}
f9788fca20aece7d47aa81f9b7efb3fe
  $fShowPhoneNumber2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PhoneNumber "#) -}
86397c7de6c8e8aad47e631d4590a30b
  $fShowPhoneNumber_$cshow ::
    Exercises.PhoneNumber -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x4 :: Exercises.PhoneNumber) ->
                 Exercises.$fShowPhoneNumber_$cshowsPrec
                   GHC.Show.shows22
                   x4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
86397c7de6c8e8aad47e631d4590a30b
  $fShowPhoneNumber_$cshowList ::
    [Exercises.PhoneNumber] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Exercises.PhoneNumber
                   Exercises.$fShowPhoneNumber1) -}
86397c7de6c8e8aad47e631d4590a30b
  $fShowPhoneNumber_$cshowsPrec ::
    GHC.Types.Int -> Exercises.PhoneNumber -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Exercises.PhoneNumber)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Exercises.PhoneNumber ww3 ww4 ww5 ->
                 Exercises.$w$cshowsPrec4 ww1 ww3 ww4 ww5 w2 } }) -}
1d61724211cf563d43a96a92cffaf73d
  $fShowSemVer :: GHC.Show.Show Exercises.SemVer
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.SemVer
                  Exercises.$fShowSemVer_$cshowsPrec
                  Exercises.$fShowSemVer_$cshow
                  Exercises.$fShowSemVer_$cshowList -}
1d61724211cf563d43a96a92cffaf73d
  $fShowSemVer1 :: Exercises.SemVer -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Exercises.SemVer) (w1 :: GHC.Base.String) ->
                 case w of ww { Exercises.SemVer ww1 ww2 ww3 ww4 ww5 ->
                 Exercises.$w$cshowsPrec5 0# ww1 ww2 ww3 ww4 ww5 w1 }) -}
0ffa58aa89243bed3505bc6dc1cc3a71
  $fShowSemVer2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SemVer "#) -}
1d61724211cf563d43a96a92cffaf73d
  $fShowSemVer_$cshow :: Exercises.SemVer -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x4 :: Exercises.SemVer) ->
                 Exercises.$fShowSemVer_$cshowsPrec
                   GHC.Show.shows22
                   x4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1d61724211cf563d43a96a92cffaf73d
  $fShowSemVer_$cshowList :: [Exercises.SemVer] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Exercises.SemVer
                   Exercises.$fShowSemVer1) -}
1d61724211cf563d43a96a92cffaf73d
  $fShowSemVer_$cshowsPrec ::
    GHC.Types.Int -> Exercises.SemVer -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(U,U,U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Exercises.SemVer)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Exercises.SemVer ww3 ww4 ww5 ww6 ww7 ->
                 Exercises.$w$cshowsPrec5 ww1 ww3 ww4 ww5 ww6 ww7 w2 } }) -}
b69c5d0d6a2a6ed3b68a21fa3d2e5dc8
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe Exercises.SemVer)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Exercises.SemVer)
                  Exercises.$s$fEqMaybe_$s$fEqMaybe_$c==
                  (GHC.Base.$fEqMaybe_$c/=
                     @ Exercises.SemVer
                     Exercises.$fEqSemVer) -}
ab6309553b13af4011b09d20486a69bd
  $s$fEqMaybe1 ::
    GHC.Classes.Eq (GHC.Base.Maybe Exercises.PhoneNumber)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Exercises.PhoneNumber)
                  Exercises.$s$fEqMaybe_$s$fEqMaybe_$c==1
                  (GHC.Base.$fEqMaybe_$c/=
                     @ Exercises.PhoneNumber
                     Exercises.$fEqPhoneNumber) -}
3c912cb12304acf55a968ee67137acf8
  $s$fEqMaybe_$s$fEqMaybe_$c== ::
    GHC.Base.Maybe Exercises.SemVer
    -> GHC.Base.Maybe Exercises.SemVer -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe Exercises.SemVer)
                   (ds4 :: GHC.Base.Maybe Exercises.SemVer) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> Exercises.$fEqSemVer_$c== a1 b1 } }) -}
cca016754b8cf5280fa66c82b4b2b35d
  $s$fEqMaybe_$s$fEqMaybe_$c==1 ::
    GHC.Base.Maybe Exercises.PhoneNumber
    -> GHC.Base.Maybe Exercises.PhoneNumber -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe Exercises.PhoneNumber)
                   (ds4 :: GHC.Base.Maybe Exercises.PhoneNumber) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> Exercises.$fEqPhoneNumber_$c== a1 b1 } }) -}
2356f2e3e65dcd11fc5cb3c8af5a494a
  $s$fShowMaybe ::
    GHC.Show.Show (GHC.Base.Maybe Exercises.PhoneNumber)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Exercises.PhoneNumber)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ Exercises.PhoneNumber
                     Exercises.$fShowPhoneNumber)
                  (GHC.Show.$fShowMaybe_$cshow
                     @ Exercises.PhoneNumber
                     Exercises.$fShowPhoneNumber)
                  Exercises.$s$fShowMaybe_$s$fShowMaybe_$cshowList -}
ac770cb857c74fd2723f43e9b8da8b1a
  $s$fShowMaybe1 :: GHC.Show.Show (GHC.Base.Maybe Exercises.SemVer)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Exercises.SemVer)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ Exercises.SemVer
                     Exercises.$fShowSemVer)
                  (GHC.Show.$fShowMaybe_$cshow
                     @ Exercises.SemVer
                     Exercises.$fShowSemVer)
                  Exercises.$s$fShowMaybe_$s$fShowMaybe_$cshowList1 -}
378287e4d92a8c29db1b74f3108bdd7c
  $s$fShowMaybe_$s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe Exercises.PhoneNumber] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe Exercises.PhoneNumber])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe Exercises.PhoneNumber)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ Exercises.PhoneNumber
                      Exercises.$fShowPhoneNumber
                      GHC.Show.shows22)
                   eta
                   eta1) -}
371a6dc7b6c0a48ff1416b1b1c5d03fe
  $s$fShowMaybe_$s$fShowMaybe_$cshowList1 ::
    [GHC.Base.Maybe Exercises.SemVer] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe Exercises.SemVer])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe Exercises.SemVer)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ Exercises.SemVer
                      Exercises.$fShowSemVer
                      GHC.Show.shows22)
                   eta
                   eta1) -}
5c38f108334e88eb994ed0e2bf4c36cc
  $sread1 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: GHC.Base.String) ->
                 case Text.Read.readEither
                        @ GHC.Types.Int
                        GHC.Read.$fReadInt
                        s1 of wild {
                   Data.Either.Left x4
                   -> GHC.Err.errorWithoutStackTrace
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.Types.Int
                        x4
                   Data.Either.Right y -> y }) -}
56dc1febfea96b38a6f3318bd92463c2
  $tc'Activity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1113553812247015057##
                   17754752788386012650##
                   Exercises.$trModule
                   Exercises.$tc'Activity1) -}
dff562ab14b0139e16a8ca17c5e84204
  $tc'Activity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Activity"#) -}
06f323eb41ff49fadf8fd69d49a2b4e5
  $tc'Log :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9704953623694614040##
                   16832249865036991733##
                   Exercises.$trModule
                   Exercises.$tc'Log1) -}
158bd393ab422f05e160c59fde4a932b
  $tc'Log1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Log"#) -}
41e2ca07aebb28c27511b140c4ee46a1
  $tc'LogDate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7734574408287818929##
                   13338893591903508014##
                   Exercises.$trModule
                   Exercises.$tc'LogDate1) -}
440def4d8bbcf419d0c0cad76a5d8104
  $tc'LogDate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LogDate"#) -}
db72a08178ad23a273e365f93b11f183
  $tc'NOSI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12368948402948439477##
                   2524713598331861107##
                   Exercises.$trModule
                   Exercises.$tc'NOSI1) -}
71449384ddaeb960e1934bdf2478191d
  $tc'NOSI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NOSI"#) -}
7c77fd2298ff2f0bec8ab102a87bc819
  $tc'NOSS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3549461088424423694##
                   2168544464172209504##
                   Exercises.$trModule
                   Exercises.$tc'NOSS1) -}
efb1aa935bc66c111abb9b245279df0e
  $tc'NOSS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NOSS"#) -}
14c9e4d087deb01412350800e58745d7
  $tc'PhoneNumber :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15365643810355505971##
                   5657135840903326721##
                   Exercises.$trModule
                   Exercises.$tc'PhoneNumber1) -}
84cb086d6302122e59eed56b48070909
  $tc'PhoneNumber1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PhoneNumber"#) -}
e432407542ec3ef375dbe0070ea28ca9
  $tc'SemVer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17067002534520709053##
                   9963680233319000021##
                   Exercises.$trModule
                   Exercises.$tc'SemVer1) -}
7e173c8e3e2ef4854e3f7a2caedff6ea
  $tc'SemVer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SemVer"#) -}
a4a2ba819359404350902b855993204d
  $tcActivity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16107681423550402358##
                   4036584173311795571##
                   Exercises.$trModule
                   Exercises.$tcActivity1) -}
64b9142a151783240b25dad5760bd665
  $tcActivity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Activity"#) -}
f285fe87e815029ee410d23dd3df6be0
  $tcLog :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3953424518455316422##
                   2583867683501543039##
                   Exercises.$trModule
                   Exercises.$tcLog1) -}
b58afbba378f5fe9e48ccd98aee3b5df
  $tcLog1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Log"#) -}
599e04ddcb2de6a29117967687c9a9b4
  $tcLogDate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12139970994136065130##
                   7810393073735546127##
                   Exercises.$trModule
                   Exercises.$tcLogDate1) -}
83c853aab819a97f48218ba814b7619d
  $tcLogDate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "LogDate"#) -}
00067cf29663d54d6b8aad95ac177e80
  $tcNumberOrString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15323621080992385839##
                   10687678616714119085##
                   Exercises.$trModule
                   Exercises.$tcNumberOrString1) -}
5fc8c8ab11d27798bf6ec2f0da6ea400
  $tcNumberOrString1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NumberOrString"#) -}
81ee6b877b89533a54060342a829ff12
  $tcPhoneNumber :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17308786861296816443##
                   14640479798157541628##
                   Exercises.$trModule
                   Exercises.$tcPhoneNumber1) -}
4c42084b0165615cec11402b6112b363
  $tcPhoneNumber1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PhoneNumber"#) -}
7a06002fa3ae2bdca008d9f9ba26a65e
  $tcSemVer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7940274434905420746##
                   9524585178601850883##
                   Exercises.$trModule
                   Exercises.$tcSemVer1) -}
f150d7ab127e660032bb39354e5dd8cc
  $tcSemVer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SemVer"#) -}
b0e00e14e1bb0f1e378792d83650c437
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Exercises.$trModule2
                   Exercises.$trModule1) -}
6f2d48e46d801d314d47fedecb507122
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Exercises"#) -}
6e4d0fee63f2a90076807ae0d9959cb7
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "exercises-0.1.0.0-Dlc12BTUrEQK6RgYfgxVHF"#) -}
9ebee2ffdd2fe7f276926447d617b405
  $w$c== ::
    GHC.Prim.Int#
    -> Exercises.Exchange
    -> Exercises.LineNumber
    -> GHC.Prim.Int#
    -> Exercises.Exchange
    -> Exercises.LineNumber
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Exercises.Exchange)
                   (ww2 :: Exercises.LineNumber)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: Exercises.Exchange)
                   (ww5 :: Exercises.LineNumber) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww3) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.I# x4 ->
                      case ww4 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x4 y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.eqInt ww2 ww5 } } } }) -}
847d886ca581c856a571618fdb65e68b
  $w$c==1 ::
    Exercises.Major
    -> Exercises.Minor
    -> Exercises.Patch
    -> Exercises.Release
    -> Exercises.Metadata
    -> Exercises.Major
    -> Exercises.Minor
    -> Exercises.Patch
    -> Exercises.Release
    -> Exercises.Metadata
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Exercises.Major)
                   (ww1 :: Exercises.Minor)
                   (ww2 :: Exercises.Patch)
                   (ww3 :: Exercises.Release)
                   (ww4 :: Exercises.Metadata)
                   (ww5 :: Exercises.Major)
                   (ww6 :: Exercises.Minor)
                   (ww7 :: Exercises.Patch)
                   (ww8 :: Exercises.Release)
                   (ww9 :: Exercises.Metadata) ->
                 case GHC.Integer.Type.eqInteger# ww ww5 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Integer.Type.eqInteger# ww1 ww6 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Integer.Type.eqInteger# ww2 ww7 of wild4 { DEFAULT ->
                           case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild4 of wild5 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case GHC.Classes.$fEq[]_$c==
                                       @ Exercises.NumberOrString
                                       Exercises.$fEqNumberOrString
                                       ww3
                                       ww8 of wild6 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> GHC.Classes.$fEq[]_$c==
                                       @ Exercises.NumberOrString
                                       Exercises.$fEqNumberOrString
                                       ww4
                                       ww9 } } } } } } }) -}
54855687cbc3575ea1207ccea9640864
  $w$ccompare ::
    Exercises.Major
    -> Exercises.Minor
    -> Exercises.Patch
    -> Exercises.Release
    -> Exercises.Major
    -> Exercises.Minor
    -> Exercises.Patch
    -> Exercises.Release
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,U><L,U><L,U><S,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Exercises.Major)
                   (ww1 :: Exercises.Minor)
                   (ww2 :: Exercises.Patch)
                   (ww3 :: Exercises.Release)
                   (ww4 :: Exercises.Major)
                   (ww5 :: Exercises.Minor)
                   (ww6 :: Exercises.Patch)
                   (ww7 :: Exercises.Release) ->
                 case GHC.Integer.Type.gtInteger# ww ww4 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.ltInteger# ww ww4 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False
                        -> case GHC.Integer.Type.gtInteger# ww1 ww5 of wild4 { DEFAULT ->
                           case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild4 of wild5 {
                             GHC.Types.False
                             -> case GHC.Integer.Type.ltInteger# ww1 ww5 of wild6 { DEFAULT ->
                                case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild6 of wild7 {
                                  GHC.Types.False
                                  -> case GHC.Integer.Type.gtInteger# ww2 ww6 of wild8 { DEFAULT ->
                                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild8 of wild9 {
                                       GHC.Types.False
                                       -> case GHC.Integer.Type.ltInteger#
                                                 ww2
                                                 ww6 of wild10 { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 wild10 of wild11 {
                                            GHC.Types.False
                                            -> let {
                                                 $j :: GHC.Prim.Void# -> GHC.Types.Ordering
                                                   {- Arity: 1, Strictness: <L,A> -}
                                                 = \ (w :: GHC.Prim.Void#)[OneShot] ->
                                                   case ww3 of wild12 {
                                                     []
                                                     -> GHC.Classes.$fOrd[]_$ccompare
                                                          @ Exercises.NumberOrString
                                                          Exercises.$fOrdNumberOrString
                                                          (GHC.Types.[] @ Exercises.NumberOrString)
                                                          ww7
                                                     : ds4 ds5
                                                     -> case ww7 of wild13 {
                                                          [] -> GHC.Types.LT
                                                          : ds6 ds7
                                                          -> GHC.Classes.$fOrd[]_$ccompare
                                                               @ Exercises.NumberOrString
                                                               Exercises.$fOrdNumberOrString
                                                               wild12
                                                               wild13 } }
                                               } in
                                               case ww3 of wild12 {
                                                 []
                                                 -> case ww7 of wild13 {
                                                      [] -> $j GHC.Prim.void#
                                                      : ds4 ds5 -> GHC.Types.GT }
                                                 : ds4 ds5 -> $j GHC.Prim.void# }
                                            GHC.Types.True -> GHC.Types.LT } }
                                       GHC.Types.True -> GHC.Types.GT } }
                                  GHC.Types.True -> GHC.Types.LT } }
                             GHC.Types.True -> GHC.Types.GT } }
                        GHC.Types.True -> GHC.Types.LT } }
                   GHC.Types.True -> GHC.Types.GT } }) -}
c7186fcda60176d2151cc624553ac190
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Exercises.Name
    -> Exercises.StartTime
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U(1*U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Exercises.Name)
                   (ww2 :: Exercises.StartTime)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x4 :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Exercises.$fShowActivity2
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.shows6
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case ww2 of ww3 { Data.Time.Clock.UTC.UTCTime ww4 ww5 ->
                                    Data.Time.LocalTime.LocalTime.$w$cshowsPrec1 ww4 ww5 x4 })))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
f5925274c6914ff108c16a105d54037e
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [Exercises.LogDate] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Exercises.LogDate])
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Exercises.$fShowLog4
                        (GHC.Show.showList__
                           @ Exercises.LogDate
                           Exercises.$fShowLog2
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Exercises.$fShowLog4
                           (GHC.Show.showList__
                              @ Exercises.LogDate
                              Exercises.$fShowLog2
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
38b251a09baca1a1b0e7e0bc5a46d9dc
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Data.Time.Calendar.Days.Day
    -> [Exercises.Activity]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Time.Calendar.Days.Day)
                   (ww2 :: [Exercises.Activity])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x4 :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Exercises.$fShowLog3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          (Data.Time.Calendar.Gregorian.showGregorian ww1)
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (GHC.Show.showList__
                                @ Exercises.Activity
                                Exercises.$fShowActivity1
                                ww2
                                x4)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
48500a98d59d7d36c2d2deb072562c50
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Exercises.NumberOrString -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Exercises.NumberOrString)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Exercises.NOSS b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Exercises.$fShowNumberOrString3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Exercises.$fShowNumberOrString3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))))) }
                   Exercises.NOSI b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Exercises.$fShowNumberOrString2
                             (case GHC.Show.$w$cshowsPrec1 11# b1 w1 of ww2 { (#,#) ww3 ww4 ->
                              GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Exercises.$fShowNumberOrString2
                                (case GHC.Show.$w$cshowsPrec1
                                        11#
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           w1) of ww2 { (#,#) ww3 ww4 ->
                                 GHC.Types.: @ GHC.Types.Char ww3 ww4 })) } }) -}
b4616abc9dd0d43cdefd9c1fb853c901
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Exercises.NumberingPlanArea
    -> Exercises.Exchange
    -> Exercises.LineNumber
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Exercises.NumberingPlanArea)
                   (ww2 :: Exercises.Exchange)
                   (ww3 :: Exercises.LineNumber)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x4 :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Exercises.$fShowPhoneNumber2
                       (case ww1 of ww4 { GHC.Types.I# ww5 ->
                        case GHC.Show.$wshowSignedInt
                               11#
                               ww5
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case ww2 of ww6 { GHC.Types.I# ww7 ->
                                   case GHC.Show.$wshowSignedInt
                                          11#
                                          ww7
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showSpace1
                                             (case ww3 of ww8 { GHC.Types.I# ww9 ->
                                              case GHC.Show.$wshowSignedInt
                                                     11#
                                                     ww9
                                                     x4 of ww10 { (#,#) ww11 ww12 ->
                                              GHC.Types.:
                                                @ GHC.Types.Char
                                                ww11
                                                ww12 } })) of ww8 { (#,#) ww9 ww10 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     ww9
                                     ww10 } })) of ww6 { (#,#) ww7 ww8 ->
                        GHC.Types.: @ GHC.Types.Char ww7 ww8 } })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
d73cfaeb5692504da524237abf7167b0
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> Exercises.Major
    -> Exercises.Minor
    -> Exercises.Patch
    -> Exercises.Release
    -> Exercises.Metadata
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 7, Strictness: <S,U><L,U><L,U><L,U><L,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Exercises.Major)
                   (ww2 :: Exercises.Minor)
                   (ww3 :: Exercises.Patch)
                   (ww4 :: Exercises.Release)
                   (ww5 :: Exercises.Metadata)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x4 :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Exercises.$fShowSemVer2
                       (case GHC.Show.$w$cshowsPrec1
                               11#
                               ww1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case GHC.Show.$w$cshowsPrec1
                                          11#
                                          ww2
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showSpace1
                                             (case GHC.Show.$w$cshowsPrec1
                                                     11#
                                                     ww3
                                                     (GHC.Types.:
                                                        @ GHC.Types.Char
                                                        GHC.Show.showSpace1
                                                        (GHC.Show.showList__
                                                           @ Exercises.NumberOrString
                                                           Exercises.$fShowNumberOrString1
                                                           ww4
                                                           (GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.showSpace1
                                                              (GHC.Show.showList__
                                                                 @ Exercises.NumberOrString
                                                                 Exercises.$fShowNumberOrString1
                                                                 ww5
                                                                 x4)))) of ww6 { (#,#) ww7 ww8 ->
                                              GHC.Types.:
                                                @ GHC.Types.Char
                                                ww7
                                                ww8 })) of ww6 { (#,#) ww7 ww8 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     ww7
                                     ww8 })) of ww6 { (#,#) ww7 ww8 ->
                        GHC.Types.: @ GHC.Types.Char ww7 ww8 })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
b7966491593949277c0b8533d614c59b
  $wcharToInteger :: GHC.Prim.Char# -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Char#) ->
                 case ww of ds {
                   DEFAULT -> Exercises.charToInteger11
                   '0'# -> Exercises.charToInteger10
                   '1'# -> Exercises.charToInteger9
                   '2'# -> Exercises.charToInteger8
                   '3'# -> Exercises.charToInteger7
                   '4'# -> Exercises.charToInteger6
                   '5'# -> Exercises.charToInteger5
                   '6'# -> Exercises.charToInteger4
                   '7'# -> Exercises.charToInteger3
                   '8'# -> Exercises.charToInteger2
                   '9'# -> Exercises.charToInteger1 }) -}
472cc3d695f637492382f86812933a5d
  $wlvl ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <L,1*C1(C1(U))><L,C(C1(C(U)))><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
c30e4ec261818fb7b35cc5d79d06fd3f
  $wlvl1 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <L,1*C1(C1(U))><L,C(C1(C(U)))><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
ab7ea2ddd9b6f0d55a7eba5706f133c6
  $wnegativeBase10Integer ::
    (Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Integer.Type.Integer
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 8,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
396892a6052d1c854021bcca6aa8c3f2
  $wparseActivity ::
    Data.Time.Calendar.Days.Day
    -> forall r.
       (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Exercises.Activity
           -> Data.Set.Base.Set GHC.Base.String
           -> Text.Trifecta.Delta.Delta
           -> Data.ByteString.Internal.ByteString
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.ErrInfo
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> Text.Trifecta.Delta.Delta
       -> Data.ByteString.Internal.ByteString
       -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: [0] -}
73b3d0b55e3d6ac25a1c4fc718870223
  $wparseAnyWhitespaceThenComment ::
    (Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <L,1*C1(U)><L,C(C1(C(U)))><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
97d9046609a27436c97276d111f340c6
  $wparseAnyWhitespaceThenComment1 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 5,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Delta.Delta)
                   (w4 :: Data.ByteString.Internal.ByteString) ->
                 let {
                   lvl105 :: Data.Set.Base.Set GHC.Base.String
                             -> Text.Trifecta.Delta.Delta
                             -> Data.ByteString.Internal.ByteString
                             -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
                   = w1 GHC.Tuple.()
                 } in
                 Text.Trifecta.Parser.$wmanyAccum
                   @ GHC.Types.Char
                   Exercises.parseActivityNameEnd_ds
                   Exercises.parseActivityNameEnd11
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Char>_R))
                   @ r
                   (\ (ds4 :: [GHC.Types.Char])[OneShot] -> w GHC.Tuple.())
                   (\ (ds4 :: [GHC.Types.Char]) -> lvl105)
                   w2
                   w3
                   w4) -}
a65bf00dbacc0c3607e345c8632274fb
  $wparseAreaCode ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 5, Strictness: <L,C(U)><L,C(U)><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Delta.Delta)
                   (w4 :: Data.ByteString.Internal.ByteString) ->
                 let {
                   lvl105 :: Data.Set.Base.Set GHC.Base.String
                             -> Text.Trifecta.Delta.Delta
                             -> Data.ByteString.Internal.ByteString
                             -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
                   = w1 GHC.Tuple.()
                 } in
                 let {
                   lvl106 :: Text.Trifecta.Result.Err
                             -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
                   = w GHC.Tuple.()
                 } in
                 Exercises.parseAreaCode_ds
                   `cast`
                 (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Char>_R)
                   @ r
                   (\ (ds4 :: GHC.Types.Char) -> lvl106)
                   (\ (e :: Text.Trifecta.Result.Err) ->
                    w GHC.Tuple.()
                      (case e of wild4 { Text.Trifecta.Result.Err md mds mes delta1 ->
                       Text.Trifecta.Result.Err
                         md
                         (case md of wild { DEFAULT -> mds })
                         (Text.Trifecta.Result.$fMonoidErr_$sunion
                            mes
                            (Data.Set.Base.Tip @ [GHC.Types.Char]))
                         delta1 }))
                   (\ (ds4 :: GHC.Types.Char) -> lvl105)
                   w2
                   w3
                   w4) -}
539dca3f89fba2ec01a2a47d7f4e23d8
  $wparseComment ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 5,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Delta.Delta)
                   (w4 :: Data.ByteString.Internal.ByteString) ->
                 let {
                   lvl105 :: Data.Set.Base.Set GHC.Base.String
                             -> Text.Trifecta.Delta.Delta
                             -> Data.ByteString.Internal.ByteString
                             -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
                   = w1 GHC.Tuple.()
                 } in
                 Text.Trifecta.Parser.$wmanyAccum
                   @ GHC.Types.Char
                   Exercises.parseActivityNameEnd_ds
                   Exercises.parseActivityNameEnd4
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Char>_R))
                   @ r
                   (\ (ds4 :: [GHC.Types.Char])[OneShot] -> w GHC.Tuple.())
                   (\ (ds4 :: [GHC.Types.Char]) -> lvl105)
                   w2
                   w3
                   w4) -}
961d0e611977fb9cf2917cc86d0303b8
  $wparseComment1 ::
    (Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <L,1*C1(U)><L,C(C1(C(U)))><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
250ef63def20059d0a3c29aed06e0999
  $wparseCorVer ::
    (Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> ((Exercises.Major, Exercises.Minor, Exercises.Patch)
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: [0] -}
b71211de6336209b0acc909e9e1818e1
  $wparseCountryCode ::
    (Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Int
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 8,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(U))))><L,C(U)><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
09ce7d4aa77f10de57d309ed2de06475
  $wparseExchange ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <L,1*C1(C1(U))><L,C(C1(C(U)))><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
d199fd10c19cc3ce88133a6bd392f5a9
  $wparseHeader ::
    (Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Data.Time.Calendar.Days.Day
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 5,
     Strictness: <L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: [0] -}
321d70ece842ef0a9218f7bd8d822f00
  $wparseLogDate ::
    (Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Exercises.LogDate
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 5,
     Strictness: <L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: [0] -}
434d624f5e21d5b659538a8962ab1beb
  $wparseMetadata ::
    (Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <L,1*C1(U)><L,C(C1(C(U)))><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
049a3e656d6dc9af59cf9100454e17ca
  $wparseNumOrStrList ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <L,1*C1(C1(U))><L,C(C1(C(U)))><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
911f93c8986f4bacdd75321e0dd28306
  $wparsePhone ::
    (Exercises.PhoneNumber
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Exercises.PhoneNumber
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 9,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(C1(C1(C1(U))))><L,U><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
47ba052324fd8bf3302ee23cd1a08572
  $wparseRelease ::
    (Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <L,1*C1(U)><L,C(C1(C(U)))><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
31bf650e21beedb0ca5a5670d0bc3e17
  $wparseSemVer ::
    (Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Exercises.SemVer
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: [0] -}
e15d1dd7e8ff5ab6b50395d357b8f6ce
  $wskipComment ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 5,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Delta.Delta)
                   (w4 :: Data.ByteString.Internal.ByteString) ->
                 let {
                   lvl105 :: Data.Set.Base.Set GHC.Base.String
                             -> Text.Trifecta.Delta.Delta
                             -> Data.ByteString.Internal.ByteString
                             -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
                   = w1 GHC.Tuple.()
                 } in
                 Text.Trifecta.Parser.$wmanyAccum
                   @ GHC.Types.Char
                   Exercises.parseActivityNameEnd_ds
                   Exercises.parseLog11
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Char>_R))
                   @ r
                   (\ (ds4 :: [GHC.Types.Char])[OneShot] -> w GHC.Tuple.())
                   (\ (ds4 :: [GHC.Types.Char]) -> lvl105)
                   w2
                   w3
                   w4) -}
53c54fc1bd84286563fceec4f519319d
  $wskipComment1 ::
    (Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <L,1*C1(U)><L,C(C1(C(U)))><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
bd6fc3a7788a3ddef5bb5b87c1d95a56
  $wskipComments ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 5,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Delta.Delta)
                   (w4 :: Data.ByteString.Internal.ByteString) ->
                 let {
                   lvl105 :: Data.Set.Base.Set GHC.Base.String
                             -> Text.Trifecta.Delta.Delta
                             -> Data.ByteString.Internal.ByteString
                             -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
                   = w1 GHC.Tuple.()
                 } in
                 Text.Trifecta.Parser.$wmanyAccum
                   @ ()
                   Exercises.parseLog_ds
                   Exercises.parseLog6
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))
                   @ r
                   (\ (ds4 :: [()])[OneShot] -> w GHC.Tuple.())
                   (\ (ds4 :: [()]) -> lvl105)
                   w2
                   w3
                   w4) -}
225f040cf090cf1467dc181d9a5b6dfc
  $wskipEOL ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 5,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Delta.Delta)
                   (w4 :: Data.ByteString.Internal.ByteString) ->
                 let {
                   lvl105 :: Data.Set.Base.Set GHC.Base.String
                             -> Text.Trifecta.Delta.Delta
                             -> Data.ByteString.Internal.ByteString
                             -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
                   = w1 GHC.Tuple.()
                 } in
                 Text.Trifecta.Parser.$wmanyAccum
                   @ GHC.Types.Char
                   Exercises.parseActivityNameEnd_ds
                   Exercises.parseLog8
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Char>_R))
                   @ r
                   (\ (ds4 :: [GHC.Types.Char])[OneShot] -> w GHC.Tuple.())
                   (\ (ds4 :: [GHC.Types.Char]) -> lvl105)
                   w2
                   w3
                   w4) -}
9422f7cbf55747a33be3468e28f38fb6
  $wskipEOL1 ::
    (Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <L,1*C1(U)><L,C(C1(C(U)))><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
27d4aa57073dc7882ce8d08f413aa389
  $wxs ::
    GHC.Prim.Int#
    -> (# Text.Trifecta.Parser.Parser GHC.Types.Char,
          [Text.Trifecta.Parser.Parser GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
3ea90a231f0a9741162a567cd408b5e8
  $wxs1 ::
    GHC.Prim.Int#
    -> (# Text.Trifecta.Parser.Parser GHC.Types.Char,
          [Text.Trifecta.Parser.Parser GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
a731e76670dccb5c2b47cf7a40f091ec
  $wxs2 ::
    GHC.Prim.Int#
    -> (# Text.Trifecta.Parser.Parser GHC.Types.Char,
          [Text.Trifecta.Parser.Parser GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
fa28d30d6e2e0315b41020ef822e68e6
  $wxs3 ::
    GHC.Prim.Int#
    -> (# Text.Trifecta.Parser.Parser GHC.Types.Char,
          [Text.Trifecta.Parser.Parser GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
f9c824ace5537fdb908bc1cb46219ae9
  data Activity = Activity Exercises.Name Exercises.StartTime
df04c644c7da3aedea73a2d6280a99cc
  type Exchange = GHC.Types.Int
e997af18481df02c2699c4a7a86510d2
  type LineNumber = GHC.Types.Int
36c46d356b9f815eee4f1ff9d32f72ff
  data Log = Log [Exercises.LogDate]
37f5fa62b0b3b07695632c6dd4da11f8
  data LogDate
    = LogDate Data.Time.Calendar.Days.Day [Exercises.Activity]
e0a553d7b983684a520770fc46de16ad
  type Major = GHC.Integer.Type.Integer
52b6656f865f53551e64fc99bfccb881
  type Metadata = [Exercises.NumberOrString]
dd324034a458d75c0064fb1fda15fe33
  type Minor = GHC.Integer.Type.Integer
4bc50ba6f037b26f8567470fdd6f3e0e
  type Name = GHC.Base.String
48500a98d59d7d36c2d2deb072562c50
  data NumberOrString
    = NOSS GHC.Base.String | NOSI GHC.Integer.Type.Integer
fa57449ff3fdc1ecc333249a7c744214
  type NumberingPlanArea = GHC.Types.Int
7007d37faa68e822f9f235bac9b2a897
  type Patch = GHC.Integer.Type.Integer
86397c7de6c8e8aad47e631d4590a30b
  data PhoneNumber
    = PhoneNumber Exercises.NumberingPlanArea
                  Exercises.Exchange
                  Exercises.LineNumber
88fd01f1ec3dac47de2f28a1bc191b03
  type Release = [Exercises.NumberOrString]
1d61724211cf563d43a96a92cffaf73d
  data SemVer
    = SemVer Exercises.Major
             Exercises.Minor
             Exercises.Patch
             Exercises.Release
             Exercises.Metadata
ba2d237e81f95946b9ed3a56465cf1a4
  type StartTime = Data.Time.Clock.UTC.UTCTime
f3aba3a28f8b5e2724ff391765a67107
  accumulate ::
    GHC.Integer.Type.Integer
    -> GHC.Types.Char -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (i :: GHC.Integer.Type.Integer) (c :: GHC.Types.Char) ->
                 GHC.Integer.Type.plusInteger
                   (Exercises.charToInteger c)
                   (GHC.Integer.Type.timesInteger i Exercises.accumulate1)) -}
c1b4c17fba25178b48b50d1cc26669a6
  accumulate1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
f64cfa457271341c7a12f19b5eea3a43
  base10Integer ::
    Text.Trifecta.Parser.Parser GHC.Integer.Type.Integer
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.base10Integer1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0]
                          <GHC.Integer.Type.Integer>_R)) -}
6eca267fd4270d9bf7ac95743152cb95
  base10Integer' ::
    Text.Trifecta.Parser.Parser GHC.Integer.Type.Integer
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.base10Integer'1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0]
                          <GHC.Integer.Type.Integer>_R)) -}
1963fa8dae4a5e79183616cdac8204c1
  base10Integer'' ::
    Text.Trifecta.Parser.Parser GHC.Integer.Type.Integer
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.base10Integer''1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0]
                          <GHC.Integer.Type.Integer>_R)) -}
6517b16c07b6c37d0b31dda080dccc21
  base10Integer''1 ::
    (GHC.Integer.Type.Integer
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Integer.Type.Integer
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Unfolding: (\ @ r
                   (eo :: GHC.Integer.Type.Integer
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ee :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (co :: GHC.Integer.Type.Integer
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ce :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (d :: Text.Trifecta.Delta.Delta)
                   (bs :: Data.ByteString.Internal.ByteString) ->
                 Exercises.base10Integer1
                   @ r
                   eo
                   (\ (e :: Text.Trifecta.Result.Err) ->
                    case bs of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                    Exercises.$wnegativeBase10Integer
                      @ r
                      (\ (e' :: Text.Trifecta.Result.Err)[OneShot] ->
                       ee (Text.Trifecta.Result.$fMonoidErr_$c<> e e'))
                      co
                      ce
                      d
                      ww1
                      ww2
                      ww3
                      ww4 })
                   co
                   ce
                   d
                   bs) -}
62998eeade0dac2a4ffc228fb5dc7cdf
  base10Integer'1 ::
    (GHC.Integer.Type.Integer
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Integer.Type.Integer
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U>,
     Unfolding: (\ @ r
                   (eo :: GHC.Integer.Type.Integer
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ee :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (co :: GHC.Integer.Type.Integer
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ce :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (d :: Text.Trifecta.Delta.Delta)
                   (bs :: Data.ByteString.Internal.ByteString) ->
                 Text.Trifecta.Parser.$fAlternativeParser1
                   @ GHC.Types.Char
                   Exercises.base10Integer8
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Char>_R))
                   @ r
                   (\ (a1 :: [GHC.Types.Char])
                      (e :: Text.Trifecta.Result.Err)[OneShot] ->
                    eo
                      (Exercises.base10Integer'_go2 a1 Exercises.charToInteger10)
                      (case e of wild4 { Text.Trifecta.Result.Err md mds mes delta1 ->
                       Text.Trifecta.Result.Err
                         md
                         (case md of wild {
                            GHC.Base.Nothing
                            -> letrec {
                                 go2 :: [Text.PrettyPrint.ANSI.Leijen.Doc]
                                        -> [Text.PrettyPrint.ANSI.Leijen.Doc]
                                   {- Arity: 1, Strictness: <S,1*U> -}
                                 = \ (ds :: [Text.PrettyPrint.ANSI.Leijen.Doc]) ->
                                   case ds of wild1 {
                                     [] -> mds
                                     : y ys
                                     -> GHC.Types.: @ Text.PrettyPrint.ANSI.Leijen.Doc y (go2 ys) }
                               } in
                               go2 (GHC.Types.[] @ Text.PrettyPrint.ANSI.Leijen.Doc)
                            GHC.Base.Just ipv -> mds })
                         (Text.Trifecta.Result.$fMonoidErr_$sunion
                            mes
                            (Data.Set.Base.Tip @ [GHC.Types.Char]))
                         (Exercises.base10Integer'_go1 delta1) }))
                   ee
                   (\ (a1 :: [GHC.Types.Char])
                      (es :: Data.Set.Base.Set GHC.Base.String)[OneShot]
                      (d' :: Text.Trifecta.Delta.Delta)[OneShot]
                      (bs' :: Data.ByteString.Internal.ByteString)[OneShot] ->
                    co
                      (Exercises.base10Integer'_go a1 Exercises.charToInteger10)
                      (Text.Trifecta.Parser.$fParsingParser_$sunion
                         es
                         (Data.Set.Base.Tip @ [GHC.Types.Char]))
                      d'
                      bs')
                   ce
                   d
                   bs) -}
596f538810d53397a66190aae4b7c442
  base10Integer'_go ::
    [GHC.Types.Char]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
05706d0499bf9f251bd1f62bf54074f4
  base10Integer'_go1 ::
    [Text.Trifecta.Delta.Delta] -> [Text.Trifecta.Delta.Delta]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
3a4a723cb485548e21570db4b606dfe9
  base10Integer'_go2 ::
    [GHC.Types.Char]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
35fbd2cc8b4ac445d316c4f6b10992bd
  base10Integer1 ::
    (GHC.Integer.Type.Integer
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Integer.Type.Integer
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U>,
     Unfolding: (\ @ r
                   (eo :: GHC.Integer.Type.Integer
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ee :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (co :: GHC.Integer.Type.Integer
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ce :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (d :: Text.Trifecta.Delta.Delta)
                   (bs :: Data.ByteString.Internal.ByteString) ->
                 Text.Trifecta.Parser.$fAlternativeParser1
                   @ GHC.Types.Char
                   Exercises.base10Integer8
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Char>_R))
                   @ r
                   (\ (a1 :: [GHC.Types.Char])
                      (e :: Text.Trifecta.Result.Err)[OneShot] ->
                    eo
                      (case Text.Read.readEither6
                              @ GHC.Integer.Type.Integer
                              (Text.ParserCombinators.ReadP.run
                                 @ GHC.Integer.Type.Integer
                                 Exercises.base10Integer7
                                 a1) of wild {
                         [] -> Exercises.base10Integer6
                         : x4 ds
                         -> case ds of wild1 {
                              [] -> x4 : ipv ipv1 -> Exercises.base10Integer5 } })
                      (case e of wild4 { Text.Trifecta.Result.Err ds4 ds5 ds3 ds6 ->
                       case ds4 of wild {
                         GHC.Base.Nothing
                         -> Text.Trifecta.Result.Err
                              (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                              (letrec {
                                 go2 :: [Text.PrettyPrint.ANSI.Leijen.Doc]
                                        -> [Text.PrettyPrint.ANSI.Leijen.Doc]
                                   {- Arity: 1, Strictness: <S,1*U> -}
                                 = \ (ds :: [Text.PrettyPrint.ANSI.Leijen.Doc]) ->
                                   case ds of wild1 {
                                     [] -> ds5
                                     : y ys
                                     -> GHC.Types.: @ Text.PrettyPrint.ANSI.Leijen.Doc y (go2 ys) }
                               } in
                               go2 (GHC.Types.[] @ Text.PrettyPrint.ANSI.Leijen.Doc))
                              (Text.Trifecta.Result.$fMonoidErr_$sunion
                                 ds3
                                 (Data.Set.Base.Tip @ [GHC.Types.Char]))
                              (Exercises.base10Integer_go1 ds6)
                         GHC.Base.Just ipv
                         -> Text.Trifecta.Result.Err
                              wild
                              ds5
                              Exercises.base10Integer4
                              (Exercises.base10Integer_go ds6) } }))
                   (\ (e :: Text.Trifecta.Result.Err) ->
                    ee
                      (case e of wild { Text.Trifecta.Result.Err ds4 ds5 ds3 ds6 ->
                       Text.Trifecta.Result.Err ds4 ds5 Exercises.base10Integer2 ds6 }))
                   (\ (a1 :: [GHC.Types.Char])
                      (es :: Data.Set.Base.Set GHC.Base.String)[OneShot]
                      (d' :: Text.Trifecta.Delta.Delta)[OneShot]
                      (bs' :: Data.ByteString.Internal.ByteString)[OneShot] ->
                    co
                      (case Text.Read.readEither6
                              @ GHC.Integer.Type.Integer
                              (Text.ParserCombinators.ReadP.run
                                 @ GHC.Integer.Type.Integer
                                 Exercises.base10Integer7
                                 a1) of wild {
                         [] -> Exercises.base10Integer6
                         : x4 ds
                         -> case ds of wild1 {
                              [] -> x4 : ipv ipv1 -> Exercises.base10Integer5 } })
                      (Text.Trifecta.Parser.$fParsingParser_$sunion
                         es
                         (Data.Set.Base.Tip @ [GHC.Types.Char]))
                      d'
                      bs')
                   ce
                   d
                   bs) -}
b5aa38a9e59e7ea66117924a8bac8e4b
  base10Integer10 :: Text.Trifecta.Parser.Parser GHC.Types.Char
b6e4d27aa6fc5ed9bd77a307dc48f8c7
  base10Integer2 :: Data.Set.Base.Set GHC.Base.String
  {- Unfolding: (case Exercises.base10Integer3 of dt { DEFAULT ->
                 Data.Set.Base.Bin
                   @ GHC.Base.String
                   1#
                   dt
                   (Data.Set.Base.Tip @ GHC.Base.String)
                   (Data.Set.Base.Tip @ GHC.Base.String) }) -}
767a14775eb4cde5773c3022744b034a
  base10Integer3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "integer"#) -}
b2c9d108fdf16d667c50a4abecb8e431
  base10Integer4 :: Data.Set.Base.Set GHC.Base.String
  {- Unfolding: (case Exercises.base10Integer3 of dt { DEFAULT ->
                 Data.Set.Base.Bin
                   @ GHC.Base.String
                   1#
                   dt
                   (Data.Set.Base.Tip @ GHC.Base.String)
                   (Data.Set.Base.Tip @ GHC.Base.String) }) -}
ff1b456bcf010d16224c9eb6aa93ee16
  base10Integer5 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
cb632a00465adb2c94ab855a67e19e7a
  base10Integer6 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
8b87f9730f45174fe8bf3cf4dc60634e
  base10Integer7 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Read.$fReadInteger3
                   GHC.Read.$fReadInteger_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither5 @ GHC.Integer.Type.Integer)) -}
21488bab38270dc72412187fd322a343
  base10Integer8 ::
    (GHC.Types.Char
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 2, Strictness: <L,C(C1(U))><L,C(U)>,
     Unfolding: (\ @ r
                   (eo :: GHC.Types.Char
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ee :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r) ->
                 Exercises.base10Integer10
                   `cast`
                 (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Char>_R)
                   @ r
                   (\ (a1 :: GHC.Types.Char) (e :: Text.Trifecta.Result.Err) ->
                    eo
                      a1
                      (case e of wild4 { Text.Trifecta.Result.Err ds4 ds5 ds3 ds6 ->
                       case ds4 of wild {
                         GHC.Base.Nothing -> wild4
                         GHC.Base.Just ipv
                         -> Text.Trifecta.Result.Err
                              wild
                              ds5
                              Exercises.base10Integer9
                              ds6 } }))
                   (\ (e :: Text.Trifecta.Result.Err) ->
                    ee
                      (case e of wild { Text.Trifecta.Result.Err ds4 ds5 ds3 ds6 ->
                       Text.Trifecta.Result.Err
                         ds4
                         ds5
                         Exercises.base10Integer9
                         ds6 }))) -}
d162a1b08ed87c53bae68ab633630889
  base10Integer9 :: Data.Set.Base.Set GHC.Base.String
  {- Unfolding: (case Exercises.base10Integer_nm2 of dt { DEFAULT ->
                 Data.Set.Base.Bin
                   @ GHC.Base.String
                   1#
                   dt
                   (Data.Set.Base.Tip @ GHC.Base.String)
                   (Data.Set.Base.Tip @ GHC.Base.String) }) -}
bd1a0a32294fc5e96d9962e218852772
  base10Integer_go ::
    [Text.Trifecta.Delta.Delta] -> [Text.Trifecta.Delta.Delta]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0e275422ee2795037ccaf56c81a5238b
  base10Integer_go1 ::
    [Text.Trifecta.Delta.Delta] -> [Text.Trifecta.Delta.Delta]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0b3724770e86821a70a854d5b4421c9c
  base10Integer_nm2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "digit"#) -}
e3109c3327df02918680e16a244efcf5
  charToInteger :: GHC.Types.Char -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Char) ->
                 case w of ww { GHC.Types.C# ww1 ->
                 Exercises.$wcharToInteger ww1 }) -}
f9bcfa2282ce6a584acd77c15a0822ce
  charToInteger1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (9) -}
b1f92a70a0772056389b36356ad9da48
  charToInteger10 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
90fb3d89db978249085f837741042e18
  charToInteger11 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
9fa84dd19f0ac07208ad217fed7a4c14
  charToInteger2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (8) -}
75739221fd1e6c0de71a45b96e635bbf
  charToInteger3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (7) -}
004656ed555bc169a653ce21e1dd26c8
  charToInteger4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (6) -}
5f14b914beb9db018b03240edb45839b
  charToInteger5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
df8e20cf63f50798947fa28dab86ccf2
  charToInteger6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
bf04607ac018729b210e5d84760d12aa
  charToInteger7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
9a8a32b10b6c0ef870efb5d573906054
  charToInteger8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
5ea9e5203ba1a01c689d78224865ee4a
  charToInteger9 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
c729a8ac9e6dc46307d8c5b0d2dd3d44
  logStr :: [GHC.Types.Char]
c136ad84ccdf9cde8968f0c14d3f2842
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
86708f9ec2528e139e6fedd6631ab51a
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case Test.Hspec.Core.Runner.hspec2
                        Test.Hspec.Core.Options.defaultConfig
                        Exercises.main2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.N:IO[0]
                                       <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0] <()>_N) <()>_N)))
                        eta of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds5 ->
                 case ds5 of wild1 { GHC.Types.I# x4 ->
                 case x4 of wild2 {
                   DEFAULT -> System.Exit.die2 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
52eaa289476b7f3dd76a3f638664468e
  main10 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Exercises.main52
                   Exercises.main11) -}
13a887be0af7a88f3f245e86a6a19b94
  main100 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 27#) -}
1ef8b2509b05cb7ecc58af836c547d70
  main101 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 356#) -}
b987e9b0ff2b79257bde3c7c987161cc
  main102 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main49
                   Exercises.main103) -}
e016e438a1db7b324be4664982f82373
  main103 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "arses an integer"#) -}
9daff1d15cce4dc0025b744ad1b0fa09
  main104 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main49
                   Exercises.main105) -}
1905a101f1b5158e820f3e148d9a3dce
  main105 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hone numbers 1"#) -}
ac60ec8d6f5ce685089a598ce28ca9f8
  main106 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Exercises.main130
                   Exercises.main107
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
51f2033cefb1ae59ce49bc66d2d26348
  main107 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main108
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
f7bfe103b1dee0c018fa51567d802c80
  main108 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main109) -}
0a52996b7c36dc9e5ffee78c3df80e70
  main109 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Exercises.main128
                   Exercises.main120
                   GHC.Types.False
                   Exercises.main110
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
5c94155db338419fc8bc23acd7f5a353
  main11 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Exercises.main12
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.Tree
                           (Test.Hspec.Core.Example.ActionWith ())
                           (Test.Hspec.Core.Tree.Item ())))) -}
d2badde325a62b33a040177f58fc60f5
  main110 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Exercises.main111) -}
269268f4ffa046d9504584212df11353
  main111 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Exercises.main114
                   (GHC.Types.[] @ GHC.Types.Char)
                   Exercises.main21
                   Exercises.main112) -}
01adbb6ef9ce88613c2b8072b65717a6
  main112 :: GHC.Base.Maybe Exercises.PhoneNumber
  {- Unfolding: (case Text.Trifecta.Parser.parseString
                        @ Exercises.PhoneNumber
                        Exercises.main20
                          `cast`
                        (Sym (Text.Trifecta.Parser.N:Parser[0] <Exercises.PhoneNumber>_R))
                        Text.Trifecta.Delta.$fMonoidDelta_$cmempty
                        Exercises.main113 of wild {
                   Text.Trifecta.Result.Success a
                   -> GHC.Base.Just @ Exercises.PhoneNumber a
                   Text.Trifecta.Result.Failure ipv
                   -> GHC.Base.Nothing @ Exercises.PhoneNumber }) -}
6d41334e7a66b4a4feca9aaeead54915
  main113 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "123-456-7890"#) -}
b78054c8e482eaf68cbad7b3fc46b189
  main114 ::
    GHC.Base.String
    -> GHC.Base.Maybe Exercises.PhoneNumber
    -> GHC.Base.Maybe Exercises.PhoneNumber
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe Exercises.PhoneNumber)
                   Exercises.main115
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Exercises.$s$fEqMaybe1
                   Exercises.$s$fShowMaybe) -}
87dc0c2652b81250b6a7f4d0dfe0d949
  main115 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Exercises.main116) -}
620d80e9cd2b95ea445409103a094ada
  main116 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Exercises.main117) -}
e6d10003faf49b32a386069647e1f71b
  main117 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main36
                   Exercises.main118
                   GHC.Stack.Types.EmptyCallStack) -}
c2b7e126ce5f81cb5d744413191b6537
  main118 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main119
                   Exercises.main31
                   Exercises.main119
                   Exercises.main30) -}
912fe5bdd8e2c244fa9ef145005d5f2d
  main119 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 353#) -}
1def78d34f8267fb6090d6e4a8b586f7
  main12 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Exercises.main50
                   Exercises.main13
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
32442514d5bdbb34b249d9287bdc1361
  main120 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Exercises.main121
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds4
                   -> case ds of wild2 { (,) ds5 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (GHC.Stack.Types.srcLocFile loc)
                           (GHC.Stack.Types.srcLocStartLine loc)
                           (GHC.Stack.Types.srcLocStartCol loc)
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
13d088a90b0bea0e658ecb1f507df233
  main121 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Exercises.main122) -}
d496bbc8231a23c01a33ee6302896f24
  main122 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Exercises.main123) -}
4bb7833d47ce0a1c804f78e116eebf1d
  main123 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Exercises.main124) -}
44476623f851d57d3e97ba105312e41b
  main124 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Exercises.main125) -}
27f39abcabfdb91f455a0c27c5be0a80
  main125 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main46
                   Exercises.main126
                   GHC.Stack.Types.EmptyCallStack) -}
8ccee27a54f90add3a076a360a7d195f
  main126 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main127
                   Exercises.main44
                   Exercises.main127
                   Exercises.main30) -}
8a23394352e046718d5c19633b86fe8b
  main127 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 349#) -}
ae2b0987b0aea15a38f584de40da2eef
  main128 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main49
                   Exercises.main129) -}
c94c91365a69b7bf642ba409eebeefaf
  main129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "arses a simple hyphenated number"#) -}
c31ad39e83e09f491d5d618e93554e69
  main13 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main14
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
7ceef1b1e6c01a42ebe79ece2ae26eed
  main130 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main49
                   Exercises.main131) -}
657d395609f52c3ccacac62677aed22a
  main131 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hone numbers 0"#) -}
2d6602d7d7c1f2a13b0f4f9aef49b7cd
  main132 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Exercises.main169
                   Exercises.main133
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
acff01f705e1df132c1657ca93a998ea
  main133 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main134
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
5bc2f02ed66455f44194a2b4a26ebffe
  main134 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main135) -}
7ccad7acd8b75cc86157f2d667401b5f
  main135 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Exercises.main166
                   Exercises.main157
                   GHC.Types.False
                   Exercises.main136
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
30a57ff0b795146dc16c2ea7f153741f
  main136 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Exercises.main137) -}
5643948ce8e6a4aeedff5fa9981318a6
  main137 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Exercises.main150
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Types.GT
                   Exercises.main138) -}
a41cad3cedab18b7587127e503878fcf
  main138 :: GHC.Types.Ordering
  {- Unfolding: (Exercises.$w$ccompare
                   Exercises.charToInteger9
                   Exercises.charToInteger10
                   Exercises.charToInteger10
                   Exercises.main145
                   Exercises.charToInteger9
                   Exercises.charToInteger10
                   Exercises.charToInteger10
                   Exercises.main139) -}
efefa1de6b7896a39029f62edba1c7f8
  main139 :: [Exercises.NumberOrString]
  {- Unfolding: (GHC.Types.:
                   @ Exercises.NumberOrString
                   Exercises.main143
                   Exercises.main140) -}
79c516a5b1bc47d731bd701022a0216b
  main14 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main15) -}
95fe19783dc261caf83ee5dbbc85c895
  main140 :: [Exercises.NumberOrString]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Exercises.NumberOrString
                   Exercises.main141
                   (GHC.Types.[] @ Exercises.NumberOrString)) -}
a2340a8722b7f5018e449a13d8705106
  main141 :: Exercises.NumberOrString
  {- HasNoCafRefs, Unfolding: (Exercises.NOSI Exercises.main142) -}
5c172e897da9d8adeb17b51f168175da
  main142 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (11) -}
1441b270c878b9ab29e2b0dfde020466
  main143 :: Exercises.NumberOrString
  {- Unfolding: (Exercises.NOSS Exercises.main144) -}
cc164fa4b35f45ab0a4878cfbcc694b7
  main144 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "beta"#) -}
d960f9976607d8b64fdc84b43d069584
  main145 :: [Exercises.NumberOrString]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Exercises.NumberOrString
                   Exercises.main148
                   Exercises.main146) -}
7983d7b8d68d839fdcaa586db09afe95
  main146 :: [Exercises.NumberOrString]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Exercises.NumberOrString
                   Exercises.main147
                   (GHC.Types.[] @ Exercises.NumberOrString)) -}
ec49a152ae52f13bfa6e05c155f4a616
  main147 :: Exercises.NumberOrString
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Exercises.NOSI Exercises.charToInteger9) -}
8ab2c58210a5b24555cab58828c8a974
  main148 :: Exercises.NumberOrString
  {- Strictness: m1, Unfolding: (Exercises.NOSS Exercises.main149) -}
3916f05efe7f82c01c4d7d27f2f7eb1c
  main149 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rc"#) -}
b6f8e097b9a5ffcab09044ff909654a4
  main15 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Exercises.main47
                   Exercises.main37
                   GHC.Types.False
                   Exercises.main16
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
73c909adf5606ead2fc7178164d47153
  main150 ::
    GHC.Base.String
    -> GHC.Types.Ordering
    -> GHC.Types.Ordering
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ GHC.Types.Ordering
                   Exercises.main151
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEqOrdering
                   GHC.Show.$fShowOrdering) -}
5f8eb32f2f4a329f8537211bc90706bd
  main151 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Exercises.main152) -}
069a6e11a420461aeb445f945149aed3
  main152 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Exercises.main153) -}
383228efbbf83f0f2528f9ecf7cc7179
  main153 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main36
                   Exercises.main154
                   GHC.Stack.Types.EmptyCallStack) -}
1f102968ab98f4bbd0ab60402c69f69e
  main154 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main156
                   Exercises.main31
                   Exercises.main156
                   Exercises.main155) -}
e452f30e23440b9d46b1a305619ba682
  main155 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 42#) -}
15e676b65752d0f51aa2d905d9877869
  main156 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 346#) -}
1652af197c6968af79b9afe7862605cb
  main157 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Exercises.main158
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds4
                   -> case ds of wild2 { (,) ds5 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (GHC.Stack.Types.srcLocFile loc)
                           (GHC.Stack.Types.srcLocStartLine loc)
                           (GHC.Stack.Types.srcLocStartCol loc)
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
eb6fb7fa78a9d337e46ff854aef3b701
  main158 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Exercises.main159) -}
e6976152a8bd851ca982f5cd5c97a40c
  main159 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Exercises.main160) -}
6017261bda6f356f9a1d2a63ebc47f64
  main16 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Exercises.main17) -}
b49a711a7247b7b26a6bcc5a755ae381
  main160 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Exercises.main161) -}
cf24223f767a6ad2d73da1374ef59fb3
  main161 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Exercises.main162) -}
9041f526de8097ac57a7b0977428a8f8
  main162 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main46
                   Exercises.main163
                   GHC.Stack.Types.EmptyCallStack) -}
f2e4b77874181ef0938390a3f7c243a6
  main163 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main165
                   Exercises.main44
                   Exercises.main165
                   Exercises.main164) -}
1bb6d380fe03ae4b8f62a547998a9dcf
  main164 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 52#) -}
01c9ea2294ea7871e0ddaf650eb7bac5
  main165 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 345#) -}
5321bb5e95f294a2319d2c4f2c205bce
  main166 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main168
                   Exercises.main167) -}
7b1c155aeb03099b8646f671b23eef1a
  main167 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "ses alphabetical order on release strings"#) -}
da4428763cc58c0372a02a7da3fd2847
  main168 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'U'#) -}
1feae65654fef2e4ec64be3ddc8a8723
  main169 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main171
                   Exercises.main170) -}
135302dd914051d123e5626c0ef00afe
  main17 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Exercises.main25
                   (GHC.Types.[] @ GHC.Types.Char)
                   Exercises.main21
                   Exercises.main18) -}
c92eb8df223b4021a89aceb3c4d8f571
  main170 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rdering, cont"#) -}
ac3b00e06921bd2df6ddc49e5f6b6ba7
  main171 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'O'#) -}
86a16a92bedf39f48ee3abc3e350cf69
  main172 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Exercises.main197
                   Exercises.main173
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
26b37bb0f49c888f5fc72769f12b2652
  main173 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main174
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
f063039654d92361c221a74944653438
  main174 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main175) -}
92e9bbebf374784b6e14dcb14f0003ef
  main175 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Exercises.main194
                   Exercises.main185
                   GHC.Types.False
                   Exercises.main176
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
109de5bd546026826b33bf258db8e9e1
  main176 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Exercises.main177) -}
47dbdf59d75b3dcac13ca17c93808e08
  main177 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Exercises.main179
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Types.GT
                   Exercises.main178) -}
bef64240040d32bc5c3910551b3a5040
  main178 :: GHC.Types.Ordering
  {- Unfolding: (Exercises.$w$ccompare
                   Exercises.charToInteger9
                   Exercises.charToInteger10
                   Exercises.charToInteger10
                   (GHC.Types.[] @ Exercises.NumberOrString)
                   Exercises.charToInteger9
                   Exercises.charToInteger10
                   Exercises.charToInteger10
                   Exercises.main145) -}
27db22b5a70da93af8596e36a5b70e97
  main179 ::
    GHC.Base.String
    -> GHC.Types.Ordering
    -> GHC.Types.Ordering
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ GHC.Types.Ordering
                   Exercises.main180
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEqOrdering
                   GHC.Show.$fShowOrdering) -}
dc47a760759414bca23874e905a8e23d
  main18 :: GHC.Base.Maybe Exercises.PhoneNumber
  {- Unfolding: (case Text.Trifecta.Parser.parseString
                        @ Exercises.PhoneNumber
                        Exercises.main20
                          `cast`
                        (Sym (Text.Trifecta.Parser.N:Parser[0] <Exercises.PhoneNumber>_R))
                        Text.Trifecta.Delta.$fMonoidDelta_$cmempty
                        Exercises.main19 of wild {
                   Text.Trifecta.Result.Success a
                   -> GHC.Base.Just @ Exercises.PhoneNumber a
                   Text.Trifecta.Result.Failure ipv
                   -> GHC.Base.Nothing @ Exercises.PhoneNumber }) -}
9f28c1a4f13526b191aec0bcec0df002
  main180 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Exercises.main181) -}
aa56d602ec06181c71ce34f3599f3237
  main181 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Exercises.main182) -}
d3e56631fbb9c9de4ab1fc0818798864
  main182 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main36
                   Exercises.main183
                   GHC.Stack.Types.EmptyCallStack) -}
055b85dcb3d90df77f66e3985d4df2f7
  main183 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main184
                   Exercises.main31
                   Exercises.main184
                   Exercises.main155) -}
1d264ad081cd208b533969a9e54b5862
  main184 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 342#) -}
59e57add9346b9a7d933301930c3b7f9
  main185 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Exercises.main186
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds4
                   -> case ds of wild2 { (,) ds5 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (GHC.Stack.Types.srcLocFile loc)
                           (GHC.Stack.Types.srcLocStartLine loc)
                           (GHC.Stack.Types.srcLocStartCol loc)
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
cd4fb408e87e7aedbfe28d917d76f4da
  main186 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Exercises.main187) -}
1af04e2f655c1c8dd0270082a5e48fb0
  main187 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Exercises.main188) -}
41f03f988095d4a662691d38ea55ef19
  main188 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Exercises.main189) -}
a16903501f138137b03524a410968c02
  main189 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Exercises.main190) -}
04d2174e143feac22509c58e5f221d07
  main19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "1-123-456-7890"#) -}
bd5bc86a67a654a543cf0f9a33558a89
  main190 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main46
                   Exercises.main191
                   GHC.Stack.Types.EmptyCallStack) -}
1f6d65b9f9331c6f7f3bc414980d5b0f
  main191 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main193
                   Exercises.main44
                   Exercises.main193
                   Exercises.main192) -}
29f7fda8cd3d019276a1435fb562ad99
  main192 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 47#) -}
1c748bc92d85893c9293209f985c1dec
  main193 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 341#) -}
689ba0db614f7562cc076393623c4808
  main194 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main196
                   Exercises.main195) -}
b70cef521fe62217c14235d54995f0ab
  main195 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "onsiders empty release field greater"#) -}
7078b16defdd1d92f8f86fb966ed0029
  main196 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'C'#) -}
4b0d93a0a627983d4f121f88f2ffc4af
  main197 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main171
                   Exercises.main198) -}
2549910475ae27e6eb41d8d392c8a66b
  main198 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rdering"#) -}
8ef6098153b75c69dfe760e372e0a145
  main199 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Exercises.main239
                   Exercises.main200
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
d39e67185b1df85aed8ffc94b6a0f752
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 (# s1, Exercises.main3 #)) -}
4dd1453330aa9380450dfbd72f5209c8
  main20 ::
    (Exercises.PhoneNumber
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Exercises.PhoneNumber
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(C1(C1(C1(U))))><L,U><S,U><S(LLLS),U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: Exercises.PhoneNumber
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: Exercises.PhoneNumber
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 case w5 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Exercises.$wparsePhone @ r w w1 w2 w3 w4 ww1 ww2 ww3 ww4 }) -}
924fab004c0e86eff8e728c7a253b101
  main200 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main201
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
ad586b2cd3ccaf3c8c070875ea13cd3b
  main201 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main202) -}
de54eae08da999be621ec0b8869bdf44
  main202 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Exercises.main237
                   Exercises.main228
                   GHC.Types.False
                   Exercises.main203
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
a077bd2af9ca57aee2f955fe36698911
  main203 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Exercises.main204) -}
642a74cf4244623873ddf69bd3065702
  main204 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Exercises.main221
                   (GHC.Types.[] @ GHC.Types.Char)
                   Exercises.main208
                   Exercises.main205) -}
ed6f5092e66efa275fd4449d776fa45f
  main205 :: GHC.Base.Maybe Exercises.SemVer
  {- Unfolding: (case Text.Trifecta.Parser.parseString
                        @ Exercises.SemVer
                        Exercises.main207
                          `cast`
                        (Sym (Text.Trifecta.Parser.N:Parser[0] <Exercises.SemVer>_R))
                        Text.Trifecta.Delta.$fMonoidDelta_$cmempty
                        Exercises.main206 of wild {
                   Text.Trifecta.Result.Success a
                   -> GHC.Base.Just @ Exercises.SemVer a
                   Text.Trifecta.Result.Failure ipv
                   -> GHC.Base.Nothing @ Exercises.SemVer }) -}
daa69075aea2613716b588071c436af4
  main206 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "1.0.0-x.7.z.92"#) -}
19267171683d6c381a815e9dce31ee15
  main207 ::
    (Exercises.SemVer
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Exercises.SemVer
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,A><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ r
                   (w :: Exercises.SemVer
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: Exercises.SemVer
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.$wparseSemVer @ r w1 w2 w3 w4 w5) -}
78d979ec3718eb98a9001968ad939ab0
  main208 :: GHC.Base.Maybe Exercises.SemVer
  {- Unfolding: (GHC.Base.Just
                   @ Exercises.SemVer
                   Exercises.main209) -}
c0b1e20ed30eb8959a5122fc72793e4b
  main209 :: Exercises.SemVer
  {- Unfolding: (Exercises.SemVer
                   Exercises.charToInteger9
                   Exercises.charToInteger10
                   Exercises.charToInteger10
                   Exercises.main210
                   (GHC.Types.[] @ Exercises.NumberOrString)) -}
c118b30f5691460727fd6abd17c6db18
  main21 :: GHC.Base.Maybe Exercises.PhoneNumber
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Exercises.PhoneNumber
                   Exercises.main_expectedPhoneNum) -}
19699169db5649e5f47432328cca1bb4
  main210 :: [Exercises.NumberOrString]
  {- Unfolding: (GHC.Types.:
                   @ Exercises.NumberOrString
                   Exercises.main219
                   Exercises.main211) -}
7acd1d896465af8657d1947d1cfae896
  main211 :: [Exercises.NumberOrString]
  {- Unfolding: (GHC.Types.:
                   @ Exercises.NumberOrString
                   Exercises.main218
                   Exercises.main212) -}
e0a7241a6dcde4f492f9e5dfcbb3b90d
  main212 :: [Exercises.NumberOrString]
  {- Unfolding: (GHC.Types.:
                   @ Exercises.NumberOrString
                   Exercises.main216
                   Exercises.main213) -}
6f549dfa676b3c8e9a2d6eb23a208595
  main213 :: [Exercises.NumberOrString]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Exercises.NumberOrString
                   Exercises.main214
                   (GHC.Types.[] @ Exercises.NumberOrString)) -}
e081f54c6ed47218eef444b058a50672
  main214 :: Exercises.NumberOrString
  {- HasNoCafRefs, Unfolding: (Exercises.NOSI Exercises.main215) -}
596276a67d85834a09f83fe3c84609d5
  main215 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (92) -}
531f8f2dca49bbce99c8bc218dca774c
  main216 :: Exercises.NumberOrString
  {- Unfolding: (Exercises.NOSS Exercises.main217) -}
cef5bcd751126f5043c3ebd7e6a582fc
  main217 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "z"#) -}
dab22b674eee59daddcac49e52027ee4
  main218 :: Exercises.NumberOrString
  {- HasNoCafRefs,
     Unfolding: (Exercises.NOSI Exercises.charToInteger3) -}
f885b842bf026c1e8d99d65f0773c820
  main219 :: Exercises.NumberOrString
  {- Unfolding: (Exercises.NOSS Exercises.main220) -}
e1f7939fe23f5416f9c04b8a24eb77f0
  main22 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7890#) -}
d8a3f25c197b184c4bde7cf77a003085
  main220 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x"#) -}
1b63e66a942799a946c0c1653a38fcb2
  main221 ::
    GHC.Base.String
    -> GHC.Base.Maybe Exercises.SemVer
    -> GHC.Base.Maybe Exercises.SemVer
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe Exercises.SemVer)
                   Exercises.main222
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Exercises.$s$fEqMaybe
                   Exercises.$s$fShowMaybe1) -}
e304ff93eda14dea2193dc4a1829e309
  main222 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Exercises.main223) -}
b20ed1583b3493542b1c66d84d1ad964
  main223 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Exercises.main224) -}
471c3078028004a1d666d1e5b5407902
  main224 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main36
                   Exercises.main225
                   GHC.Stack.Types.EmptyCallStack) -}
74b3b95361d7118f99c16bc77bbf9954
  main225 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main227
                   Exercises.main31
                   Exercises.main227
                   Exercises.main226) -}
3cc552420996913c1743b68c2491125a
  main226 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 34#) -}
a830c25eb7ea2925805172ab4d2d6463
  main227 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 338#) -}
0eacd6653fd70eb27f6e3c3ad37c4b3e
  main228 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Exercises.main229
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds4
                   -> case ds of wild2 { (,) ds5 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (GHC.Stack.Types.srcLocFile loc)
                           (GHC.Stack.Types.srcLocStartLine loc)
                           (GHC.Stack.Types.srcLocStartCol loc)
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
daa3ac24fd2e97a71845b59a5d5eb271
  main229 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Exercises.main230) -}
d9b92e82049e5ff64c9ee24c46147a14
  main23 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 456#) -}
4290b77c7d75b718ecc9223e3b665f45
  main230 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Exercises.main231) -}
f853a22c2a3aeeb912b43673eab59658
  main231 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Exercises.main232) -}
ca717323393ce61ec577bf9a8dbd8134
  main232 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Exercises.main233) -}
2b60ca1b3520ebd32cf5700aacbb1d97
  main233 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main46
                   Exercises.main234
                   GHC.Stack.Types.EmptyCallStack) -}
16dae85ad235f86377d984c78baeea5a
  main234 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main236
                   Exercises.main44
                   Exercises.main236
                   Exercises.main235) -}
cacb375030f806d5b26dbbab243b67bb
  main235 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 29#) -}
853dfe2501f1ef17f5af38255a3a9c46
  main236 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 335#) -}
e44a35da732618ae731e029b454a3db6
  main237 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main49
                   Exercises.main238) -}
a551de1838ee44a82e68753c8269a4d5
  main238 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "arses with release"#) -}
74a3b1d91b2b2bd2efae0a239d55a394
  main239 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main49
                   Exercises.main240) -}
3741f6176b7e09b4d6a1c203ea3b48ec
  main24 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 123#) -}
0b907f4a822ce7d65e548df5bf25f505
  main240 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "arsing, cont"#) -}
0f028d050ce47cbda36fbbfec219035f
  main241 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Exercises.main268
                   Exercises.main242
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
f24bff4a4b26c051ef06a43095f44bc8
  main242 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main243
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
c76b3b05ce3f2c9e88e4585cb030cc0e
  main243 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main244) -}
6980a9a5cfd2b26d3a134c6d9e140e72
  main244 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Exercises.main266
                   Exercises.main257
                   GHC.Types.False
                   Exercises.main245
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
599e4e4d05663f020bbed1757ad0053f
  main245 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Exercises.main246) -}
e93beae10b334f1af48ee94d970bfad4
  main246 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Exercises.main251
                   (GHC.Types.[] @ GHC.Types.Char)
                   Exercises.main249
                   Exercises.main247) -}
58adc7405013714348e249ab4d52719c
  main247 :: GHC.Base.Maybe Exercises.SemVer
  {- Unfolding: (case Text.Trifecta.Parser.parseString
                        @ Exercises.SemVer
                        Exercises.main207
                          `cast`
                        (Sym (Text.Trifecta.Parser.N:Parser[0] <Exercises.SemVer>_R))
                        Text.Trifecta.Delta.$fMonoidDelta_$cmempty
                        Exercises.main248 of wild {
                   Text.Trifecta.Result.Success a
                   -> GHC.Base.Just @ Exercises.SemVer a
                   Text.Trifecta.Result.Failure ipv
                   -> GHC.Base.Nothing @ Exercises.SemVer }) -}
caa4af05a82357dbff4a4eea1a52e8f9
  main248 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "2.1.1"#) -}
905092ab1aa8fee9f50085e2aacfa19c
  main249 :: GHC.Base.Maybe Exercises.SemVer
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ Exercises.SemVer Exercises.main250) -}
2d6d243d68d8a178564fd6e5ff11dfb1
  main25 ::
    GHC.Base.String
    -> GHC.Base.Maybe Exercises.PhoneNumber
    -> GHC.Base.Maybe Exercises.PhoneNumber
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe Exercises.PhoneNumber)
                   Exercises.main26
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Exercises.$s$fEqMaybe1
                   Exercises.$s$fShowMaybe) -}
facf9d0df06c123e34b9792cb2a5ca42
  main250 :: Exercises.SemVer
  {- HasNoCafRefs,
     Unfolding: (Exercises.SemVer
                   Exercises.charToInteger8
                   Exercises.charToInteger9
                   Exercises.charToInteger9
                   (GHC.Types.[] @ Exercises.NumberOrString)
                   (GHC.Types.[] @ Exercises.NumberOrString)) -}
d725b366283d0f24deb79f72b44b3625
  main251 ::
    GHC.Base.String
    -> GHC.Base.Maybe Exercises.SemVer
    -> GHC.Base.Maybe Exercises.SemVer
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe Exercises.SemVer)
                   Exercises.main252
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Exercises.$s$fEqMaybe
                   Exercises.$s$fShowMaybe1) -}
e6dd8c4e1e072455bdc111d9c0ac00c4
  main252 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Exercises.main253) -}
71ac7c9dca3cd24193be2aa40ab91e19
  main253 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Exercises.main254) -}
f472cc58ff811a1bb21973df43e0dd5e
  main254 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main36
                   Exercises.main255
                   GHC.Stack.Types.EmptyCallStack) -}
4b3b5bc1c39bca8e2702fabf92466524
  main255 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main256
                   Exercises.main31
                   Exercises.main256
                   Exercises.main226) -}
0f190926e97dac8c02d193fd3bbc8ada
  main256 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 330#) -}
dd259938bfca4cff163e0fd20de601f6
  main257 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Exercises.main258
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds4
                   -> case ds of wild2 { (,) ds5 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (GHC.Stack.Types.srcLocFile loc)
                           (GHC.Stack.Types.srcLocStartLine loc)
                           (GHC.Stack.Types.srcLocStartCol loc)
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
2f78c6380f474682b59d9da0e6b78364
  main258 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Exercises.main259) -}
4b2167327328f64fca9ee2c141a5de0a
  main259 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Exercises.main260) -}
2d1bb7c3b2c09c47b972b9fcfa602b06
  main26 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Exercises.main27) -}
e0a6e7c6a6205a5fba1ddf466be70599
  main260 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Exercises.main261) -}
5864524a3825e754f1bce4bfb75c8dcb
  main261 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Exercises.main262) -}
2831ef5b70b62a7cc7af8ae3ef0f8179
  main262 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main46
                   Exercises.main263
                   GHC.Stack.Types.EmptyCallStack) -}
95c45306e1079627f29531cc09cbfbab
  main263 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main265
                   Exercises.main44
                   Exercises.main265
                   Exercises.main264) -}
b276244aa8700886371add6280da583d
  main264 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 44#) -}
d42e23676bbafd38876cd22e9cd7b039
  main265 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 327#) -}
fbc212fadcb210a32f7509274713897a
  main266 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main49
                   Exercises.main267) -}
09b2fa2a65873e00970268b61100ab40
  main267 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "arses with no release or metadata"#) -}
0cd43e0f9433ffafb786c7f59b30370c
  main268 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main49
                   Exercises.main269) -}
8e36974f23372947c73ad2754f200e3d
  main269 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "arsing"#) -}
82ea32473d162b868571aace2a7deaa3
  main27 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Exercises.main28) -}
bb1a535a6ad3c1acd095c8c9d1b91123
  main28 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main36
                   Exercises.main29
                   GHC.Stack.Types.EmptyCallStack) -}
c11d5cdeecabd476f9d65ebc3147a217
  main29 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main32
                   Exercises.main31
                   Exercises.main32
                   Exercises.main30) -}
c9c3e7e06406b3e1222d1742d63cbf01
  main3 :: ((), [Test.Hspec.Core.Tree.SpecTree ()])
  {- Unfolding: ((GHC.Tuple.(), Exercises.main4)) -}
74d31bb42008433c241ff07ba2ae4c8a
  main30 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 43#) -}
17e5a983fad1bc70045577c18d96519e
  main31 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 7#) -}
58efe641b50b818c3f6254acd78eab4d
  main32 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 374#) -}
5c847af21e474f81c178230473f59c88
  main33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Exercises.hs"#) -}
829b9e7b197ae3914e1cbd032d2d2ff6
  main34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Exercises"#) -}
4aba558362ab35a8777816f8c1e61c13
  main35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "exercises-0.1.0.0-Dlc12BTUrEQK6RgYfgxVHF"#) -}
89232f398c674d509c68689e1cb3efc0
  main36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "shouldBe"#) -}
0081d2de4e69d2ec464544598064f5b9
  main37 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Exercises.main38
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds4
                   -> case ds of wild2 { (,) ds5 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds6 ds7 ds3 ds8 ds9 ds10 ds11 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds6 ds7 ds3 ds8 ds9 ds10 ds11 ->
                            ds8 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds6 ds7 ds3 ds8 ds9 ds10 ds11 ->
                            ds9 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
27f30c71c8b0919ea383b0a6e8586789
  main38 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Exercises.main39) -}
c345ea37110f2d6241aa8485a23eef57
  main39 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Exercises.main40) -}
4c23383a4b9cac43366a4e50d467207f
  main4 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Exercises.main241
                   Exercises.main5) -}
2a05ae6560ac30a49fe56164641e9344
  main40 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Exercises.main41) -}
6330de219b142bb55b5b3b5304c57b13
  main41 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Exercises.main42) -}
ac5312eaf28607c82a43f8ddffe1a254
  main42 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main46
                   Exercises.main43
                   GHC.Stack.Types.EmptyCallStack) -}
b941d7c6e9ebe3e66bd04601d1bd3a9a
  main43 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main45
                   Exercises.main44
                   Exercises.main45
                   Exercises.main30) -}
f613b07233a3f6f3cead0f28cf1289db
  main44 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5#) -}
e0be027d75c460b1e08952f4e0a8c744
  main45 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 370#) -}
616bcd0a40c6ca0d6d56f79d2a64d5e3
  main46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "it"#) -}
e94961c02ac0837848f4cd3085fe3db4
  main47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main49
                   Exercises.main48) -}
19f01df7f0396512327fb9d1ed6fa81d
  main48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "arses a number with country code"#) -}
2830301153a1e44e8eaca32e973e5a7b
  main49 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'P'#) -}
0659fc8fe8ccdde16fd388d315eb57b3
  main5 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Exercises.main199
                   Exercises.main6) -}
d0886ad549cbe7962f55660bbc6ecca5
  main50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main49
                   Exercises.main51) -}
30710d5a80e68dd1b5360034a3e44cb5
  main51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hone numbers 3"#) -}
ac4974633257b94cf42bde3c005c95b4
  main52 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Exercises.main77
                   Exercises.main53
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
47384c51c6880da487460005c0a62b5c
  main53 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main54
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
caa7ea489bc8cd1d0bf17c7b6059ae87
  main54 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main55) -}
26167e532ac6a0d4a873e78504f88911
  main55 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Exercises.main75
                   Exercises.main66
                   GHC.Types.False
                   Exercises.main56
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
c404c43a9abd149f1d967f1108f454c9
  main56 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Exercises.main57) -}
655d7f31a615392faa5219c8446d4a46
  main57 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Exercises.main60
                   (GHC.Types.[] @ GHC.Types.Char)
                   Exercises.main21
                   Exercises.main58) -}
c967ebfa756d06e2feb3f4f134a8db7f
  main58 :: GHC.Base.Maybe Exercises.PhoneNumber
  {- Unfolding: (case Text.Trifecta.Parser.parseString
                        @ Exercises.PhoneNumber
                        Exercises.main20
                          `cast`
                        (Sym (Text.Trifecta.Parser.N:Parser[0] <Exercises.PhoneNumber>_R))
                        Text.Trifecta.Delta.$fMonoidDelta_$cmempty
                        Exercises.main59 of wild {
                   Text.Trifecta.Result.Success a
                   -> GHC.Base.Just @ Exercises.PhoneNumber a
                   Text.Trifecta.Result.Failure ipv
                   -> GHC.Base.Nothing @ Exercises.PhoneNumber }) -}
e36724814a1e1122d3905d67718b97e3
  main59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "(123) 456-7890"#) -}
c4ad424fd3693c3c8be577ae1e5c8c8c
  main6 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Exercises.main172
                   Exercises.main7) -}
1c1004d7839b1646afe909a7fa0a53f0
  main60 ::
    GHC.Base.String
    -> GHC.Base.Maybe Exercises.PhoneNumber
    -> GHC.Base.Maybe Exercises.PhoneNumber
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe Exercises.PhoneNumber)
                   Exercises.main61
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Exercises.$s$fEqMaybe1
                   Exercises.$s$fShowMaybe) -}
eb1fc6a0b684da22484eaa51f2531e93
  main61 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Exercises.main62) -}
5c095cf36840d736ed50ac918db88c8f
  main62 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Exercises.main63) -}
c5018475f4b3b22f475447e884c9ea13
  main63 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main36
                   Exercises.main64
                   GHC.Stack.Types.EmptyCallStack) -}
2d1b7fd1b61dd069e29cb392bb8c7631
  main64 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main65
                   Exercises.main31
                   Exercises.main65
                   Exercises.main30) -}
4d7e08160392c215200ce22f87220005
  main65 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 367#) -}
2690ffe844fb1b7f77804c7eb4c2a462
  main66 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Exercises.main67
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds4
                   -> case ds of wild2 { (,) ds5 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (GHC.Stack.Types.srcLocFile loc)
                           (GHC.Stack.Types.srcLocStartLine loc)
                           (GHC.Stack.Types.srcLocStartCol loc)
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
bfc16ad05437ca0852793573eb3d86c4
  main67 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Exercises.main68) -}
435875c5410817a80bbc2a1c47343d5a
  main68 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Exercises.main69) -}
e0aab455421ee7f1553f60216ff00408
  main69 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Exercises.main70) -}
e4260171e2b9e670d0d663be802e38be
  main7 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Exercises.main132
                   Exercises.main8) -}
dced92f45a534b3e56e191fddb38fa63
  main70 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Exercises.main71) -}
b0d9bf8744c78e60f4d16cf17c7fa6f3
  main71 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main46
                   Exercises.main72
                   GHC.Stack.Types.EmptyCallStack) -}
a94f5f6ab62ed7e37190ee4e8b49c786
  main72 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main74
                   Exercises.main44
                   Exercises.main74
                   Exercises.main73) -}
39884bae6b9c63959cc21a991abf374f
  main73 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 59#) -}
a04962bc2674aa0db8660c2955c3d527
  main74 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 363#) -}
b41f60d9cefb9bdc23a7d8e5e0de39ea
  main75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main49
                   Exercises.main76) -}
36cffe76dd6bf8233bb7f7a471c2b26a
  main76 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "arses a number with parentheses around area code"#) -}
21da22d0d078f0554153b37ded393bc7
  main77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Exercises.main49
                   Exercises.main78) -}
04f3c9987a6067c1a62c5aaf616eba41
  main78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hone numbers 2"#) -}
eb0798a028b0db506d93cdb3eb5807f1
  main79 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Exercises.main104
                   Exercises.main80
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
eba63fb661c79ff1dce4dcf878510769
  main8 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Exercises.main106
                   Exercises.main9) -}
d5c4e48c81b670e6ece1676af8e97c7a
  main80 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main81
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
d033a9cfce1f1717a323f3f230925995
  main81 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Exercises.main82) -}
6a4af41167676de00b60eb5221f3570a
  main82 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Exercises.main102
                   Exercises.main93
                   GHC.Types.False
                   Exercises.main83
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
44a7a059cc5e17a4f689d427c02522c9
  main83 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Exercises.main84) -}
0ff8a45c4970d8ca28861b88f5e31312
  main84 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Exercises.main87
                   (GHC.Types.[] @ GHC.Types.Char)
                   Exercises.main21
                   Exercises.main85) -}
0216935308d5998c51c9e8cfa367a099
  main85 :: GHC.Base.Maybe Exercises.PhoneNumber
  {- Unfolding: (case Text.Trifecta.Parser.parseString
                        @ Exercises.PhoneNumber
                        Exercises.main20
                          `cast`
                        (Sym (Text.Trifecta.Parser.N:Parser[0] <Exercises.PhoneNumber>_R))
                        Text.Trifecta.Delta.$fMonoidDelta_$cmempty
                        Exercises.main86 of wild {
                   Text.Trifecta.Result.Success a
                   -> GHC.Base.Just @ Exercises.PhoneNumber a
                   Text.Trifecta.Result.Failure ipv
                   -> GHC.Base.Nothing @ Exercises.PhoneNumber }) -}
f83f6479550d4b528c30a677e0bc69c9
  main86 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "1234567890"#) -}
c998707fdb47ee10d5e95530fd9371dc
  main87 ::
    GHC.Base.String
    -> GHC.Base.Maybe Exercises.PhoneNumber
    -> GHC.Base.Maybe Exercises.PhoneNumber
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe Exercises.PhoneNumber)
                   Exercises.main88
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Exercises.$s$fEqMaybe1
                   Exercises.$s$fShowMaybe) -}
d5581cba9d8860990d4798e5a7123d3c
  main88 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Exercises.main89) -}
447c07906496108810e001ea257b0483
  main89 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Exercises.main90) -}
ff2fdd7c0292174a464058cfae420de0
  main9 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Exercises.main79
                   Exercises.main10) -}
d99d611191e37a6c3a90ca155029c008
  main90 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main36
                   Exercises.main91
                   GHC.Stack.Types.EmptyCallStack) -}
c49c5a999c210384437d32d697c88aba
  main91 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main92
                   Exercises.main31
                   Exercises.main92
                   Exercises.main30) -}
934f90092209cf5d3c7f92f6360a216e
  main92 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 360#) -}
499b715acd28d58cb91426a699cd7cdd
  main93 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Exercises.main94
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds4
                   -> case ds of wild2 { (,) ds5 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (GHC.Stack.Types.srcLocFile loc)
                           (GHC.Stack.Types.srcLocStartLine loc)
                           (GHC.Stack.Types.srcLocStartCol loc)
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
23f18c9c347b884787baabfa0a55b903
  main94 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Exercises.main95) -}
8a6e38e6af6d1e56df60335a32d34f94
  main95 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Exercises.main96) -}
c5bb8c54c0029592efafbe57771772ad
  main96 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Exercises.main97) -}
d1f47f1b891e702b502410059d32d7a1
  main97 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Exercises.main98) -}
199337937c4107310d80db2649535d3b
  main98 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Exercises.main46
                   Exercises.main99
                   GHC.Stack.Types.EmptyCallStack) -}
978334f4de3f0677be553fa36de72265
  main99 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Exercises.main35
                   Exercises.main34
                   Exercises.main33
                   Exercises.main101
                   Exercises.main44
                   Exercises.main101
                   Exercises.main100) -}
6e2f212e53503a431f71b80bd8802c08
  main_expectedPhoneNum :: Exercises.PhoneNumber
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Exercises.PhoneNumber
                   Exercises.main24
                   Exercises.main23
                   Exercises.main22) -}
2bb4bf55a1efae72f6155d04ecaeacc7
  maybeSuccess :: Text.Trifecta.Result.Result a -> GHC.Base.Maybe a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Text.Trifecta.Result.Result a) ->
                 case ds of wild {
                   Text.Trifecta.Result.Success a1 -> GHC.Base.Just @ a a1
                   Text.Trifecta.Result.Failure ipv -> GHC.Base.Nothing @ a }) -}
2b9959777e8c36361363fd0ad706e651
  negativeBase10Integer ::
    Text.Trifecta.Parser.Parser GHC.Integer.Type.Integer
  {- Arity: 6,
     Strictness: <L,A><L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U><S,U><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.negativeBase10Integer1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0]
                          <GHC.Integer.Type.Integer>_R)) -}
1d9376cb479ccefc2438350503b84aaa
  negativeBase10Integer1 ::
    (GHC.Integer.Type.Integer
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Integer.Type.Integer
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,A><L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U><S,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: GHC.Integer.Type.Integer
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: GHC.Integer.Type.Integer
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 case w5 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Exercises.$wnegativeBase10Integer
                   @ r
                   w1
                   w2
                   w3
                   w4
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
0a938f9aa6b995eba030cd8d0a89d86d
  parseActivity ::
    Data.Time.Calendar.Days.Day
    -> Text.Trifecta.Parser.Parser Exercises.Activity
  {- Arity: 7,
     Strictness: <L,U><L,A><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseActivity1
                  `cast`
                (<Data.Time.Calendar.Days.Day>_R
                 ->_R Sym (Text.Trifecta.Parser.N:Parser[0]
                               <Exercises.Activity>_R)) -}
94992e2447113e3ec61249552b48e598
  parseActivity1 ::
    Data.Time.Calendar.Days.Day
    -> forall r.
       (Exercises.Activity
        -> Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.Err
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Exercises.Activity
           -> Data.Set.Base.Set GHC.Base.String
           -> Text.Trifecta.Delta.Delta
           -> Data.ByteString.Internal.ByteString
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.ErrInfo
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> Text.Trifecta.Delta.Delta
       -> Data.ByteString.Internal.ByteString
       -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <L,U><L,A><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, True)
                (\ (w :: Data.Time.Calendar.Days.Day)
                   @ r
                   (w1 :: Exercises.Activity
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Exercises.Activity
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w5 :: Text.Trifecta.Delta.Delta)
                   (w6 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.$wparseActivity w @ r w2 w3 w4 w5 w6) -}
ad093d2272015805a286b35683d3064e
  parseActivityName :: Text.Trifecta.Parser.Parser Exercises.Name
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseActivityName1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <[GHC.Types.Char]>_R)) -}
0b9125f2bbcc4aa5a3f44ebb3f0a1c3d
  parseActivityName1 ::
    ([GHC.Types.Char]
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> ([GHC.Types.Char]
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U> -}
4b1531e0749d33c4f7870b554b4541f3
  parseActivityNameEnd :: Text.Trifecta.Parser.Parser ()
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseActivityNameEnd1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R)) -}
bcecbd9c763b6cd5e181f2582c0db096
  parseActivityNameEnd1 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U>,
     Unfolding: (\ @ r
                   (eo :: ()
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ee :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (co :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ce :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (d :: Text.Trifecta.Delta.Delta)
                   (bs :: Data.ByteString.Internal.ByteString) ->
                 Text.Trifecta.Parser.$fAlternativeParser2
                   @ ()
                   @ ()
                   Exercises.parseActivityNameEnd12
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <() -> ()>_R))
                   Exercises.parseActivityNameEnd6
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))
                   @ r
                   eo
                   (\ (e :: Text.Trifecta.Result.Err) ->
                    let {
                      lvl105 :: Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
                      = ee
                          (case e of wild4 { Text.Trifecta.Result.Err md mds mes delta1 ->
                           Text.Trifecta.Result.Err
                             md
                             (case md of wild { DEFAULT -> mds })
                             (Text.Trifecta.Result.$fMonoidErr_$sunion
                                mes
                                (Data.Set.Base.Tip @ [GHC.Types.Char]))
                             delta1 })
                    } in
                    Text.Trifecta.Parser.$fAlternativeParser2
                      @ ()
                      @ ()
                      Exercises.parseActivityNameEnd10
                        `cast`
                      (Sym (Text.Trifecta.Parser.N:Parser[0] <() -> ()>_R))
                      Exercises.parseActivityNameEnd2
                        `cast`
                      (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))
                      @ r
                      (\ (a1 :: ()) (e' :: Text.Trifecta.Result.Err)[OneShot] ->
                       eo a1 (Text.Trifecta.Result.$fMonoidErr_$c<> e e'))
                      (\ (e' :: Text.Trifecta.Result.Err) ->
                       ee (Text.Trifecta.Result.$fMonoidErr_$c<> e e'))
                      co
                      (\ (ds4 :: Text.Trifecta.Result.ErrInfo) -> lvl105)
                      d
                      bs)
                   co
                   ce
                   d
                   bs) -}
001dfa242906b9efee18192336180916
  parseActivityNameEnd10 ::
    ((() -> ())
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)
    -> ((() -> ())
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1
  {- Arity: 6,
     Unfolding: (\ @ r1
                   (eo :: (() -> ())
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)[OneShot]
                   (ee :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)[OneShot]
                   (co :: (() -> ())
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)[OneShot]
                   (eta :: Text.Trifecta.Result.ErrInfo
                           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)[OneShot]
                   (eta1 :: Text.Trifecta.Delta.Delta)[OneShot]
                   (eta2 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 let {
                   lvl105 :: Data.Set.Base.Set GHC.Base.String
                             -> Text.Trifecta.Delta.Delta
                             -> Data.ByteString.Internal.ByteString
                             -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1
                   = co (GHC.Base.breakpoint @ ())
                 } in
                 Text.Trifecta.Parser.$wmanyAccum
                   @ GHC.Types.Char
                   Exercises.parseActivityNameEnd_ds
                   Exercises.parseActivityNameEnd11
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Char>_R))
                   @ r1
                   (\ (ds4 :: [GHC.Types.Char])[OneShot] ->
                    eo (GHC.Base.breakpoint @ ()))
                   (\ (ds4 :: [GHC.Types.Char]) -> lvl105)
                   eta
                   eta1
                   eta2) -}
72d1709c0d393db35558e75cffcfba59
  parseActivityNameEnd11 ::
    (GHC.Types.Char
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,A><L,1*C1(U)><L,C(C1(C(U)))><L,A><S,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: GHC.Types.Char
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: GHC.Types.Char
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 case w5 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Exercises.$wparseAnyWhitespaceThenComment
                   @ r
                   w1
                   w2
                   w4
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
d65de08c7efe85c9a79444f587ef1d63
  parseActivityNameEnd12 ::
    ((() -> ())
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)
    -> ((() -> ())
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1
  {- Arity: 6 -}
ac79930df3895d7ef9568811d6c490c1
  parseActivityNameEnd2 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fApplicativeParser2
                   @ ()
                   @ ()
                   Exercises.parseActivityNameEnd5
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))
                   Exercises.parseActivityNameEnd3
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))) -}
a6d02a2c509493d844ac89856e314fe1
  parseActivityNameEnd3 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,1*C1(U)><L,A><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.$wparseComment @ r w w2 w3 w4 w5) -}
da01d8e6501f27c03517b8f6e690aa31
  parseActivityNameEnd4 ::
    (GHC.Types.Char
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,A><L,1*C1(U)><L,C(C1(C(U)))><L,A><S,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: GHC.Types.Char
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: GHC.Types.Char
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 case w5 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Exercises.$wparseComment1 @ r w1 w2 w4 ww1 ww2 ww3 ww4 }) -}
2e2daac51be919790ed5596cd78d08b3
  parseActivityNameEnd5 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fApplicativeParser2
                   @ [GHC.Types.Char]
                   @ ()
                   Exercises.parseActivityNameEnd7
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <[GHC.Types.Char]>_R))
                   Exercises.parseActivityNameEnd6
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))) -}
9961646a0174764f875bb62c9122f59d
  parseActivityNameEnd6 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,A><L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (6, True, True)
                (\ @ r
                   (eo :: ()
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ds :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ds4 :: ()
                           -> Data.Set.Base.Set GHC.Base.String
                           -> Text.Trifecta.Delta.Delta
                           -> Data.ByteString.Internal.ByteString
                           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ds5 :: Text.Trifecta.Result.ErrInfo
                           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ds3 :: Text.Trifecta.Delta.Delta)
                   (ds6 :: Data.ByteString.Internal.ByteString) ->
                 eo GHC.Tuple.() Text.Trifecta.Result.$fMonoidErr_$cmempty) -}
d3a6119c85609d103ff42402a614f247
  parseActivityNameEnd7 ::
    ([GHC.Types.Char]
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> ([GHC.Types.Char]
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Exercises.parseActivityNameEnd9
                   Exercises.parseActivityNameEnd8) -}
146ba9f7e15e1df78f65eaa6f95c2d7e
  parseActivityNameEnd8 ::
    [Text.Trifecta.Parser.Parser GHC.Types.Char]
  {- Unfolding: (case Exercises.$wxs 2# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (Text.Trifecta.Parser.Parser GHC.Types.Char)
                   ww1
                   ww2 }) -}
3d1926c1c7a2396c24e48fb01cafa055
  parseActivityNameEnd9 ::
    [Text.Trifecta.Parser.Parser GHC.Types.Char]
    -> forall r.
       ([GHC.Types.Char]
        -> Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.Err
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> ([GHC.Types.Char]
           -> Data.Set.Base.Set GHC.Base.String
           -> Text.Trifecta.Delta.Delta
           -> Data.ByteString.Internal.ByteString
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.ErrInfo
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> Text.Trifecta.Delta.Delta
       -> Data.ByteString.Internal.ByteString
       -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U> -}
86c03cecbab0d412c08a6ddd44e8ecff
  parseActivityNameEnd_ds ::
    GHC.Types.Char -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds4 :: GHC.Types.Char) (ds5 :: [GHC.Types.Char]) ->
                 GHC.Types.[] @ GHC.Types.Char) -}
e36df82143261ed739f7d24688378946
  parseAnyWhitespaceThenComment :: Text.Trifecta.Parser.Parser ()
  {- Arity: 6,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseAnyWhitespaceThenComment1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R)) -}
1b2cf92153ea00cbe21f097aaa67c025
  parseAnyWhitespaceThenComment1 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fApplicativeParser2
                   @ ()
                   @ ()
                   Exercises.parseAnyWhitespaceThenComment2
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))
                   Exercises.parseActivityNameEnd2
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))) -}
06e133ba214b20b24eaee04b0e9dcb74
  parseAnyWhitespaceThenComment2 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,1*C1(U)><L,A><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.$wparseAnyWhitespaceThenComment1 @ r w w2 w3 w4 w5) -}
c8d6491ee53eefbd8b641b737d72aa3d
  parseAreaCode ::
    Text.Trifecta.Parser.Parser Exercises.NumberingPlanArea
  {- Arity: 6,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseAreaCode1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Int>_R)) -}
a95b2133ece05002e63544de18434fe8
  parseAreaCode1 ::
    (GHC.Types.Int
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Int
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fApplicativeParser1
                   @ GHC.Types.Int
                   @ ()
                   Exercises.parseAreaCode3
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Int>_R))
                   Exercises.parseAreaCode2
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))) -}
ee7881630e5fa0b65075893b4beb0050
  parseAreaCode2 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6, Strictness: <L,C(U)><L,A><L,C(U)><L,U><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.$wparseAreaCode @ r w w2 w3 w4 w5) -}
02638f01b9c806dd8260dfad8837a954
  parseAreaCode3 ::
    (GHC.Types.Int
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Int
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Exercises.parseAreaCode7
                   @ GHC.Types.Int
                   Exercises.parseAreaCode4
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Int>_R))) -}
0655fd990b26b5efbff01355ddc59552
  parseAreaCode4 ::
    (GHC.Types.Int
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Int
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6, Strictness: <L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))>,
     Unfolding: (\ @ r
                   (eo :: GHC.Types.Int
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ee :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (co :: GHC.Types.Int
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (eta :: Text.Trifecta.Result.ErrInfo
                           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (eta1 :: Text.Trifecta.Delta.Delta)
                   (eta2 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.parseAreaCode6
                   Exercises.parseAreaCode5
                   @ r
                   (\ (x4 :: [GHC.Types.Char]) -> eo (Exercises.$sread1 x4))
                   ee
                   (\ (x4 :: [GHC.Types.Char]) -> co (Exercises.$sread1 x4))
                   eta
                   eta1
                   eta2) -}
ec690fc4f0a006dc4bb6ae463d86cea0
  parseAreaCode5 :: [Text.Trifecta.Parser.Parser GHC.Types.Char]
  {- Unfolding: (case Exercises.$wxs1 3# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (Text.Trifecta.Parser.Parser GHC.Types.Char)
                   ww1
                   ww2 }) -}
4d130a816aa608ca200c69fc05f54a5e
  parseAreaCode6 ::
    [Text.Trifecta.Parser.Parser GHC.Types.Char]
    -> forall r.
       ([GHC.Types.Char]
        -> Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.Err
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> ([GHC.Types.Char]
           -> Data.Set.Base.Set GHC.Base.String
           -> Text.Trifecta.Delta.Delta
           -> Data.ByteString.Internal.ByteString
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.ErrInfo
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> Text.Trifecta.Delta.Delta
       -> Data.ByteString.Internal.ByteString
       -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U> -}
6600bc2def1691a66a0d27c6c562036c
  parseAreaCode7 ::
    Text.Trifecta.Parser.Parser a
    -> forall r.
       (a
        -> Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.Err
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (a
           -> Data.Set.Base.Set GHC.Base.String
           -> Text.Trifecta.Delta.Delta
           -> Data.ByteString.Internal.ByteString
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.ErrInfo
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> Text.Trifecta.Delta.Delta
       -> Data.ByteString.Internal.ByteString
       -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <L,C(C1(C1(C1(C1(C1(U))))))><L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U>,
     Unfolding: (\ @ a
                   (p :: Text.Trifecta.Parser.Parser a)
                   @ r
                   (eta :: a
                           -> Text.Trifecta.Result.Err
                           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (eta1 :: Text.Trifecta.Result.Err
                            -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (eta2 :: a
                            -> Data.Set.Base.Set GHC.Base.String
                            -> Text.Trifecta.Delta.Delta
                            -> Data.ByteString.Internal.ByteString
                            -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (eta4 :: Text.Trifecta.Result.ErrInfo
                            -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (eta5 :: Text.Trifecta.Delta.Delta)
                   (eta6 :: Data.ByteString.Internal.ByteString) ->
                 Text.Trifecta.Parser.$fAlternativeParser2
                   @ ()
                   @ a
                   (\ @ r1
                      (eo :: (() -> a)
                             -> Text.Trifecta.Result.Err
                             -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)[OneShot]
                      (ee :: Text.Trifecta.Result.Err
                             -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)[OneShot]
                      (co :: (() -> a)
                             -> Data.Set.Base.Set GHC.Base.String
                             -> Text.Trifecta.Delta.Delta
                             -> Data.ByteString.Internal.ByteString
                             -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)[OneShot]
                      (eta7 :: Text.Trifecta.Result.ErrInfo
                               -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)[OneShot]
                      (eta8 :: Text.Trifecta.Delta.Delta)[OneShot]
                      (eta9 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                    Text.Trifecta.Parser.$fAlternativeParser2
                      @ a
                      @ a
                      (Exercises.parseAreaCode9 @ a)
                        `cast`
                      (Sym (Text.Trifecta.Parser.N:Parser[0] <a -> a>_R))
                      p
                      @ r1
                      (\ (x4 :: a) -> eo (\ (ds :: ()) -> x4))
                      ee
                      (\ (x4 :: a) -> co (\ (ds :: ()) -> x4))
                      eta7
                      eta8
                      eta9)
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <() -> a>_R))
                   Exercises.parseAreaCode8
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))
                   @ r
                   eta
                   eta1
                   eta2
                   eta4
                   eta5
                   eta6) -}
f45d71bf5c0917621ff2542df1eb378c
  parseAreaCode8 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,1*C1(C1(U))><L,A><L,C(C1(C(U)))><L,A><S,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 case w5 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Exercises.$wlvl @ r w w2 w4 ww1 ww2 ww3 ww4 }) -}
d8667c711a5fca928fce0540ebfd5701
  parseAreaCode9 ::
    ((a -> a)
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)
    -> ((a -> a)
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1
  {- Arity: 6,
     Unfolding: (\ @ a
                   @ r1
                   (eo :: (a -> a)
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)[OneShot]
                   (ee :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)[OneShot]
                   (co :: (a -> a)
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)[OneShot]
                   (eta :: Text.Trifecta.Result.ErrInfo
                           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1)[OneShot]
                   (eta1 :: Text.Trifecta.Delta.Delta)[OneShot]
                   (eta2 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 case eta2 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 let {
                   lvl105 :: Data.Set.Base.Set GHC.Base.String
                             -> Text.Trifecta.Delta.Delta
                             -> Data.ByteString.Internal.ByteString
                             -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r1
                   = co (GHC.Base.breakpoint @ a)
                 } in
                 Exercises.$wlvl1
                   @ r1
                   (\ (ds :: ())[OneShot] -> eo (GHC.Base.breakpoint @ a))
                   (\ (ds :: ()) -> lvl105)
                   eta1
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
f124b18c2e5be6e47694e21d58c25c6e
  parseAreaCode_ds :: Text.Trifecta.Parser.Parser GHC.Types.Char
62fcebdf1bd5de9c601e6bd31999f015
  parseComment :: Text.Trifecta.Parser.Parser ()
  {- Arity: 6,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseActivityNameEnd2
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R)) -}
7b2998bb98a04f6c4131b291380d095a
  parseCommentSymbol :: Text.Trifecta.Parser.Parser ()
  {- Arity: 6,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseActivityNameEnd5
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R)) -}
5295c881675e21ad719ef9398b936809
  parseCorVer ::
    Text.Trifecta.Parser.Parser
      (Exercises.Major, Exercises.Minor, Exercises.Patch)
  {- Arity: 6,
     Strictness: <L,A><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseCorVer1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0]
                          <(Exercises.Major, Exercises.Minor, Exercises.Patch)>_R)) -}
aef5a49346d536506144d7a972a5d2ec
  parseCorVer1 ::
    ((Exercises.Major, Exercises.Minor, Exercises.Patch)
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> ((Exercises.Major, Exercises.Minor, Exercises.Patch)
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,A><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ r
                   (w :: (Exercises.Major, Exercises.Minor, Exercises.Patch)
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: (Exercises.Major, Exercises.Minor, Exercises.Patch)
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.$wparseCorVer @ r w1 w2 w3 w4 w5) -}
47ca6cbadf9308152d216cadd5a8a421
  parseCountryCode :: Text.Trifecta.Parser.Parser GHC.Types.Int
  {- Arity: 6,
     Strictness: <L,A><L,1*C1(U)><L,C(C1(C1(C1(U))))><L,C(U)><S,U><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseCountryCode1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Int>_R)) -}
7132da28c3bff928abca505a5f62740c
  parseCountryCode1 ::
    (GHC.Types.Int
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Int
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,A><L,1*C1(U)><L,C(C1(C1(C1(U))))><L,C(U)><S,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: GHC.Types.Int
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: GHC.Types.Int
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 case w5 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Exercises.$wparseCountryCode @ r w1 w2 w3 w4 ww1 ww2 ww3 ww4 }) -}
98e96affa72d9cffbad37df1a8f7fc66
  parseDigit :: Text.Trifecta.Parser.Parser GHC.Types.Char
  {- Arity: 2, Strictness: <L,C(C1(U))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.base10Integer8
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Char>_R)) -}
a98027e740a7793d5fa424884d53674b
  parseExchange :: Text.Trifecta.Parser.Parser Exercises.Exchange
  {- Arity: 6,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseExchange1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Int>_R)) -}
e764179558d94e72d123a72ab62fe969
  parseExchange1 ::
    (GHC.Types.Int
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Int
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fApplicativeParser1
                   @ GHC.Types.Int
                   @ ()
                   Exercises.parseExchange3
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Int>_R))
                   Exercises.parseExchange2
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))) -}
e65e84cafb8e5f09e3ac9c2dae604ea5
  parseExchange2 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,1*C1(C1(U))><L,A><L,C(C1(C(U)))><L,A><S,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 case w5 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Exercises.$wparseExchange @ r w w2 w4 ww1 ww2 ww3 ww4 }) -}
bea868d92b6f20f6715e6ab7fc297310
  parseExchange3 ::
    (GHC.Types.Int
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Int
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6, Strictness: <L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))>,
     Unfolding: (\ @ r
                   (eo :: GHC.Types.Int
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ee :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (co :: GHC.Types.Int
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (eta :: Text.Trifecta.Result.ErrInfo
                           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (eta1 :: Text.Trifecta.Delta.Delta)
                   (eta2 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.parseExchange5
                   Exercises.parseExchange4
                   @ r
                   (\ (x4 :: [GHC.Types.Char]) -> eo (Exercises.$sread1 x4))
                   ee
                   (\ (x4 :: [GHC.Types.Char]) -> co (Exercises.$sread1 x4))
                   eta
                   eta1
                   eta2) -}
79f095416ef6ee07956d9b48daa0484a
  parseExchange4 :: [Text.Trifecta.Parser.Parser GHC.Types.Char]
  {- Unfolding: (case Exercises.$wxs2 3# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (Text.Trifecta.Parser.Parser GHC.Types.Char)
                   ww1
                   ww2 }) -}
e32792a56a35ca1e31fba07b451975e2
  parseExchange5 ::
    [Text.Trifecta.Parser.Parser GHC.Types.Char]
    -> forall r.
       ([GHC.Types.Char]
        -> Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.Err
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> ([GHC.Types.Char]
           -> Data.Set.Base.Set GHC.Base.String
           -> Text.Trifecta.Delta.Delta
           -> Data.ByteString.Internal.ByteString
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.ErrInfo
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> Text.Trifecta.Delta.Delta
       -> Data.ByteString.Internal.ByteString
       -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U> -}
16a626079f443aabf666c22e1df7b862
  parseHeader ::
    Text.Trifecta.Parser.Parser Data.Time.Calendar.Days.Day
  {- Arity: 6,
     Strictness: <L,A><L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseHeader1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0]
                          <Data.Time.Calendar.Days.Day>_R)) -}
1ddbb83f238aeeb7df2e895387dcb4e8
  parseHeader1 ::
    (Data.Time.Calendar.Days.Day
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Data.Time.Calendar.Days.Day
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,A><L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ r
                   (w :: Data.Time.Calendar.Days.Day
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: Data.Time.Calendar.Days.Day
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.$wparseHeader @ r w1 w2 w3 w4 w5) -}
43706fece617007563ac6203c9fb60c7
  parseLineNumber :: Text.Trifecta.Parser.Parser Exercises.LineNumber
  {- Arity: 6, Strictness: <L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseLineNumber1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Int>_R)) -}
a2ca354c545a5467cbf8121b5c6b3d4e
  parseLineNumber1 ::
    (GHC.Types.Int
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Int
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6, Strictness: <L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))>,
     Unfolding: (\ @ r
                   (eo :: GHC.Types.Int
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ee :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (co :: GHC.Types.Int
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (eta :: Text.Trifecta.Result.ErrInfo
                           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (eta1 :: Text.Trifecta.Delta.Delta)
                   (eta2 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.parseLineNumber3
                   Exercises.parseLineNumber2
                   @ r
                   (\ (x4 :: [GHC.Types.Char]) -> eo (Exercises.$sread1 x4))
                   ee
                   (\ (x4 :: [GHC.Types.Char]) -> co (Exercises.$sread1 x4))
                   eta
                   eta1
                   eta2) -}
805c0761d5c88a8548ccce8f9f03e4f4
  parseLineNumber2 :: [Text.Trifecta.Parser.Parser GHC.Types.Char]
  {- Unfolding: (case Exercises.$wxs3 4# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (Text.Trifecta.Parser.Parser GHC.Types.Char)
                   ww1
                   ww2 }) -}
3d37c969c925afd15162779e554e94e1
  parseLineNumber3 ::
    [Text.Trifecta.Parser.Parser GHC.Types.Char]
    -> forall r.
       ([GHC.Types.Char]
        -> Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.Err
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> ([GHC.Types.Char]
           -> Data.Set.Base.Set GHC.Base.String
           -> Text.Trifecta.Delta.Delta
           -> Data.ByteString.Internal.ByteString
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> (Text.Trifecta.Result.ErrInfo
           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
       -> Text.Trifecta.Delta.Delta
       -> Data.ByteString.Internal.ByteString
       -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U> -}
ebe13c56db993f56e86151a4cc41ad98
  parseLog :: Text.Trifecta.Parser.Parser Exercises.Log
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseLog1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <Exercises.Log>_R)) -}
6ecdd7b21dc59a5ccc1abd0406c0e4a0
  parseLog1 ::
    (Exercises.Log
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Exercises.Log
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U>,
     Unfolding: (\ @ r
                   (eo :: Exercises.Log
                          -> Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (ee :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (co :: Exercises.Log
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (eta :: Text.Trifecta.Result.ErrInfo
                           -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (eta1 :: Text.Trifecta.Delta.Delta)
                   (eta2 :: Data.ByteString.Internal.ByteString) ->
                 Text.Trifecta.Parser.$fAlternativeParser1
                   @ Exercises.LogDate
                   Exercises.parseLog2
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <Exercises.LogDate>_R))
                   @ r
                   (\ (x4 :: [Exercises.LogDate]) -> eo (Exercises.Log x4))
                   ee
                   (\ (x4 :: [Exercises.LogDate]) -> co (Exercises.Log x4))
                   eta
                   eta1
                   eta2) -}
4f3ea8c47a0a4f0049c378f00152a335
  parseLog10 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,1*C1(U)><L,A><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.$wskipComment @ r w w2 w3 w4 w5) -}
b666d68fa85368cc3e15b252ffeb2829
  parseLog11 ::
    (GHC.Types.Char
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,A><L,1*C1(U)><L,C(C1(C(U)))><L,A><S,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: GHC.Types.Char
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: GHC.Types.Char
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 case w5 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Exercises.$wskipComment1 @ r w1 w2 w4 ww1 ww2 ww3 ww4 }) -}
938e81d6788f949de1c8da507124672b
  parseLog2 ::
    (Exercises.LogDate
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Exercises.LogDate
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fApplicativeParser2
                   @ ()
                   @ Exercises.LogDate
                   Exercises.parseLog4
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))
                   Exercises.parseLog3
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <Exercises.LogDate>_R))) -}
a61d6a664d9055306a7b9568f25865d3
  parseLog3 ::
    (Exercises.LogDate
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Exercises.LogDate
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,A><L,C(U)><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ r
                   (w :: Exercises.LogDate
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: Exercises.LogDate
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.$wparseLogDate @ r w1 w2 w3 w4 w5) -}
d157c6cca9676a4a27752c1c76432ea1
  parseLog4 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fApplicativeParser2
                   @ ()
                   @ ()
                   Exercises.parseLog7
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))
                   Exercises.parseLog5
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))) -}
a7ead613ce1f53fc50c6692ba4b6ffc2
  parseLog5 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,1*C1(U)><L,A><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.$wskipComments @ r w w2 w3 w4 w5) -}
f53e8e89c98aa584a6fdacee8f061612
  parseLog6 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fApplicativeParser2
                   @ ()
                   @ ()
                   Exercises.parseLog9
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))
                   Exercises.parseLog7
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))) -}
2a726a4a109363bdc6bc71644e29aeba
  parseLog7 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,1*C1(U)><L,A><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 Exercises.$wskipEOL @ r w w2 w3 w4 w5) -}
ad7e256b7829a5952467739fb58069a1
  parseLog8 ::
    (GHC.Types.Char
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,A><L,1*C1(U)><L,C(C1(C(U)))><L,A><S,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: GHC.Types.Char
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: GHC.Types.Char
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 case w5 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Exercises.$wskipEOL1 @ r w1 w2 w4 ww1 ww2 ww3 ww4 }) -}
943591f72a5f51f132a4c0d34fc3c042
  parseLog9 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fApplicativeParser2
                   @ ()
                   @ ()
                   Exercises.parseLog10
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))
                   Exercises.parseActivityNameEnd2
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))) -}
349d523fd680d95e1a91ce1916916357
  parseLogDate :: Text.Trifecta.Parser.Parser Exercises.LogDate
  {- Arity: 6,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseLog2
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <Exercises.LogDate>_R)) -}
eff4945b845050bfb3dbecfc883fae3e
  parseLog_ds :: () -> [()] -> [()]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds4 :: ()) (ds5 :: [()]) -> GHC.Types.[] @ ()) -}
51ee219bdbc30de544fba0afa41c7625
  parseMetadata :: Text.Trifecta.Parser.Parser Exercises.Metadata
  {- Arity: 6,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseMetadata1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0]
                          <[Exercises.NumberOrString]>_R)) -}
eb46190dfd2bc69b8105a7cf0ca55a64
  parseMetadata1 ::
    ([Exercises.NumberOrString]
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> ([Exercises.NumberOrString]
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fApplicativeParser2
                   @ GHC.Types.Char
                   @ [Exercises.NumberOrString]
                   Exercises.parseMetadata6
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Char>_R))
                   Exercises.parseMetadata2
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0]
                             <[Exercises.NumberOrString]>_R))) -}
23a3a1671b26de9c66f02b447af66648
  parseMetadata2 ::
    ([Exercises.NumberOrString]
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> ([Exercises.NumberOrString]
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fAlternativeParser1
                   @ Exercises.NumberOrString
                   Exercises.parseMetadata3
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0]
                             <Exercises.NumberOrString>_R))) -}
7afecbd5accd56b3167e9f3af003d552
  parseMetadata3 ::
    (Exercises.NumberOrString
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Exercises.NumberOrString
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fApplicativeParser1
                   @ Exercises.NumberOrString
                   @ ()
                   Exercises.parseMetadata5
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0]
                             <Exercises.NumberOrString>_R))
                   Exercises.parseMetadata4
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R))) -}
cb8991eefac6afee028f3e508a3d67e4
  parseMetadata4 ::
    (()
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (()
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,1*C1(C1(U))><L,A><L,C(C1(C(U)))><L,A><S,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: ()
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: ()
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 case w5 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Exercises.$wparseNumOrStrList @ r w w2 w4 ww1 ww2 ww3 ww4 }) -}
9e5c356a04a543d4add329f787585ec6
  parseMetadata5 ::
    (Exercises.NumberOrString
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Exercises.NumberOrString
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6, Strictness: <L,C(U)><L,C(U)><L,C(U)><L,U><L,U><L,U> -}
6d810479c92d83fe2be1c347e0f69cbc
  parseMetadata6 ::
    (GHC.Types.Char
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,A><L,1*C1(U)><L,C(C1(C(U)))><L,A><S,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: GHC.Types.Char
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: GHC.Types.Char
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 case w5 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Exercises.$wparseMetadata @ r w1 w2 w4 ww1 ww2 ww3 ww4 }) -}
669ea3bc96577d138e18cb7bab708629
  parseNumOrStr ::
    Text.Trifecta.Parser.Parser Exercises.NumberOrString
  {- Arity: 6, Strictness: <L,C(U)><L,C(U)><L,C(U)><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseMetadata5
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0]
                          <Exercises.NumberOrString>_R)) -}
c29ce02802df5bc85ea96edf29f79ff1
  parseNumOrStrList ::
    Text.Trifecta.Parser.Parser [Exercises.NumberOrString]
  {- Arity: 6,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseMetadata2
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0]
                          <[Exercises.NumberOrString]>_R)) -}
42c9ea5daf3c594f844c14820e18f876
  parseOptionalParens ::
    Text.Trifecta.Parser.Parser a -> Text.Trifecta.Parser.Parser a
  {- Arity: 7,
     Strictness: <L,C(C1(C1(C1(C1(C1(U))))))><L,C(C1(U))><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseAreaCode7
                  `cast`
                (forall (a :: <*>_N).
                 <Text.Trifecta.Parser.Parser a>_R
                 ->_R Sym (Text.Trifecta.Parser.N:Parser[0] <a>_R)) -}
86e0b79773f997d0cc180ede3c586414
  parsePhone :: Text.Trifecta.Parser.Parser Exercises.PhoneNumber
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(C1(C1(C1(U))))><L,U><S,U><S(LLLS),U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.main20
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0]
                          <Exercises.PhoneNumber>_R)) -}
43650e6c4e0dbc68092f2a8c68e62a81
  parseRelease :: Text.Trifecta.Parser.Parser Exercises.Release
  {- Arity: 6,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseRelease1
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0]
                          <[Exercises.NumberOrString]>_R)) -}
908f7f9a934ea377713a3b0671955075
  parseRelease1 ::
    ([Exercises.NumberOrString]
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> ([Exercises.NumberOrString]
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Unfolding: (Text.Trifecta.Parser.$fApplicativeParser2
                   @ GHC.Types.Char
                   @ [Exercises.NumberOrString]
                   Exercises.parseRelease2
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0] <GHC.Types.Char>_R))
                   Exercises.parseMetadata2
                     `cast`
                   (Sym (Text.Trifecta.Parser.N:Parser[0]
                             <[Exercises.NumberOrString]>_R))) -}
7114c5e5e7c76e07be4c2c025d425ace
  parseRelease2 ::
    (GHC.Types.Char
     -> Text.Trifecta.Result.Err
     -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.Err
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (GHC.Types.Char
        -> Data.Set.Base.Set GHC.Base.String
        -> Text.Trifecta.Delta.Delta
        -> Data.ByteString.Internal.ByteString
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> (Text.Trifecta.Result.ErrInfo
        -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
    -> Text.Trifecta.Delta.Delta
    -> Data.ByteString.Internal.ByteString
    -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r
  {- Arity: 6,
     Strictness: <L,A><L,1*C1(U)><L,C(C1(C(U)))><L,A><S,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: GHC.Types.Char
                         -> Text.Trifecta.Result.Err
                         -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w1 :: Text.Trifecta.Result.Err
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w2 :: GHC.Types.Char
                          -> Data.Set.Base.Set GHC.Base.String
                          -> Text.Trifecta.Delta.Delta
                          -> Data.ByteString.Internal.ByteString
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w3 :: Text.Trifecta.Result.ErrInfo
                          -> Text.Trifecta.Util.It.It Text.Trifecta.Rope.Rope r)
                   (w4 :: Text.Trifecta.Delta.Delta)
                   (w5 :: Data.ByteString.Internal.ByteString) ->
                 case w5 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Exercises.$wparseRelease @ r w1 w2 w4 ww1 ww2 ww3 ww4 }) -}
020d893ebbd176d5c12b5751ba09c0be
  parseSemVer :: Text.Trifecta.Parser.Parser Exercises.SemVer
  {- Arity: 6,
     Strictness: <L,A><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.main207
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <Exercises.SemVer>_R)) -}
b0ebd93b4a050e700e29d4772b424fae
  skipComment :: Text.Trifecta.Parser.Parser ()
  {- Arity: 6,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseLog6
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R)) -}
0aa5a7b023dd43d07474a6859c4f7ff8
  skipComments :: Text.Trifecta.Parser.Parser ()
  {- Arity: 6,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseLog4
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R)) -}
99bbb7e00e4144b309257ba9e9c1c254
  skipEOL :: Text.Trifecta.Parser.Parser ()
  {- Arity: 6,
     Strictness: <L,1*C1(U)><L,A><L,C(C1(C1(C1(U))))><L,U><L,U><L,U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Exercises.parseLog7
                  `cast`
                (Sym (Text.Trifecta.Parser.N:Parser[0] <()>_R)) -}
b61a5bd83499791feda044287b31e01e
  stringToInt :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: GHC.Base.String) ->
                 case Text.Read.readEither
                        @ GHC.Types.Int
                        GHC.Read.$fReadInt
                        s1 of wild {
                   Data.Either.Left x4
                   -> GHC.Err.errorWithoutStackTrace
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.Types.Int
                        x4
                   Data.Either.Right y -> y }) -}
instance GHC.Classes.Eq [Exercises.NumberOrString]
  = Exercises.$fEqNumberOrString
instance GHC.Classes.Eq [Exercises.PhoneNumber]
  = Exercises.$fEqPhoneNumber
instance GHC.Classes.Eq [Exercises.SemVer] = Exercises.$fEqSemVer
instance GHC.Classes.Ord [Exercises.NumberOrString]
  = Exercises.$fOrdNumberOrString
instance GHC.Classes.Ord [Exercises.SemVer] = Exercises.$fOrdSemVer
instance GHC.Show.Show [Exercises.Activity]
  = Exercises.$fShowActivity
instance GHC.Show.Show [Exercises.Log] = Exercises.$fShowLog
instance GHC.Show.Show [Exercises.LogDate]
  = Exercises.$fShowLogDate
instance GHC.Show.Show [Exercises.NumberOrString]
  = Exercises.$fShowNumberOrString
instance GHC.Show.Show [Exercises.PhoneNumber]
  = Exercises.$fShowPhoneNumber
instance GHC.Show.Show [Exercises.SemVer] = Exercises.$fShowSemVer
"SPEC/Exercises $fEqMaybe @ PhoneNumber" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                    Exercises.PhoneNumber)
  GHC.Base.$fEqMaybe @ Exercises.PhoneNumber $dEq
  = Exercises.$s$fEqMaybe1
"SPEC/Exercises $fEqMaybe @ SemVer" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                               Exercises.SemVer)
  GHC.Base.$fEqMaybe @ Exercises.SemVer $dEq = Exercises.$s$fEqMaybe
"SPEC/Exercises $fEqMaybe_$c== @ PhoneNumber" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                         Exercises.PhoneNumber)
  GHC.Base.$fEqMaybe_$c== @ Exercises.PhoneNumber $dEq
  = Exercises.$s$fEqMaybe_$s$fEqMaybe_$c==1
"SPEC/Exercises $fEqMaybe_$c== @ SemVer" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                    Exercises.SemVer)
  GHC.Base.$fEqMaybe_$c== @ Exercises.SemVer $dEq
  = Exercises.$s$fEqMaybe_$s$fEqMaybe_$c==
"SPEC/Exercises $fShowMaybe @ PhoneNumber" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                        Exercises.PhoneNumber)
  GHC.Show.$fShowMaybe @ Exercises.PhoneNumber $dShow
  = Exercises.$s$fShowMaybe
"SPEC/Exercises $fShowMaybe @ SemVer" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                   Exercises.SemVer)
  GHC.Show.$fShowMaybe @ Exercises.SemVer $dShow
  = Exercises.$s$fShowMaybe1
"SPEC/Exercises $fShowMaybe_$cshowList @ PhoneNumber" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                   Exercises.PhoneNumber)
  GHC.Show.$fShowMaybe_$cshowList @ Exercises.PhoneNumber $dShow
  = Exercises.$s$fShowMaybe_$s$fShowMaybe_$cshowList
"SPEC/Exercises $fShowMaybe_$cshowList @ SemVer" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                              Exercises.SemVer)
  GHC.Show.$fShowMaybe_$cshowList @ Exercises.SemVer $dShow
  = Exercises.$s$fShowMaybe_$s$fShowMaybe_$cshowList1
"SPEC/Exercises read @ Int" [ALWAYS] forall ($dRead :: GHC.Read.Read
                                                         GHC.Types.Int)
  Text.Read.read @ GHC.Types.Int $dRead = Exercises.$sread1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

