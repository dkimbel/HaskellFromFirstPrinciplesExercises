
==================== FINAL INTERFACE ====================
2017-07-30 01:31:07.86772 UTC

interface semigroupExercises-0.1.0.0-3ZZywYqp2uy6AHh3wC4FVs:SemigroupExercises 8002
  interface hash: c1131f8e5d876e06c22638d3aafc625b
  ABI hash: 6fa5d282378f83ec43c2eadd69139da5
  export-list hash: 3f5851024b2fd774dc6f4dbb42001998
  orphan hash: 0781cfe72b0e0f0a02557aa84df54cf7
  flag hash: 6fc74547fbd72660fbdc96d0ba10d9b2
  sig of: Nothing
  used TH splices: False
  where
exports:
  SemigroupExercises.accumulateBothGen
  SemigroupExercises.accumulateRightGen
  SemigroupExercises.boolConjGen
  SemigroupExercises.boolDisjGen
  SemigroupExercises.fourGen
  SemigroupExercises.identityGen
  SemigroupExercises.main
  SemigroupExercises.orGen
  SemigroupExercises.semigroupAssoc
  SemigroupExercises.threeGen
  SemigroupExercises.twoGen
  SemigroupExercises.validationGen
  SemigroupExercises.AccumulateBoth{SemigroupExercises.AccumulateBoth}
  SemigroupExercises.AccumulateBothAssoc
  SemigroupExercises.AccumulateRight{SemigroupExercises.AccumulateRight}
  SemigroupExercises.AccumulateRightAssoc
  SemigroupExercises.BoolConj{SemigroupExercises.BoolConj}
  SemigroupExercises.BoolConjAssoc
  SemigroupExercises.BoolDisj{SemigroupExercises.BoolDisj}
  SemigroupExercises.BoolDisjAssoc
  SemigroupExercises.Combine{SemigroupExercises.Combine unCombine}
  SemigroupExercises.Comp{SemigroupExercises.Comp unComp}
  SemigroupExercises.Four{SemigroupExercises.Four}
  SemigroupExercises.FourAssoc
  SemigroupExercises.Identity{SemigroupExercises.Identity}
  SemigroupExercises.IdentityAssoc
  SemigroupExercises.Or{SemigroupExercises.Fst SemigroupExercises.Snd}
  SemigroupExercises.OrAssoc
  SemigroupExercises.Three{SemigroupExercises.Three}
  SemigroupExercises.ThreeAssoc
  SemigroupExercises.Trivial{SemigroupExercises.Trivial}
  SemigroupExercises.TrivialAssoc
  SemigroupExercises.Two{SemigroupExercises.Two}
  SemigroupExercises.TwoAssoc
  SemigroupExercises.Validation{SemigroupExercises.Fail SemigroupExercises.Succ}
  SemigroupExercises.ValidationAssoc
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Arbitrary 7186418da62e356916f17711482dca2f
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Gen 8c21a18006b7ca28eeb63c6653bc55ab
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Test af729ecd962d539009b6dff25903d6d1
import  -/  base-4.9.1.0:Data.List.NonEmpty 303e7ba5e7029ac213312f3d6a8b4613
import  -/  base-4.9.1.0:Data.Semigroup fc55c71ff629dcbd821309c310055959
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
6ec030974f3ac8561ca93839591b4b84
  $fArbitraryAccumulateBoth ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary
      (SemigroupExercises.AccumulateBoth a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (SemigroupExercises.AccumulateBoth a b)
                  (SemigroupExercises.accumulateBothGen
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1)
                  (SemigroupExercises.$fArbitraryAccumulateBoth_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
6ec030974f3ac8561ca93839591b4b84
  $fArbitraryAccumulateBoth_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    SemigroupExercises.AccumulateBoth a b
    -> [SemigroupExercises.AccumulateBoth a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: SemigroupExercises.AccumulateBoth a b) ->
                 GHC.Types.[] @ (SemigroupExercises.AccumulateBoth a b)) -}
81d70db31cac43bd238b7d699f3ea8ad
  $fArbitraryAccumulateBoth_$s$cshrink ::
    SemigroupExercises.AccumulateBoth
      (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
      (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
    -> [SemigroupExercises.AccumulateBoth
          (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
          (Data.List.NonEmpty.NonEmpty GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: SemigroupExercises.AccumulateBoth
                             (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                             (Data.List.NonEmpty.NonEmpty GHC.Types.Int)) ->
                 GHC.Types.[]
                   @ (SemigroupExercises.AccumulateBoth
                        (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                        (Data.List.NonEmpty.NonEmpty GHC.Types.Int))) -}
0930c5bbd9573c59a029d0e13f69cc27
  $fArbitraryAccumulateBoth_$s$fArbitraryNonEmpty ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
                  (Test.QuickCheck.Arbitrary.$fArbitraryNonEmpty_$carbitrary
                     @ GHC.Types.Int
                     Test.QuickCheck.Arbitrary.$fArbitraryInt)
                  (Test.QuickCheck.Arbitrary.$fArbitraryNonEmpty_$cshrink
                     @ GHC.Types.Int
                     Test.QuickCheck.Arbitrary.$fArbitraryInt) -}
1a094afa9d58699dc7470bef6ea74791
  $fArbitraryAccumulateBoth_$s$fArbitraryNonEmpty1 ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                  (Test.QuickCheck.Arbitrary.$fArbitraryNonEmpty_$carbitrary
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar)
                  (Test.QuickCheck.Arbitrary.$fArbitraryNonEmpty_$cshrink
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar) -}
99054518ead02c7186cf4a1fe6083f8d
  $fArbitraryAccumulateRight ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary
      (SemigroupExercises.AccumulateRight a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (SemigroupExercises.AccumulateRight a b)
                  (SemigroupExercises.accumulateRightGen
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1)
                  (SemigroupExercises.$fArbitraryAccumulateRight_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
99054518ead02c7186cf4a1fe6083f8d
  $fArbitraryAccumulateRight_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    SemigroupExercises.AccumulateRight a b
    -> [SemigroupExercises.AccumulateRight a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: SemigroupExercises.AccumulateRight a b) ->
                 GHC.Types.[] @ (SemigroupExercises.AccumulateRight a b)) -}
563b2ac8a50ec406aabe231bff28646a
  $fArbitraryAccumulateRight_$s$cshrink ::
    SemigroupExercises.AccumulateRight
      GHC.Types.Bool (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
    -> [SemigroupExercises.AccumulateRight
          GHC.Types.Bool (Data.List.NonEmpty.NonEmpty GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: SemigroupExercises.AccumulateRight
                             GHC.Types.Bool (Data.List.NonEmpty.NonEmpty GHC.Types.Int)) ->
                 GHC.Types.[]
                   @ (SemigroupExercises.AccumulateRight
                        GHC.Types.Bool (Data.List.NonEmpty.NonEmpty GHC.Types.Int))) -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fArbitraryBoolConj ::
    Test.QuickCheck.Arbitrary.Arbitrary SemigroupExercises.BoolConj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SemigroupExercises.BoolConj
                  SemigroupExercises.boolConjGen
                  SemigroupExercises.$fArbitraryBoolConj_$cshrink -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fArbitraryBoolConj_$cshrink ::
    SemigroupExercises.BoolConj -> [SemigroupExercises.BoolConj]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: SemigroupExercises.BoolConj) ->
                 GHC.Types.[] @ SemigroupExercises.BoolConj) -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fArbitraryBoolDisj ::
    Test.QuickCheck.Arbitrary.Arbitrary SemigroupExercises.BoolDisj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SemigroupExercises.BoolDisj
                  SemigroupExercises.boolDisjGen
                  SemigroupExercises.$fArbitraryBoolDisj_$cshrink -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fArbitraryBoolDisj_$cshrink ::
    SemigroupExercises.BoolDisj -> [SemigroupExercises.BoolDisj]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: SemigroupExercises.BoolDisj) ->
                 GHC.Types.[] @ SemigroupExercises.BoolDisj) -}
4082cd6fd45bcfbae2731afee68de2d4
  $fArbitraryFour ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Arbitrary.Arbitrary
      (SemigroupExercises.Four a b c d)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                      ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                      ($dArbitrary3 :: Test.QuickCheck.Arbitrary.Arbitrary d).
                  @ (SemigroupExercises.Four a b c d)
                  (SemigroupExercises.fourGen
                     @ a
                     @ b
                     @ c
                     @ d
                     $dArbitrary
                     $dArbitrary1
                     $dArbitrary2
                     $dArbitrary3)
                  (SemigroupExercises.$fArbitraryFour_$cshrink
                     @ a
                     @ b
                     @ c
                     @ d
                     $dArbitrary
                     $dArbitrary1
                     $dArbitrary2
                     $dArbitrary3) -}
4082cd6fd45bcfbae2731afee68de2d4
  $fArbitraryFour_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    SemigroupExercises.Four a b c d
    -> [SemigroupExercises.Four a b c d]
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   ($dArbitrary3 :: Test.QuickCheck.Arbitrary.Arbitrary d)
                   (ds1 :: SemigroupExercises.Four a b c d) ->
                 GHC.Types.[] @ (SemigroupExercises.Four a b c d)) -}
4dbfc797ac50962695a70257cacde984
  $fArbitraryIdentity ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (SemigroupExercises.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (SemigroupExercises.Identity a)
                  (SemigroupExercises.identityGen @ a $dArbitrary)
                  (SemigroupExercises.$fArbitraryIdentity_$cshrink
                     @ a
                     $dArbitrary) -}
4dbfc797ac50962695a70257cacde984
  $fArbitraryIdentity_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    SemigroupExercises.Identity a -> [SemigroupExercises.Identity a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds1 :: SemigroupExercises.Identity a) ->
                 GHC.Types.[] @ (SemigroupExercises.Identity a)) -}
17afe0b6379a6d8f1398839d8ca2c72c
  $fArbitraryIdentity_$s$cshrink ::
    SemigroupExercises.Identity
      (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
    -> [SemigroupExercises.Identity
          (Data.List.NonEmpty.NonEmpty GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: SemigroupExercises.Identity
                             (Data.List.NonEmpty.NonEmpty GHC.Types.Int)) ->
                 GHC.Types.[]
                   @ (SemigroupExercises.Identity
                        (Data.List.NonEmpty.NonEmpty GHC.Types.Int))) -}
6b70697a115eb259ba3a128ef9e53b67
  $fArbitraryOr ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (SemigroupExercises.Or a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (SemigroupExercises.Or a b)
                  (SemigroupExercises.orGen @ a @ b $dArbitrary $dArbitrary1)
                  (SemigroupExercises.$fArbitraryOr_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
6b70697a115eb259ba3a128ef9e53b67
  $fArbitraryOr_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    SemigroupExercises.Or a b -> [SemigroupExercises.Or a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: SemigroupExercises.Or a b) ->
                 GHC.Types.[] @ (SemigroupExercises.Or a b)) -}
1d4ee0b53b433a84de24bc7de02318b2
  $fArbitraryOr_$s$cshrink ::
    SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool
    -> [SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool) ->
                 GHC.Types.[]
                   @ (SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool)) -}
94a4a888e362b10d842c13eb6a414550
  $fArbitraryThree ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Arbitrary.Arbitrary
      (SemigroupExercises.Three a b c)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                      ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary c).
                  @ (SemigroupExercises.Three a b c)
                  (SemigroupExercises.threeGen
                     @ a
                     @ b
                     @ c
                     $dArbitrary
                     $dArbitrary1
                     $dArbitrary2)
                  (SemigroupExercises.$fArbitraryThree_$cshrink
                     @ a
                     @ b
                     @ c
                     $dArbitrary
                     $dArbitrary1
                     $dArbitrary2) -}
94a4a888e362b10d842c13eb6a414550
  $fArbitraryThree_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    SemigroupExercises.Three a b c -> [SemigroupExercises.Three a b c]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   @ b
                   @ c
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   ($dArbitrary2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (ds1 :: SemigroupExercises.Three a b c) ->
                 GHC.Types.[] @ (SemigroupExercises.Three a b c)) -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fArbitraryTrivial ::
    Test.QuickCheck.Arbitrary.Arbitrary SemigroupExercises.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SemigroupExercises.Trivial
                  SemigroupExercises.$fArbitraryTrivial_$carbitrary
                  SemigroupExercises.$fArbitraryTrivial_$cshrink -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fArbitraryTrivial1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> SemigroupExercises.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                 SemigroupExercises.Trivial) -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fArbitraryTrivial_$carbitrary ::
    Test.QuickCheck.Gen.Gen SemigroupExercises.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.$fArbitraryTrivial1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                          <SemigroupExercises.Trivial>_R)) -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fArbitraryTrivial_$cshrink ::
    SemigroupExercises.Trivial -> [SemigroupExercises.Trivial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: SemigroupExercises.Trivial) ->
                 GHC.Types.[] @ SemigroupExercises.Trivial) -}
88aba6fec3955c1d3f630dd605e863ec
  $fArbitraryTwo ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (SemigroupExercises.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (SemigroupExercises.Two a b)
                  (SemigroupExercises.twoGen @ a @ b $dArbitrary $dArbitrary1)
                  (SemigroupExercises.$fArbitraryTwo_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
88aba6fec3955c1d3f630dd605e863ec
  $fArbitraryTwo_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    SemigroupExercises.Two a b -> [SemigroupExercises.Two a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: SemigroupExercises.Two a b) ->
                 GHC.Types.[] @ (SemigroupExercises.Two a b)) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fArbitraryValidation ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary
      (SemigroupExercises.Validation a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (SemigroupExercises.Validation a b)
                  (SemigroupExercises.validationGen @ a @ b $dArbitrary $dArbitrary1)
                  (SemigroupExercises.$fArbitraryValidation_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fArbitraryValidation_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    SemigroupExercises.Validation a b
    -> [SemigroupExercises.Validation a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: SemigroupExercises.Validation a b) ->
                 GHC.Types.[] @ (SemigroupExercises.Validation a b)) -}
2904126cc9602befc4e4a51ce18e8502
  $fArbitraryValidation_$s$cshrink ::
    SemigroupExercises.Validation
      (Data.List.NonEmpty.NonEmpty GHC.Types.Int) GHC.Types.Bool
    -> [SemigroupExercises.Validation
          (Data.List.NonEmpty.NonEmpty GHC.Types.Int) GHC.Types.Bool]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: SemigroupExercises.Validation
                             (Data.List.NonEmpty.NonEmpty GHC.Types.Int) GHC.Types.Bool) ->
                 GHC.Types.[]
                   @ (SemigroupExercises.Validation
                        (Data.List.NonEmpty.NonEmpty GHC.Types.Int) GHC.Types.Bool)) -}
6ec030974f3ac8561ca93839591b4b84
  $fEqAccumulateBoth ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    GHC.Classes.Eq (SemigroupExercises.AccumulateBoth a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq a)
                      ($dEq1 :: GHC.Classes.Eq b).
                  @ (SemigroupExercises.AccumulateBoth a b)
                  (SemigroupExercises.$fEqAccumulateBoth_$c== @ a @ b $dEq $dEq1)
                  (SemigroupExercises.$fEqAccumulateBoth_$c/= @ a @ b $dEq $dEq1) -}
c33b890d27cf0acd419a963072cc8222
  $fEqAccumulateBoth1 ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    SemigroupExercises.Validation a b
    -> SemigroupExercises.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (eta :: SemigroupExercises.Validation a b)
                   (eta1 :: SemigroupExercises.Validation a b) ->
                 SemigroupExercises.$fEqAccumulateBoth_$c/=1
                   @ a
                   @ b
                   $dEq1
                   $dEq
                   eta
                   eta1) -}
c4a79ccc715720ac2dc25d4b9c865874
  $fEqAccumulateBoth2 ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    SemigroupExercises.Validation a b
    -> SemigroupExercises.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (eta :: SemigroupExercises.Validation a b)
                   (eta1 :: SemigroupExercises.Validation a b) ->
                 SemigroupExercises.$fEqAccumulateBoth_$c==1
                   @ a
                   @ b
                   $dEq1
                   $dEq
                   eta
                   eta1) -}
6ec030974f3ac8561ca93839591b4b84
  $fEqAccumulateBoth_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    SemigroupExercises.AccumulateBoth a b
    -> SemigroupExercises.AccumulateBoth a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.$fEqAccumulateBoth1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Classes.Eq b>_R
                 ->_R Sym (SemigroupExercises.N:AccumulateBoth[0]) <a>_N <b>_N
                 ->_R Sym (SemigroupExercises.N:AccumulateBoth[0]) <a>_N <b>_N
                 ->_R <GHC.Types.Bool>_R) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fEqAccumulateBoth_$c/=1 ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    SemigroupExercises.Validation a b
    -> SemigroupExercises.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (a1 :: SemigroupExercises.Validation a b)
                   (b1 :: SemigroupExercises.Validation a b) ->
                 case a1 of wild {
                   SemigroupExercises.Fail a2
                   -> case b1 of wild1 {
                        SemigroupExercises.Fail b2
                        -> case GHC.Classes.== @ a $dEq1 a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        SemigroupExercises.Succ ipv -> GHC.Types.True }
                   SemigroupExercises.Succ a2
                   -> case b1 of wild1 {
                        SemigroupExercises.Fail ipv -> GHC.Types.True
                        SemigroupExercises.Succ b2
                        -> case GHC.Classes.== @ b $dEq a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
6ec030974f3ac8561ca93839591b4b84
  $fEqAccumulateBoth_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    SemigroupExercises.AccumulateBoth a b
    -> SemigroupExercises.AccumulateBoth a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.$fEqAccumulateBoth2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Classes.Eq b>_R
                 ->_R Sym (SemigroupExercises.N:AccumulateBoth[0]) <a>_N <b>_N
                 ->_R Sym (SemigroupExercises.N:AccumulateBoth[0]) <a>_N <b>_N
                 ->_R <GHC.Types.Bool>_R) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fEqAccumulateBoth_$c==1 ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    SemigroupExercises.Validation a b
    -> SemigroupExercises.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (ds :: SemigroupExercises.Validation a b)
                   (ds1 :: SemigroupExercises.Validation a b) ->
                 case ds of wild {
                   SemigroupExercises.Fail a1
                   -> case ds1 of wild1 {
                        SemigroupExercises.Fail b1 -> GHC.Classes.== @ a $dEq1 a1 b1
                        SemigroupExercises.Succ ipv -> GHC.Types.False }
                   SemigroupExercises.Succ a1
                   -> case ds1 of wild1 {
                        SemigroupExercises.Fail ipv -> GHC.Types.False
                        SemigroupExercises.Succ b1 -> GHC.Classes.== @ b $dEq a1 b1 } }) -}
99054518ead02c7186cf4a1fe6083f8d
  $fEqAccumulateRight ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    GHC.Classes.Eq (SemigroupExercises.AccumulateRight a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq a)
                      ($dEq1 :: GHC.Classes.Eq b).
                  @ (SemigroupExercises.AccumulateRight a b)
                  (SemigroupExercises.$fEqAccumulateRight_$c== @ a @ b $dEq $dEq1)
                  (SemigroupExercises.$fEqAccumulateRight_$c/= @ a @ b $dEq $dEq1) -}
99054518ead02c7186cf4a1fe6083f8d
  $fEqAccumulateRight_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    SemigroupExercises.AccumulateRight a b
    -> SemigroupExercises.AccumulateRight a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.$fEqAccumulateBoth1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Classes.Eq b>_R
                 ->_R Sym (SemigroupExercises.N:AccumulateRight[0]) <a>_N <b>_N
                 ->_R Sym (SemigroupExercises.N:AccumulateRight[0]) <a>_N <b>_N
                 ->_R <GHC.Types.Bool>_R) -}
99054518ead02c7186cf4a1fe6083f8d
  $fEqAccumulateRight_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    SemigroupExercises.AccumulateRight a b
    -> SemigroupExercises.AccumulateRight a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.$fEqAccumulateBoth2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Classes.Eq b>_R
                 ->_R Sym (SemigroupExercises.N:AccumulateRight[0]) <a>_N <b>_N
                 ->_R Sym (SemigroupExercises.N:AccumulateRight[0]) <a>_N <b>_N
                 ->_R <GHC.Types.Bool>_R) -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fEqBoolConj :: GHC.Classes.Eq SemigroupExercises.BoolConj
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SemigroupExercises.BoolConj
                  SemigroupExercises.$fEqBoolConj_$c==
                  SemigroupExercises.$fEqBoolConj_$c/= -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fEqBoolConj_$c/= ::
    SemigroupExercises.BoolConj
    -> SemigroupExercises.BoolConj -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c/=
                  `cast`
                (Sym (SemigroupExercises.N:BoolConj[0])
                 ->_R Sym (SemigroupExercises.N:BoolConj[0])
                 ->_R <GHC.Types.Bool>_R) -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fEqBoolConj_$c== ::
    SemigroupExercises.BoolConj
    -> SemigroupExercises.BoolConj -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c==
                  `cast`
                (Sym (SemigroupExercises.N:BoolConj[0])
                 ->_R Sym (SemigroupExercises.N:BoolConj[0])
                 ->_R <GHC.Types.Bool>_R) -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fEqBoolDisj :: GHC.Classes.Eq SemigroupExercises.BoolDisj
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SemigroupExercises.BoolDisj
                  SemigroupExercises.$fEqBoolDisj_$c==
                  SemigroupExercises.$fEqBoolDisj_$c/= -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fEqBoolDisj_$c/= ::
    SemigroupExercises.BoolDisj
    -> SemigroupExercises.BoolDisj -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c/=
                  `cast`
                (Sym (SemigroupExercises.N:BoolDisj[0])
                 ->_R Sym (SemigroupExercises.N:BoolDisj[0])
                 ->_R <GHC.Types.Bool>_R) -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fEqBoolDisj_$c== ::
    SemigroupExercises.BoolDisj
    -> SemigroupExercises.BoolDisj -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c==
                  `cast`
                (Sym (SemigroupExercises.N:BoolDisj[0])
                 ->_R Sym (SemigroupExercises.N:BoolDisj[0])
                 ->_R <GHC.Types.Bool>_R) -}
4082cd6fd45bcfbae2731afee68de2d4
  $fEqFour ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    GHC.Classes.Eq (SemigroupExercises.Four a b c d)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dEq :: GHC.Classes.Eq d)
                      ($dEq1 :: GHC.Classes.Eq c)
                      ($dEq2 :: GHC.Classes.Eq b)
                      ($dEq3 :: GHC.Classes.Eq a).
                  @ (SemigroupExercises.Four a b c d)
                  (SemigroupExercises.$fEqFour_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3)
                  (SemigroupExercises.$fEqFour_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3) -}
4082cd6fd45bcfbae2731afee68de2d4
  $fEqFour_$c/= ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    SemigroupExercises.Four a b c d
    -> SemigroupExercises.Four a b c d -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dEq :: GHC.Classes.Eq d)
                   ($dEq1 :: GHC.Classes.Eq c)
                   ($dEq2 :: GHC.Classes.Eq b)
                   ($dEq3 :: GHC.Classes.Eq a)
                   (a1 :: SemigroupExercises.Four a b c d)
                   (b1 :: SemigroupExercises.Four a b c d) ->
                 case SemigroupExercises.$fEqFour_$c==
                        @ a
                        @ b
                        @ c
                        @ d
                        $dEq
                        $dEq1
                        $dEq2
                        $dEq3
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4082cd6fd45bcfbae2731afee68de2d4
  $fEqFour_$c== ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    SemigroupExercises.Four a b c d
    -> SemigroupExercises.Four a b c d -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Classes.Eq d)
                   (w1 :: GHC.Classes.Eq c)
                   (w2 :: GHC.Classes.Eq b)
                   (w3 :: GHC.Classes.Eq a)
                   (w4 :: SemigroupExercises.Four a b c d)
                   (w5 :: SemigroupExercises.Four a b c d) ->
                 case w4 of ww { SemigroupExercises.Four ww1 ww2 ww3 ww4 ->
                 case w5 of ww5 { SemigroupExercises.Four ww6 ww7 ww8 ww9 ->
                 SemigroupExercises.$w$c==
                   @ a
                   @ b
                   @ c
                   @ d
                   w
                   w1
                   w2
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
4dbfc797ac50962695a70257cacde984
  $fEqIdentity ::
    GHC.Classes.Eq a => GHC.Classes.Eq (SemigroupExercises.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (SemigroupExercises.Identity a)
                  (SemigroupExercises.$fEqIdentity_$c== @ a $dEq)
                  (SemigroupExercises.$fEqIdentity_$c/= @ a $dEq) -}
4dbfc797ac50962695a70257cacde984
  $fEqIdentity_$c/= ::
    GHC.Classes.Eq a =>
    SemigroupExercises.Identity a
    -> SemigroupExercises.Identity a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),U(A,U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes./=
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (SemigroupExercises.N:Identity[0] <a>_R)
                 ->_R Sym (SemigroupExercises.N:Identity[0] <a>_R)
                 ->_R <GHC.Types.Bool>_R) -}
4dbfc797ac50962695a70257cacde984
  $fEqIdentity_$c== ::
    GHC.Classes.Eq a =>
    SemigroupExercises.Identity a
    -> SemigroupExercises.Identity a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),U(U,A)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.==
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (SemigroupExercises.N:Identity[0] <a>_R)
                 ->_R Sym (SemigroupExercises.N:Identity[0] <a>_R)
                 ->_R <GHC.Types.Bool>_R) -}
6b70697a115eb259ba3a128ef9e53b67
  $fEqOr ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (SemigroupExercises.Or a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (SemigroupExercises.Or a b)
                  (SemigroupExercises.$fEqOr_$c== @ a @ b $dEq $dEq1)
                  (SemigroupExercises.$fEqOr_$c/= @ a @ b $dEq $dEq1) -}
6b70697a115eb259ba3a128ef9e53b67
  $fEqOr_$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    SemigroupExercises.Or a b
    -> SemigroupExercises.Or a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (a1 :: SemigroupExercises.Or a b)
                   (b1 :: SemigroupExercises.Or a b) ->
                 case a1 of wild {
                   SemigroupExercises.Fst a2
                   -> case b1 of wild1 {
                        SemigroupExercises.Fst b2
                        -> case GHC.Classes.== @ a $dEq1 a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        SemigroupExercises.Snd ipv -> GHC.Types.True }
                   SemigroupExercises.Snd a2
                   -> case b1 of wild1 {
                        SemigroupExercises.Fst ipv -> GHC.Types.True
                        SemigroupExercises.Snd b2
                        -> case GHC.Classes.== @ b $dEq a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
6b70697a115eb259ba3a128ef9e53b67
  $fEqOr_$c== ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    SemigroupExercises.Or a b
    -> SemigroupExercises.Or a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (ds :: SemigroupExercises.Or a b)
                   (ds1 :: SemigroupExercises.Or a b) ->
                 case ds of wild {
                   SemigroupExercises.Fst a1
                   -> case ds1 of wild1 {
                        SemigroupExercises.Fst b1 -> GHC.Classes.== @ a $dEq1 a1 b1
                        SemigroupExercises.Snd ipv -> GHC.Types.False }
                   SemigroupExercises.Snd a1
                   -> case ds1 of wild1 {
                        SemigroupExercises.Fst ipv -> GHC.Types.False
                        SemigroupExercises.Snd b1 -> GHC.Classes.== @ b $dEq a1 b1 } }) -}
94a4a888e362b10d842c13eb6a414550
  $fEqThree ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (SemigroupExercises.Three a b c)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dEq :: GHC.Classes.Eq c)
                      ($dEq1 :: GHC.Classes.Eq b)
                      ($dEq2 :: GHC.Classes.Eq a).
                  @ (SemigroupExercises.Three a b c)
                  (SemigroupExercises.$fEqThree_$c== @ a @ b @ c $dEq $dEq1 $dEq2)
                  (SemigroupExercises.$fEqThree_$c/= @ a @ b @ c $dEq $dEq1 $dEq2) -}
94a4a888e362b10d842c13eb6a414550
  $fEqThree_$c/= ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    SemigroupExercises.Three a b c
    -> SemigroupExercises.Three a b c -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dEq :: GHC.Classes.Eq c)
                   ($dEq1 :: GHC.Classes.Eq b)
                   ($dEq2 :: GHC.Classes.Eq a)
                   (a1 :: SemigroupExercises.Three a b c)
                   (b1 :: SemigroupExercises.Three a b c) ->
                 case SemigroupExercises.$fEqThree_$c==
                        @ a
                        @ b
                        @ c
                        $dEq
                        $dEq1
                        $dEq2
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94a4a888e362b10d842c13eb6a414550
  $fEqThree_$c== ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    SemigroupExercises.Three a b c
    -> SemigroupExercises.Three a b c -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Classes.Eq c)
                   (w1 :: GHC.Classes.Eq b)
                   (w2 :: GHC.Classes.Eq a)
                   (w3 :: SemigroupExercises.Three a b c)
                   (w4 :: SemigroupExercises.Three a b c) ->
                 case w3 of ww { SemigroupExercises.Three ww1 ww2 ww3 ->
                 case w4 of ww4 { SemigroupExercises.Three ww5 ww6 ww7 ->
                 SemigroupExercises.$w$c==1
                   @ a
                   @ b
                   @ c
                   w
                   w1
                   w2
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7 } }) -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fEqTrivial :: GHC.Classes.Eq SemigroupExercises.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SemigroupExercises.Trivial
                  SemigroupExercises.$fEqTrivial_$c==
                  SemigroupExercises.$fEqTrivial_$c/= -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fEqTrivial_$c/= ::
    SemigroupExercises.Trivial
    -> SemigroupExercises.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: SemigroupExercises.Trivial)
                   (b :: SemigroupExercises.Trivial) ->
                 case a of wild { SemigroupExercises.Trivial ->
                 case b of wild1 { SemigroupExercises.Trivial ->
                 GHC.Types.False } }) -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fEqTrivial_$c== ::
    SemigroupExercises.Trivial
    -> SemigroupExercises.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: SemigroupExercises.Trivial)
                   (ds1 :: SemigroupExercises.Trivial) ->
                 case ds of wild { SemigroupExercises.Trivial ->
                 case ds1 of wild1 { SemigroupExercises.Trivial ->
                 GHC.Types.True } }) -}
88aba6fec3955c1d3f630dd605e863ec
  $fEqTwo ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (SemigroupExercises.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (SemigroupExercises.Two a b)
                  (SemigroupExercises.$fEqTwo_$c== @ a @ b $dEq $dEq1)
                  (SemigroupExercises.$fEqTwo_$c/= @ a @ b $dEq $dEq1) -}
88aba6fec3955c1d3f630dd605e863ec
  $fEqTwo_$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    SemigroupExercises.Two a b
    -> SemigroupExercises.Two a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: SemigroupExercises.Two a b)
                   (w3 :: SemigroupExercises.Two a b) ->
                 case w2 of ww { SemigroupExercises.Two ww1 ww2 ->
                 case w3 of ww3 { SemigroupExercises.Two ww4 ww5 ->
                 SemigroupExercises.$w$c/= @ a @ b w w1 ww1 ww2 ww4 ww5 } }) -}
88aba6fec3955c1d3f630dd605e863ec
  $fEqTwo_$c== ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    SemigroupExercises.Two a b
    -> SemigroupExercises.Two a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: SemigroupExercises.Two a b)
                   (w3 :: SemigroupExercises.Two a b) ->
                 case w2 of ww { SemigroupExercises.Two ww1 ww2 ->
                 case w3 of ww3 { SemigroupExercises.Two ww4 ww5 ->
                 SemigroupExercises.$w$c==2 @ a @ b w w1 ww1 ww2 ww4 ww5 } }) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fEqValidation ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (SemigroupExercises.Validation a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (SemigroupExercises.Validation a b)
                  (SemigroupExercises.$fEqAccumulateBoth_$c==1 @ a @ b $dEq $dEq1)
                  (SemigroupExercises.$fEqAccumulateBoth_$c/=1 @ a @ b $dEq $dEq1) -}
6ec030974f3ac8561ca93839591b4b84
  $fSemigroupAccumulateBoth ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.Semigroup.Semigroup (SemigroupExercises.AccumulateBoth a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b).
                  @ (SemigroupExercises.AccumulateBoth a b)
                  (SemigroupExercises.$fSemigroupAccumulateBoth_$c<>
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1)
                  (SemigroupExercises.$fSemigroupAccumulateBoth_$csconcat
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1)
                  (SemigroupExercises.$fSemigroupAccumulateBoth_$cstimes
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1) -}
6ec030974f3ac8561ca93839591b4b84
  $fSemigroupAccumulateBoth_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    SemigroupExercises.AccumulateBoth a b
    -> SemigroupExercises.AccumulateBoth a b
    -> SemigroupExercises.AccumulateBoth a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                   (ds :: SemigroupExercises.AccumulateBoth a b)
                   (ds1 :: SemigroupExercises.AccumulateBoth a b) ->
                 case ds
                        `cast`
                      (SemigroupExercises.N:AccumulateBoth[0] <a>_N <b>_N) of wild {
                   SemigroupExercises.Fail f0
                   -> case ds1
                             `cast`
                           (SemigroupExercises.N:AccumulateBoth[0] <a>_N <b>_N) of wild1 {
                        SemigroupExercises.Fail f1
                        -> (SemigroupExercises.Fail
                              @ a
                              @ b
                              (Data.Semigroup.<> @ a $dSemigroup f0 f1))
                             `cast`
                           (Sym (SemigroupExercises.N:AccumulateBoth[0]) <a>_N <b>_N)
                        SemigroupExercises.Succ ipv
                        -> wild1
                             `cast`
                           (Sym (SemigroupExercises.N:AccumulateBoth[0]) <a>_N <b>_N) }
                   SemigroupExercises.Succ s0
                   -> case ds1
                             `cast`
                           (SemigroupExercises.N:AccumulateBoth[0] <a>_N <b>_N) of wild1 {
                        SemigroupExercises.Fail ipv
                        -> wild
                             `cast`
                           (Sym (SemigroupExercises.N:AccumulateBoth[0]) <a>_N <b>_N)
                        SemigroupExercises.Succ s1
                        -> (SemigroupExercises.Succ
                              @ a
                              @ b
                              (Data.Semigroup.<> @ b $dSemigroup1 s0 s1))
                             `cast`
                           (Sym (SemigroupExercises.N:AccumulateBoth[0]) <a>_N <b>_N) } }) -}
6ec030974f3ac8561ca93839591b4b84
  $fSemigroupAccumulateBoth_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.List.NonEmpty.NonEmpty (SemigroupExercises.AccumulateBoth a b)
    -> SemigroupExercises.AccumulateBoth a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.List.NonEmpty.NonEmpty
                            (SemigroupExercises.AccumulateBoth a b)) ->
                 case w2 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 SemigroupExercises.$w$csconcat @ a @ b w w1 ww1 ww2 }) -}
6ec030974f3ac8561ca93839591b4b84
  $fSemigroupAccumulateBoth_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1
    -> SemigroupExercises.AccumulateBoth a b
    -> SemigroupExercises.AccumulateBoth a b
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
99054518ead02c7186cf4a1fe6083f8d
  $fSemigroupAccumulateRight ::
    Data.Semigroup.Semigroup b =>
    Data.Semigroup.Semigroup (SemigroupExercises.AccumulateRight a b)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ b
                      @ a
                      ($dSemigroup :: Data.Semigroup.Semigroup b).
                  @ (SemigroupExercises.AccumulateRight a b)
                  (SemigroupExercises.$fSemigroupAccumulateRight_$c<>
                     @ b
                     @ a
                     $dSemigroup)
                  (SemigroupExercises.$fSemigroupAccumulateRight_$csconcat
                     @ b
                     @ a
                     $dSemigroup)
                  (SemigroupExercises.$fSemigroupAccumulateRight_$cstimes
                     @ b
                     @ a
                     $dSemigroup) -}
99054518ead02c7186cf4a1fe6083f8d
  $fSemigroupAccumulateRight_$c<> ::
    Data.Semigroup.Semigroup b =>
    SemigroupExercises.AccumulateRight a b
    -> SemigroupExercises.AccumulateRight a b
    -> SemigroupExercises.AccumulateRight a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   ($dSemigroup :: Data.Semigroup.Semigroup b)
                   (ds :: SemigroupExercises.AccumulateRight a b)
                   (ds1 :: SemigroupExercises.AccumulateRight a b) ->
                 case ds
                        `cast`
                      (SemigroupExercises.N:AccumulateRight[0] <a>_N <b>_N) of wild {
                   SemigroupExercises.Fail ipv
                   -> case ds1
                             `cast`
                           (SemigroupExercises.N:AccumulateRight[0] <a>_N <b>_N) of wild1 {
                        SemigroupExercises.Fail ipv1
                        -> wild
                             `cast`
                           (Sym (SemigroupExercises.N:AccumulateRight[0]) <a>_N <b>_N)
                        SemigroupExercises.Succ ds2
                        -> wild1
                             `cast`
                           (Sym (SemigroupExercises.N:AccumulateRight[0]) <a>_N <b>_N) }
                   SemigroupExercises.Succ s0
                   -> case ds1
                             `cast`
                           (SemigroupExercises.N:AccumulateRight[0] <a>_N <b>_N) of wild1 {
                        SemigroupExercises.Fail ipv
                        -> wild
                             `cast`
                           (Sym (SemigroupExercises.N:AccumulateRight[0]) <a>_N <b>_N)
                        SemigroupExercises.Succ s1
                        -> (SemigroupExercises.Succ
                              @ a
                              @ b
                              (Data.Semigroup.<> @ b $dSemigroup s0 s1))
                             `cast`
                           (Sym (SemigroupExercises.N:AccumulateRight[0]) <a>_N <b>_N) } }) -}
99054518ead02c7186cf4a1fe6083f8d
  $fSemigroupAccumulateRight_$csconcat ::
    Data.Semigroup.Semigroup b =>
    Data.List.NonEmpty.NonEmpty
      (SemigroupExercises.AccumulateRight a b)
    -> SemigroupExercises.AccumulateRight a b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   @ a
                   (w :: Data.Semigroup.Semigroup b)
                   (w1 :: Data.List.NonEmpty.NonEmpty
                            (SemigroupExercises.AccumulateRight a b)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 SemigroupExercises.$w$csconcat1 @ b @ a w ww1 ww2 }) -}
99054518ead02c7186cf4a1fe6083f8d
  $fSemigroupAccumulateRight_$cstimes ::
    Data.Semigroup.Semigroup b =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1
    -> SemigroupExercises.AccumulateRight a b
    -> SemigroupExercises.AccumulateRight a b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fSemigroupBoolConj ::
    Data.Semigroup.Semigroup SemigroupExercises.BoolConj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SemigroupExercises.BoolConj
                  SemigroupExercises.$fSemigroupBoolConj_$c<>
                  SemigroupExercises.$fSemigroupBoolConj_$csconcat
                  SemigroupExercises.$fSemigroupBoolConj_$cstimes -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fSemigroupBoolConj_$c<> ::
    SemigroupExercises.BoolConj
    -> SemigroupExercises.BoolConj -> SemigroupExercises.BoolConj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: SemigroupExercises.BoolConj)
                   (ds1 :: SemigroupExercises.BoolConj) ->
                 case ds `cast` (SemigroupExercises.N:BoolConj[0]) of wild {
                   GHC.Types.False
                   -> GHC.Types.False `cast` (Sym (SemigroupExercises.N:BoolConj[0]))
                   GHC.Types.True -> ds1 }) -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fSemigroupBoolConj_$csconcat ::
    Data.List.NonEmpty.NonEmpty SemigroupExercises.BoolConj
    -> SemigroupExercises.BoolConj
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.List.NonEmpty.NonEmpty
                           SemigroupExercises.BoolConj) ->
                 case w of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 SemigroupExercises.$fSemigroupBoolConj_go ww1 ww2 }) -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fSemigroupBoolConj_$cstimes ::
    GHC.Real.Integral b =>
    b -> SemigroupExercises.BoolConj -> SemigroupExercises.BoolConj
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fSemigroupBoolConj_go ::
    SemigroupExercises.BoolConj
    -> [SemigroupExercises.BoolConj] -> SemigroupExercises.BoolConj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fSemigroupBoolDisj ::
    Data.Semigroup.Semigroup SemigroupExercises.BoolDisj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SemigroupExercises.BoolDisj
                  SemigroupExercises.$fSemigroupBoolDisj_$c<>
                  SemigroupExercises.$fSemigroupBoolDisj_$csconcat
                  SemigroupExercises.$fSemigroupBoolDisj_$cstimes -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fSemigroupBoolDisj_$c<> ::
    SemigroupExercises.BoolDisj
    -> SemigroupExercises.BoolDisj -> SemigroupExercises.BoolDisj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: SemigroupExercises.BoolDisj)
                   (ds1 :: SemigroupExercises.BoolDisj) ->
                 case ds `cast` (SemigroupExercises.N:BoolDisj[0]) of wild {
                   GHC.Types.False -> ds1
                   GHC.Types.True
                   -> GHC.Types.True
                        `cast`
                      (Sym (SemigroupExercises.N:BoolDisj[0])) }) -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fSemigroupBoolDisj_$csconcat ::
    Data.List.NonEmpty.NonEmpty SemigroupExercises.BoolDisj
    -> SemigroupExercises.BoolDisj
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.List.NonEmpty.NonEmpty
                           SemigroupExercises.BoolDisj) ->
                 case w of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 SemigroupExercises.$fSemigroupBoolDisj_go ww1 ww2 }) -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fSemigroupBoolDisj_$cstimes ::
    GHC.Real.Integral b =>
    b -> SemigroupExercises.BoolDisj -> SemigroupExercises.BoolDisj
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fSemigroupBoolDisj_go ::
    SemigroupExercises.BoolDisj
    -> [SemigroupExercises.BoolDisj] -> SemigroupExercises.BoolDisj
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
5b06cb5c2f099e3f2af775c317c13c9e
  $fSemigroupCombine ::
    Data.Semigroup.Semigroup b =>
    Data.Semigroup.Semigroup (SemigroupExercises.Combine a b)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ b
                      @ a
                      ($dSemigroup :: Data.Semigroup.Semigroup b).
                  @ (SemigroupExercises.Combine a b)
                  (SemigroupExercises.$fSemigroupCombine_$c<> @ b @ a $dSemigroup)
                  (SemigroupExercises.$fSemigroupCombine_$csconcat
                     @ b
                     @ a
                     $dSemigroup)
                  (SemigroupExercises.$fSemigroupCombine_$cstimes
                     @ b
                     @ a
                     $dSemigroup) -}
5b06cb5c2f099e3f2af775c317c13c9e
  $fSemigroupCombine_$c<> ::
    Data.Semigroup.Semigroup b =>
    SemigroupExercises.Combine a b
    -> SemigroupExercises.Combine a b -> SemigroupExercises.Combine a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Semigroup.$fSemigroup(->)_$c<>
                  `cast`
                (forall (b :: <*>_N) (a :: <*>_N).
                 <Data.Semigroup.Semigroup b>_R
                 ->_R Sym (SemigroupExercises.N:Combine[0]) <a>_N <b>_N
                 ->_R Sym (SemigroupExercises.N:Combine[0]) <a>_N <b>_N
                 ->_R Sym (SemigroupExercises.N:Combine[0]) <a>_N <b>_N) -}
5b06cb5c2f099e3f2af775c317c13c9e
  $fSemigroupCombine_$csconcat ::
    Data.Semigroup.Semigroup b =>
    Data.List.NonEmpty.NonEmpty (SemigroupExercises.Combine a b)
    -> SemigroupExercises.Combine a b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LS),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   @ a
                   (w :: Data.Semigroup.Semigroup b)
                   (w1 :: Data.List.NonEmpty.NonEmpty
                            (SemigroupExercises.Combine a b)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 SemigroupExercises.$w$csconcat2 @ b @ a w ww1 ww2 }) -}
5b06cb5c2f099e3f2af775c317c13c9e
  $fSemigroupCombine_$cstimes ::
    Data.Semigroup.Semigroup b =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1
    -> SemigroupExercises.Combine a b -> SemigroupExercises.Combine a b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U> -}
db3067e4b4b1cadbdaefc63bf44644ee
  $fSemigroupComp ::
    Data.Semigroup.Semigroup (SemigroupExercises.Comp a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (SemigroupExercises.Comp a)
                  (SemigroupExercises.$fSemigroupComp_$c<> @ a)
                  (SemigroupExercises.$fSemigroupComp_$csconcat @ a)
                  (SemigroupExercises.$fSemigroupComp_$cstimes @ a) -}
db3067e4b4b1cadbdaefc63bf44644ee
  $fSemigroupComp1 ::
    SemigroupExercises.Comp a
    -> [SemigroupExercises.Comp a] -> SemigroupExercises.Comp a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
db3067e4b4b1cadbdaefc63bf44644ee
  $fSemigroupComp2 ::
    SemigroupExercises.Comp a -> SemigroupExercises.Comp a -> a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (ds :: SemigroupExercises.Comp a)
                   (ds1 :: SemigroupExercises.Comp a)
                   (eta :: a) ->
                 ds `cast` (SemigroupExercises.N:Comp[0] <a>_R)
                   (ds1 `cast` (SemigroupExercises.N:Comp[0] <a>_R) eta)) -}
db3067e4b4b1cadbdaefc63bf44644ee
  $fSemigroupComp_$c<> ::
    SemigroupExercises.Comp a
    -> SemigroupExercises.Comp a -> SemigroupExercises.Comp a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.$fSemigroupComp2
                  `cast`
                (forall (a :: <*>_N).
                 <SemigroupExercises.Comp a>_R
                 ->_R <SemigroupExercises.Comp a>_R
                 ->_R Sym (SemigroupExercises.N:Comp[0] <a>_R)) -}
db3067e4b4b1cadbdaefc63bf44644ee
  $fSemigroupComp_$csconcat ::
    Data.List.NonEmpty.NonEmpty (SemigroupExercises.Comp a)
    -> SemigroupExercises.Comp a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (w :: Data.List.NonEmpty.NonEmpty (SemigroupExercises.Comp a)) ->
                 case w of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 SemigroupExercises.$fSemigroupComp1 @ a ww1 ww2 }) -}
db3067e4b4b1cadbdaefc63bf44644ee
  $fSemigroupComp_$cstimes ::
    GHC.Real.Integral b =>
    b -> SemigroupExercises.Comp a -> SemigroupExercises.Comp a
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U> -}
4082cd6fd45bcfbae2731afee68de2d4
  $fSemigroupFour ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    Data.Semigroup.Semigroup (SemigroupExercises.Four a b c d)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                      ($dSemigroup2 :: Data.Semigroup.Semigroup c)
                      ($dSemigroup3 :: Data.Semigroup.Semigroup d).
                  @ (SemigroupExercises.Four a b c d)
                  (SemigroupExercises.$fSemigroupFour_$c<>
                     @ a
                     @ b
                     @ c
                     @ d
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2
                     $dSemigroup3)
                  (SemigroupExercises.$fSemigroupFour_$csconcat
                     @ a
                     @ b
                     @ c
                     @ d
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2
                     $dSemigroup3)
                  (SemigroupExercises.$fSemigroupFour_$cstimes
                     @ a
                     @ b
                     @ c
                     @ d
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2
                     $dSemigroup3) -}
4082cd6fd45bcfbae2731afee68de2d4
  $fSemigroupFour_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    SemigroupExercises.Four a b c d
    -> SemigroupExercises.Four a b c d
    -> SemigroupExercises.Four a b c d
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   (w4 :: SemigroupExercises.Four a b c d)
                   (w5 :: SemigroupExercises.Four a b c d) ->
                 case w4 of ww { SemigroupExercises.Four ww1 ww2 ww3 ww4 ->
                 case w5 of ww5 { SemigroupExercises.Four ww6 ww7 ww8 ww9 ->
                 SemigroupExercises.Four
                   @ a
                   @ b
                   @ c
                   @ d
                   (Data.Semigroup.<> @ a w ww1 ww6)
                   (Data.Semigroup.<> @ b w1 ww2 ww7)
                   (Data.Semigroup.<> @ c w2 ww3 ww8)
                   (Data.Semigroup.<> @ d w3 ww4 ww9) } }) -}
4082cd6fd45bcfbae2731afee68de2d4
  $fSemigroupFour_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    Data.List.NonEmpty.NonEmpty (SemigroupExercises.Four a b c d)
    -> SemigroupExercises.Four a b c d
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U,U,U),1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   (w4 :: Data.List.NonEmpty.NonEmpty
                            (SemigroupExercises.Four a b c d)) ->
                 case w4 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 case ww1 of ww3 { SemigroupExercises.Four ww4 ww5 ww6 ww7 ->
                 case SemigroupExercises.$w$csconcat3
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww2 of ww8 { (#,,,#) ww9 ww10 ww11 ww12 ->
                 SemigroupExercises.Four
                   @ a
                   @ b
                   @ c
                   @ d
                   ww9
                   ww10
                   ww11
                   ww12 } } }) -}
4082cd6fd45bcfbae2731afee68de2d4
  $fSemigroupFour_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1
    -> SemigroupExercises.Four a b c d
    -> SemigroupExercises.Four a b c d
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U(U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   @ b1
                   (w4 :: GHC.Real.Integral b1)
                   (w5 :: b1)
                   (w6 :: SemigroupExercises.Four a b c d) ->
                 case w6 of ww { SemigroupExercises.Four ww1 ww2 ww3 ww4 ->
                 case SemigroupExercises.$w$cstimes
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        @ b1
                        w4
                        w5
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,,#) ww6 ww7 ww8 ww9 ->
                 SemigroupExercises.Four @ a @ b @ c @ d ww6 ww7 ww8 ww9 } }) -}
4dbfc797ac50962695a70257cacde984
  $fSemigroupIdentity ::
    Data.Semigroup.Semigroup a =>
    Data.Semigroup.Semigroup (SemigroupExercises.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dSemigroup :: Data.Semigroup.Semigroup a).
                  @ (SemigroupExercises.Identity a)
                  (SemigroupExercises.$fSemigroupIdentity_$c<> @ a $dSemigroup)
                  (SemigroupExercises.$fSemigroupIdentity_$csconcat @ a $dSemigroup)
                  (SemigroupExercises.$fSemigroupIdentity_$cstimes
                     @ a
                     $dSemigroup) -}
4dbfc797ac50962695a70257cacde984
  $fSemigroupIdentity1 ::
    Data.Semigroup.Semigroup a =>
    SemigroupExercises.Identity a -> SemigroupExercises.Identity a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   (ds :: SemigroupExercises.Identity a)
                   (ds1 :: SemigroupExercises.Identity a) ->
                 Data.Semigroup.<>
                   @ a
                   $dSemigroup
                   ds `cast` (SemigroupExercises.N:Identity[0] <a>_R)
                   ds1 `cast` (SemigroupExercises.N:Identity[0] <a>_R)) -}
4dbfc797ac50962695a70257cacde984
  $fSemigroupIdentity_$c<> ::
    Data.Semigroup.Semigroup a =>
    SemigroupExercises.Identity a
    -> SemigroupExercises.Identity a -> SemigroupExercises.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.$fSemigroupIdentity1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Semigroup.Semigroup a>_R
                 ->_R <SemigroupExercises.Identity a>_R
                 ->_R <SemigroupExercises.Identity a>_R
                 ->_R Sym (SemigroupExercises.N:Identity[0] <a>_R)) -}
4dbfc797ac50962695a70257cacde984
  $fSemigroupIdentity_$csconcat ::
    Data.Semigroup.Semigroup a =>
    Data.List.NonEmpty.NonEmpty (SemigroupExercises.Identity a)
    -> SemigroupExercises.Identity a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LS),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.List.NonEmpty.NonEmpty
                            (SemigroupExercises.Identity a)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 SemigroupExercises.$w$csconcat4 @ a w ww1 ww2 }) -}
4dbfc797ac50962695a70257cacde984
  $fSemigroupIdentity_$cstimes ::
    Data.Semigroup.Semigroup a =>
    forall b.
    GHC.Real.Integral b =>
    b -> SemigroupExercises.Identity a -> SemigroupExercises.Identity a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U> -}
6b70697a115eb259ba3a128ef9e53b67
  $fSemigroupOr ::
    Data.Semigroup.Semigroup (SemigroupExercises.Or a b)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a @ b.
                  @ (SemigroupExercises.Or a b)
                  (SemigroupExercises.$fSemigroupOr_$c<> @ a @ b)
                  (SemigroupExercises.$fSemigroupOr_$csconcat @ a @ b)
                  (SemigroupExercises.$fSemigroupOr_$cstimes @ a @ b) -}
6b70697a115eb259ba3a128ef9e53b67
  $fSemigroupOr1 ::
    SemigroupExercises.Or a b
    -> [SemigroupExercises.Or a b] -> SemigroupExercises.Or a b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
6b70697a115eb259ba3a128ef9e53b67
  $fSemigroupOr_$c<> ::
    SemigroupExercises.Or a b
    -> SemigroupExercises.Or a b -> SemigroupExercises.Or a b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (sec :: SemigroupExercises.Or a b)
                   (ds :: SemigroupExercises.Or a b) ->
                 case sec of wild {
                   SemigroupExercises.Fst ipv -> ds
                   SemigroupExercises.Snd ds1 -> wild }) -}
6b70697a115eb259ba3a128ef9e53b67
  $fSemigroupOr_$csconcat ::
    Data.List.NonEmpty.NonEmpty (SemigroupExercises.Or a b)
    -> SemigroupExercises.Or a b
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (w :: Data.List.NonEmpty.NonEmpty (SemigroupExercises.Or a b)) ->
                 case w of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 SemigroupExercises.$fSemigroupOr1 @ a @ b ww1 ww2 }) -}
6b70697a115eb259ba3a128ef9e53b67
  $fSemigroupOr_$cstimes ::
    GHC.Real.Integral b1 =>
    b1 -> SemigroupExercises.Or a b -> SemigroupExercises.Or a b
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
94a4a888e362b10d842c13eb6a414550
  $fSemigroupThree ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    Data.Semigroup.Semigroup (SemigroupExercises.Three a b c)
  DFunId
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                      ($dSemigroup2 :: Data.Semigroup.Semigroup c).
                  @ (SemigroupExercises.Three a b c)
                  (SemigroupExercises.$fSemigroupThree_$c<>
                     @ a
                     @ b
                     @ c
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2)
                  (SemigroupExercises.$fSemigroupThree_$csconcat
                     @ a
                     @ b
                     @ c
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2)
                  (SemigroupExercises.$fSemigroupThree_$cstimes
                     @ a
                     @ b
                     @ c
                     $dSemigroup
                     $dSemigroup1
                     $dSemigroup2) -}
94a4a888e362b10d842c13eb6a414550
  $fSemigroupThree_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    SemigroupExercises.Three a b c
    -> SemigroupExercises.Three a b c -> SemigroupExercises.Three a b c
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U)><S,1*U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: SemigroupExercises.Three a b c)
                   (w4 :: SemigroupExercises.Three a b c) ->
                 case w3 of ww { SemigroupExercises.Three ww1 ww2 ww3 ->
                 case w4 of ww4 { SemigroupExercises.Three ww5 ww6 ww7 ->
                 SemigroupExercises.Three
                   @ a
                   @ b
                   @ c
                   (Data.Semigroup.<> @ a w ww1 ww5)
                   (Data.Semigroup.<> @ b w1 ww2 ww6)
                   (Data.Semigroup.<> @ c w2 ww3 ww7) } }) -}
94a4a888e362b10d842c13eb6a414550
  $fSemigroupThree_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    Data.List.NonEmpty.NonEmpty (SemigroupExercises.Three a b c)
    -> SemigroupExercises.Three a b c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U,U),1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.List.NonEmpty.NonEmpty
                            (SemigroupExercises.Three a b c)) ->
                 case w3 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 case ww1 of ww3 { SemigroupExercises.Three ww4 ww5 ww6 ->
                 case SemigroupExercises.$w$csconcat5
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        ww4
                        ww5
                        ww6
                        ww2 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 SemigroupExercises.Three @ a @ b @ c ww8 ww9 ww10 } } }) -}
94a4a888e362b10d842c13eb6a414550
  $fSemigroupThree_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1
    -> SemigroupExercises.Three a b c -> SemigroupExercises.Three a b c
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   @ b1
                   (w3 :: GHC.Real.Integral b1)
                   (w4 :: b1)
                   (w5 :: SemigroupExercises.Three a b c) ->
                 case w5 of ww { SemigroupExercises.Three ww1 ww2 ww3 ->
                 case SemigroupExercises.$w$cstimes1
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        @ b1
                        w3
                        w4
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 SemigroupExercises.Three @ a @ b @ c ww5 ww6 ww7 } }) -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fSemigroupTrivial ::
    Data.Semigroup.Semigroup SemigroupExercises.Trivial
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SemigroupExercises.Trivial
                  SemigroupExercises.$fSemigroupTrivial_$c<>
                  SemigroupExercises.$fSemigroupTrivial_$csconcat
                  SemigroupExercises.$fSemigroupTrivial_$cstimes -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fSemigroupTrivial_$c<> ::
    SemigroupExercises.Trivial
    -> SemigroupExercises.Trivial -> SemigroupExercises.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: SemigroupExercises.Trivial)
                   (ds1 :: SemigroupExercises.Trivial) ->
                 SemigroupExercises.Trivial) -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fSemigroupTrivial_$csconcat ::
    Data.List.NonEmpty.NonEmpty SemigroupExercises.Trivial
    -> SemigroupExercises.Trivial
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*U(),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.List.NonEmpty.NonEmpty
                            SemigroupExercises.Trivial) ->
                 case ds of wild { Data.List.NonEmpty.:| a1 as ->
                 case as of wild1 {
                   [] -> a1 : c cs -> SemigroupExercises.Trivial } }) -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fSemigroupTrivial_$cstimes ::
    GHC.Real.Integral b =>
    b -> SemigroupExercises.Trivial -> SemigroupExercises.Trivial
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,1*U()> -}
88aba6fec3955c1d3f630dd605e863ec
  $fSemigroupTwo ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.Semigroup.Semigroup (SemigroupExercises.Two a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b).
                  @ (SemigroupExercises.Two a b)
                  (SemigroupExercises.$fSemigroupTwo_$c<>
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1)
                  (SemigroupExercises.$fSemigroupTwo_$csconcat
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1)
                  (SemigroupExercises.$fSemigroupTwo_$cstimes
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1) -}
88aba6fec3955c1d3f630dd605e863ec
  $fSemigroupTwo_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    SemigroupExercises.Two a b
    -> SemigroupExercises.Two a b -> SemigroupExercises.Two a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                   (ds :: SemigroupExercises.Two a b)
                   (ds1 :: SemigroupExercises.Two a b) ->
                 case ds of wild { SemigroupExercises.Two a0 b0 ->
                 case ds1 of wild1 { SemigroupExercises.Two a1 b1 ->
                 SemigroupExercises.Two
                   @ a
                   @ b
                   (Data.Semigroup.<> @ a $dSemigroup a0 a1)
                   (Data.Semigroup.<> @ b $dSemigroup1 b0 b1) } }) -}
88aba6fec3955c1d3f630dd605e863ec
  $fSemigroupTwo_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.List.NonEmpty.NonEmpty (SemigroupExercises.Two a b)
    -> SemigroupExercises.Two a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U),1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.List.NonEmpty.NonEmpty (SemigroupExercises.Two a b)) ->
                 case w2 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 case ww1 of ww3 { SemigroupExercises.Two ww4 ww5 ->
                 case SemigroupExercises.$w$csconcat6
                        @ a
                        @ b
                        w
                        w1
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 SemigroupExercises.Two @ a @ b ww7 ww8 } } }) -}
88aba6fec3955c1d3f630dd605e863ec
  $fSemigroupTwo_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> SemigroupExercises.Two a b -> SemigroupExercises.Two a b
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   @ b1
                   (w2 :: GHC.Real.Integral b1)
                   (w3 :: b1)
                   (w4 :: SemigroupExercises.Two a b) ->
                 case w4 of ww { SemigroupExercises.Two ww1 ww2 ->
                 case SemigroupExercises.$w$cstimes2
                        @ a
                        @ b
                        w
                        w1
                        @ b1
                        w2
                        w3
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 SemigroupExercises.Two @ a @ b ww4 ww5 } }) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fSemigroupValidation ::
    Data.Semigroup.Semigroup a =>
    Data.Semigroup.Semigroup (SemigroupExercises.Validation a b)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dSemigroup :: Data.Semigroup.Semigroup a).
                  @ (SemigroupExercises.Validation a b)
                  (SemigroupExercises.$fSemigroupValidation_$c<> @ a @ b $dSemigroup)
                  (SemigroupExercises.$fSemigroupValidation_$csconcat
                     @ a
                     @ b
                     $dSemigroup)
                  (SemigroupExercises.$fSemigroupValidation_$cstimes
                     @ a
                     @ b
                     $dSemigroup) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fSemigroupValidation_$c<> ::
    Data.Semigroup.Semigroup a =>
    SemigroupExercises.Validation a b
    -> SemigroupExercises.Validation a b
    -> SemigroupExercises.Validation a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   (ds :: SemigroupExercises.Validation a b)
                   (ds1 :: SemigroupExercises.Validation a b) ->
                 case ds of wild {
                   SemigroupExercises.Fail a0
                   -> case ds1 of wild1 {
                        SemigroupExercises.Fail a1
                        -> SemigroupExercises.Fail
                             @ a
                             @ b
                             (Data.Semigroup.<> @ a $dSemigroup a0 a1)
                        SemigroupExercises.Succ ipv -> wild }
                   SemigroupExercises.Succ ipv
                   -> case ds1 of wild1 {
                        SemigroupExercises.Fail ds2 -> wild1
                        SemigroupExercises.Succ ipv1 -> wild } }) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fSemigroupValidation_$csconcat ::
    Data.Semigroup.Semigroup a =>
    Data.List.NonEmpty.NonEmpty (SemigroupExercises.Validation a b)
    -> SemigroupExercises.Validation a b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.List.NonEmpty.NonEmpty
                            (SemigroupExercises.Validation a b)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 SemigroupExercises.$w$csconcat7 @ a @ b w ww1 ww2 }) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fSemigroupValidation_$cstimes ::
    Data.Semigroup.Semigroup a =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1
    -> SemigroupExercises.Validation a b
    -> SemigroupExercises.Validation a b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
6ec030974f3ac8561ca93839591b4b84
  $fShowAccumulateBoth ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Show.Show (SemigroupExercises.AccumulateBoth a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow7 :: GHC.Show.Show a)
                      ($dShow8 :: GHC.Show.Show b).
                  @ (SemigroupExercises.AccumulateBoth a b)
                  (SemigroupExercises.$fShowAccumulateBoth_$cshowsPrec
                     @ a
                     @ b
                     $dShow7
                     $dShow8)
                  (SemigroupExercises.$fShowAccumulateBoth_$cshow
                     @ a
                     @ b
                     $dShow7
                     $dShow8)
                  (SemigroupExercises.$fShowAccumulateBoth_$cshowList
                     @ a
                     @ b
                     $dShow7
                     $dShow8) -}
fc2723eb49b66253adc49d6a626ea0e5
  $fShowAccumulateBoth1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
1dd39c74b6f58dc0d6f2231e6928229f
  $fShowAccumulateBoth2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AccumulateBoth "#) -}
8abb673a3377a514133bcea29b836162
  $fShowAccumulateBoth3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Succ "#) -}
d301c2128244206244954add8d872898
  $fShowAccumulateBoth4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fail "#) -}
bf382d9537ac048112eb161104a50b06
  $fShowAccumulateBoth5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
f88819827914f90dea06bf6c2f55e5e7
  $fShowAccumulateBoth6 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6ec030974f3ac8561ca93839591b4b84
  $fShowAccumulateBoth_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    SemigroupExercises.AccumulateBoth a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show a)
                   ($dShow8 :: GHC.Show.Show b)
                   (x :: SemigroupExercises.AccumulateBoth a b) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   SemigroupExercises.$fShowAccumulateBoth2
                   (case x `cast`
                         (SemigroupExercises.N:AccumulateBoth[0] <a>_N <b>_N) of wild {
                      SemigroupExercises.Fail b1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (GHC.Base.++
                              @ GHC.Types.Char
                              SemigroupExercises.$fShowAccumulateBoth4
                              (GHC.Show.showsPrec
                                 @ a
                                 $dShow7
                                 SemigroupExercises.$fShowAccumulateBoth5
                                 b1
                                 SemigroupExercises.$fShowAccumulateBoth6))
                      SemigroupExercises.Succ b1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (GHC.Base.++
                              @ GHC.Types.Char
                              SemigroupExercises.$fShowAccumulateBoth3
                              (GHC.Show.showsPrec
                                 @ b
                                 $dShow8
                                 SemigroupExercises.$fShowAccumulateBoth5
                                 b1
                                 SemigroupExercises.$fShowAccumulateBoth6)) })) -}
6ec030974f3ac8561ca93839591b4b84
  $fShowAccumulateBoth_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    [SemigroupExercises.AccumulateBoth a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show a)
                   ($dShow8 :: GHC.Show.Show b)
                   (eta :: [SemigroupExercises.AccumulateBoth a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (SemigroupExercises.AccumulateBoth a b)
                   (SemigroupExercises.$fShowAccumulateBoth_$cshowsPrec
                      @ a
                      @ b
                      $dShow7
                      $dShow8
                      SemigroupExercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
6ec030974f3ac8561ca93839591b4b84
  $fShowAccumulateBoth_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Types.Int
    -> SemigroupExercises.AccumulateBoth a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Types.Int)
                   (w3 :: SemigroupExercises.AccumulateBoth a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 SemigroupExercises.$w$cshowsPrec @ a @ b w w1 ww1 w3 }) -}
99054518ead02c7186cf4a1fe6083f8d
  $fShowAccumulateRight ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Show.Show (SemigroupExercises.AccumulateRight a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow7 :: GHC.Show.Show a)
                      ($dShow8 :: GHC.Show.Show b).
                  @ (SemigroupExercises.AccumulateRight a b)
                  (SemigroupExercises.$fShowAccumulateRight_$cshowsPrec
                     @ a
                     @ b
                     $dShow7
                     $dShow8)
                  (SemigroupExercises.$fShowAccumulateRight_$cshow
                     @ a
                     @ b
                     $dShow7
                     $dShow8)
                  (SemigroupExercises.$fShowAccumulateRight_$cshowList
                     @ a
                     @ b
                     $dShow7
                     $dShow8) -}
540b33f1b652f753789dad1283083d4a
  $fShowAccumulateRight1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AccumulateRight "#) -}
99054518ead02c7186cf4a1fe6083f8d
  $fShowAccumulateRight_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    SemigroupExercises.AccumulateRight a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show a)
                   ($dShow8 :: GHC.Show.Show b)
                   (x :: SemigroupExercises.AccumulateRight a b) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   SemigroupExercises.$fShowAccumulateRight1
                   (case x `cast`
                         (SemigroupExercises.N:AccumulateRight[0] <a>_N <b>_N) of wild {
                      SemigroupExercises.Fail b1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (GHC.Base.++
                              @ GHC.Types.Char
                              SemigroupExercises.$fShowAccumulateBoth4
                              (GHC.Show.showsPrec
                                 @ a
                                 $dShow7
                                 SemigroupExercises.$fShowAccumulateBoth5
                                 b1
                                 SemigroupExercises.$fShowAccumulateBoth6))
                      SemigroupExercises.Succ b1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (GHC.Base.++
                              @ GHC.Types.Char
                              SemigroupExercises.$fShowAccumulateBoth3
                              (GHC.Show.showsPrec
                                 @ b
                                 $dShow8
                                 SemigroupExercises.$fShowAccumulateBoth5
                                 b1
                                 SemigroupExercises.$fShowAccumulateBoth6)) })) -}
99054518ead02c7186cf4a1fe6083f8d
  $fShowAccumulateRight_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    [SemigroupExercises.AccumulateRight a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show a)
                   ($dShow8 :: GHC.Show.Show b)
                   (eta :: [SemigroupExercises.AccumulateRight a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (SemigroupExercises.AccumulateRight a b)
                   (SemigroupExercises.$fShowAccumulateRight_$cshowsPrec
                      @ a
                      @ b
                      $dShow7
                      $dShow8
                      SemigroupExercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
99054518ead02c7186cf4a1fe6083f8d
  $fShowAccumulateRight_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Types.Int
    -> SemigroupExercises.AccumulateRight a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Types.Int)
                   (w3 :: SemigroupExercises.AccumulateRight a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 SemigroupExercises.$w$cshowsPrec2 @ a @ b w w1 ww1 w3 }) -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fShowBoolConj :: GHC.Show.Show SemigroupExercises.BoolConj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SemigroupExercises.BoolConj
                  SemigroupExercises.$fShowBoolConj_$cshowsPrec
                  SemigroupExercises.$fShowBoolConj_$cshow
                  SemigroupExercises.$fShowBoolConj_$cshowList -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fShowBoolConj1 :: SemigroupExercises.BoolConj -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: SemigroupExercises.BoolConj)
                   (w1 :: GHC.Base.String) ->
                 SemigroupExercises.$w$cshowsPrec3 0# w w1) -}
b40074b24e947a5399a0e849d58c66c9
  $fShowBoolConj2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BoolConj "#) -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fShowBoolConj_$cshow ::
    SemigroupExercises.BoolConj -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: SemigroupExercises.BoolConj) ->
                 SemigroupExercises.$fShowBoolConj_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fShowBoolConj_$cshowList ::
    [SemigroupExercises.BoolConj] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ SemigroupExercises.BoolConj
                   SemigroupExercises.$fShowBoolConj1) -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $fShowBoolConj_$cshowsPrec ::
    GHC.Types.Int -> SemigroupExercises.BoolConj -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: SemigroupExercises.BoolConj)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 SemigroupExercises.$w$cshowsPrec3 ww1 w1 w2 }) -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fShowBoolDisj :: GHC.Show.Show SemigroupExercises.BoolDisj
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SemigroupExercises.BoolDisj
                  SemigroupExercises.$fShowBoolDisj_$cshowsPrec
                  SemigroupExercises.$fShowBoolDisj_$cshow
                  SemigroupExercises.$fShowBoolDisj_$cshowList -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fShowBoolDisj1 :: SemigroupExercises.BoolDisj -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: SemigroupExercises.BoolDisj)
                   (w1 :: GHC.Base.String) ->
                 SemigroupExercises.$w$cshowsPrec4 0# w w1) -}
8ad4f5a751ca5f624ff3325e451206ed
  $fShowBoolDisj2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BoolDisj "#) -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fShowBoolDisj_$cshow ::
    SemigroupExercises.BoolDisj -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: SemigroupExercises.BoolDisj) ->
                 SemigroupExercises.$fShowBoolDisj_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fShowBoolDisj_$cshowList ::
    [SemigroupExercises.BoolDisj] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ SemigroupExercises.BoolDisj
                   SemigroupExercises.$fShowBoolDisj1) -}
ecdf6a3a2508264e26d1d66f82627cf5
  $fShowBoolDisj_$cshowsPrec ::
    GHC.Types.Int -> SemigroupExercises.BoolDisj -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: SemigroupExercises.BoolDisj)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 SemigroupExercises.$w$cshowsPrec4 ww1 w1 w2 }) -}
4082cd6fd45bcfbae2731afee68de2d4
  $fShowFour ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    GHC.Show.Show (SemigroupExercises.Four a b c d)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dShow7 :: GHC.Show.Show d)
                      ($dShow8 :: GHC.Show.Show c)
                      ($dShow9 :: GHC.Show.Show b)
                      ($dShow10 :: GHC.Show.Show a).
                  @ (SemigroupExercises.Four a b c d)
                  (SemigroupExercises.$fShowFour_$cshowsPrec
                     @ a
                     @ b
                     @ c
                     @ d
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10)
                  (SemigroupExercises.$fShowFour_$cshow
                     @ a
                     @ b
                     @ c
                     @ d
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10)
                  (SemigroupExercises.$fShowFour_$cshowList
                     @ a
                     @ b
                     @ c
                     @ d
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10) -}
b6c47d54af70d916635546a7fa69e972
  $fShowFour1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Four "#) -}
4082cd6fd45bcfbae2731afee68de2d4
  $fShowFour_$cshow ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    SemigroupExercises.Four a b c d -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dShow7 :: GHC.Show.Show d)
                   ($dShow8 :: GHC.Show.Show c)
                   ($dShow9 :: GHC.Show.Show b)
                   ($dShow10 :: GHC.Show.Show a)
                   (x :: SemigroupExercises.Four a b c d) ->
                 SemigroupExercises.$fShowFour_$cshowsPrec
                   @ a
                   @ b
                   @ c
                   @ d
                   $dShow7
                   $dShow8
                   $dShow9
                   $dShow10
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4082cd6fd45bcfbae2731afee68de2d4
  $fShowFour_$cshowList ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    [SemigroupExercises.Four a b c d] -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dShow7 :: GHC.Show.Show d)
                   ($dShow8 :: GHC.Show.Show c)
                   ($dShow9 :: GHC.Show.Show b)
                   ($dShow10 :: GHC.Show.Show a)
                   (eta :: [SemigroupExercises.Four a b c d])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (SemigroupExercises.Four a b c d)
                   (SemigroupExercises.$fShowFour_$cshowsPrec
                      @ a
                      @ b
                      @ c
                      @ d
                      $dShow7
                      $dShow8
                      $dShow9
                      $dShow10
                      SemigroupExercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
4082cd6fd45bcfbae2731afee68de2d4
  $fShowFour_$cshowsPrec ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    GHC.Types.Int -> SemigroupExercises.Four a b c d -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Show.Show d)
                   (w1 :: GHC.Show.Show c)
                   (w2 :: GHC.Show.Show b)
                   (w3 :: GHC.Show.Show a)
                   (w4 :: GHC.Types.Int)
                   (w5 :: SemigroupExercises.Four a b c d) ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 case w5 of ww2 { SemigroupExercises.Four ww3 ww4 ww5 ww6 ->
                 SemigroupExercises.$w$cshowsPrec5
                   @ a
                   @ b
                   @ c
                   @ d
                   w
                   w1
                   w2
                   w3
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
4dbfc797ac50962695a70257cacde984
  $fShowIdentity ::
    GHC.Show.Show a => GHC.Show.Show (SemigroupExercises.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow7 :: GHC.Show.Show a).
                  @ (SemigroupExercises.Identity a)
                  (SemigroupExercises.$fShowIdentity_$cshowsPrec @ a $dShow7)
                  (SemigroupExercises.$fShowIdentity_$cshow @ a $dShow7)
                  (SemigroupExercises.$fShowIdentity_$cshowList @ a $dShow7) -}
3f642fa3c821dd21029616602d294fcb
  $fShowIdentity1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Identity "#) -}
4dbfc797ac50962695a70257cacde984
  $fShowIdentity_$cshow ::
    GHC.Show.Show a => SemigroupExercises.Identity a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow7 :: GHC.Show.Show a)
                   (x :: SemigroupExercises.Identity a) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      SemigroupExercises.$fShowIdentity1)
                   (GHC.Show.showsPrec
                      @ a
                      $dShow7
                      SemigroupExercises.$fShowAccumulateBoth5
                      x `cast` (SemigroupExercises.N:Identity[0] <a>_R)
                      (GHC.Types.[] @ GHC.Types.Char))) -}
4dbfc797ac50962695a70257cacde984
  $fShowIdentity_$cshowList ::
    GHC.Show.Show a =>
    [SemigroupExercises.Identity a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow7 :: GHC.Show.Show a)
                   (eta :: [SemigroupExercises.Identity a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (SemigroupExercises.Identity a)
                   (SemigroupExercises.$fShowIdentity_$cshowsPrec
                      @ a
                      $dShow7
                      SemigroupExercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
4dbfc797ac50962695a70257cacde984
  $fShowIdentity_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> SemigroupExercises.Identity a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: SemigroupExercises.Identity a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 SemigroupExercises.$w$cshowsPrec6 @ a w ww1 w2 }) -}
6b70697a115eb259ba3a128ef9e53b67
  $fShowOr ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (SemigroupExercises.Or a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow7 :: GHC.Show.Show b)
                      ($dShow8 :: GHC.Show.Show a).
                  @ (SemigroupExercises.Or a b)
                  (SemigroupExercises.$fShowOr_$cshowsPrec @ a @ b $dShow7 $dShow8)
                  (SemigroupExercises.$fShowOr_$cshow @ a @ b $dShow7 $dShow8)
                  (SemigroupExercises.$fShowOr_$cshowList @ a @ b $dShow7 $dShow8) -}
6b70697a115eb259ba3a128ef9e53b67
  $fShowOr1 ::
    SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: SemigroupExercises.Or
                           GHC.Types.Int GHC.Types.Bool)
                   (w1 :: GHC.Base.String) ->
                 SemigroupExercises.$w$s$cshowsPrec 0# w w1) -}
092dd83895ee1c0e8f21266fcce7b0ba
  $fShowOr2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Snd "#) -}
a5b938e97600b61c79da7d187937e54e
  $fShowOr3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fst "#) -}
6b70697a115eb259ba3a128ef9e53b67
  $fShowOr_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    SemigroupExercises.Or a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show b)
                   ($dShow8 :: GHC.Show.Show a)
                   (x :: SemigroupExercises.Or a b) ->
                 case x of wild {
                   SemigroupExercises.Fst b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        SemigroupExercises.$fShowOr3
                        (GHC.Show.showsPrec
                           @ a
                           $dShow8
                           SemigroupExercises.$fShowAccumulateBoth5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   SemigroupExercises.Snd b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        SemigroupExercises.$fShowOr2
                        (GHC.Show.showsPrec
                           @ b
                           $dShow7
                           SemigroupExercises.$fShowAccumulateBoth5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
6b70697a115eb259ba3a128ef9e53b67
  $fShowOr_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [SemigroupExercises.Or a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show b)
                   ($dShow8 :: GHC.Show.Show a)
                   (eta :: [SemigroupExercises.Or a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (SemigroupExercises.Or a b)
                   (SemigroupExercises.$fShowOr_$cshowsPrec
                      @ a
                      @ b
                      $dShow7
                      $dShow8
                      SemigroupExercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
6b70697a115eb259ba3a128ef9e53b67
  $fShowOr_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> SemigroupExercises.Or a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: SemigroupExercises.Or a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 SemigroupExercises.$w$cshowsPrec7 @ a @ b w w1 ww1 w3 }) -}
6b70697a115eb259ba3a128ef9e53b67
  $fShowOr_$s$cshow ::
    SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool) ->
                 SemigroupExercises.$fShowOr_$s$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6b70697a115eb259ba3a128ef9e53b67
  $fShowOr_$s$cshowList ::
    [SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool)
                   SemigroupExercises.$fShowOr1
                   eta
                   eta1) -}
6b70697a115eb259ba3a128ef9e53b67
  $fShowOr_$s$cshowsPrec ::
    GHC.Types.Int
    -> SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 SemigroupExercises.$w$s$cshowsPrec ww1 w1 w2 }) -}
6b70697a115eb259ba3a128ef9e53b67
  $fShowOr_$s$fShowOr ::
    GHC.Show.Show (SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool)
                  SemigroupExercises.$fShowOr_$s$cshowsPrec
                  SemigroupExercises.$fShowOr_$s$cshow
                  SemigroupExercises.$fShowOr_$s$cshowList -}
94a4a888e362b10d842c13eb6a414550
  $fShowThree ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (SemigroupExercises.Three a b c)
  DFunId
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dShow7 :: GHC.Show.Show c)
                      ($dShow8 :: GHC.Show.Show b)
                      ($dShow9 :: GHC.Show.Show a).
                  @ (SemigroupExercises.Three a b c)
                  (SemigroupExercises.$fShowThree_$cshowsPrec
                     @ a
                     @ b
                     @ c
                     $dShow7
                     $dShow8
                     $dShow9)
                  (SemigroupExercises.$fShowThree_$cshow
                     @ a
                     @ b
                     @ c
                     $dShow7
                     $dShow8
                     $dShow9)
                  (SemigroupExercises.$fShowThree_$cshowList
                     @ a
                     @ b
                     @ c
                     $dShow7
                     $dShow8
                     $dShow9) -}
45659ca2f7e01045ad9a05daa02a1d5d
  $fShowThree1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Three "#) -}
94a4a888e362b10d842c13eb6a414550
  $fShowThree_$cshow ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    SemigroupExercises.Three a b c -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dShow7 :: GHC.Show.Show c)
                   ($dShow8 :: GHC.Show.Show b)
                   ($dShow9 :: GHC.Show.Show a)
                   (x :: SemigroupExercises.Three a b c) ->
                 SemigroupExercises.$fShowThree_$cshowsPrec
                   @ a
                   @ b
                   @ c
                   $dShow7
                   $dShow8
                   $dShow9
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94a4a888e362b10d842c13eb6a414550
  $fShowThree_$cshowList ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    [SemigroupExercises.Three a b c] -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dShow7 :: GHC.Show.Show c)
                   ($dShow8 :: GHC.Show.Show b)
                   ($dShow9 :: GHC.Show.Show a)
                   (eta :: [SemigroupExercises.Three a b c])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (SemigroupExercises.Three a b c)
                   (SemigroupExercises.$fShowThree_$cshowsPrec
                      @ a
                      @ b
                      @ c
                      $dShow7
                      $dShow8
                      $dShow9
                      SemigroupExercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
94a4a888e362b10d842c13eb6a414550
  $fShowThree_$cshowsPrec ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> SemigroupExercises.Three a b c -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Show.Show c)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Show.Show a)
                   (w3 :: GHC.Types.Int)
                   (w4 :: SemigroupExercises.Three a b c) ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 case w4 of ww2 { SemigroupExercises.Three ww3 ww4 ww5 ->
                 SemigroupExercises.$w$cshowsPrec8
                   @ a
                   @ b
                   @ c
                   w
                   w1
                   w2
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fShowTrivial :: GHC.Show.Show SemigroupExercises.Trivial
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SemigroupExercises.Trivial
                  SemigroupExercises.$fShowTrivial_$cshowsPrec
                  SemigroupExercises.$fShowTrivial_$cshow
                  SemigroupExercises.$fShowTrivial_$cshowList -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fShowTrivial1 :: SemigroupExercises.Trivial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: SemigroupExercises.Trivial) (eta :: GHC.Base.String) ->
                 case ds of wild { SemigroupExercises.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      SemigroupExercises.$fShowTrivial2)
                   eta }) -}
c8551352776218454e813a8e11f0f0e5
  $fShowTrivial2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Trivial"#) -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fShowTrivial_$cshow ::
    SemigroupExercises.Trivial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: SemigroupExercises.Trivial) ->
                 case x of wild { SemigroupExercises.Trivial ->
                 SemigroupExercises.$fShowTrivial2 }) -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fShowTrivial_$cshowList ::
    [SemigroupExercises.Trivial] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ SemigroupExercises.Trivial
                   SemigroupExercises.$fShowTrivial1) -}
dcaf039bd6caaa5ff809a4d92eb372ea
  $fShowTrivial_$cshowsPrec ::
    GHC.Types.Int -> SemigroupExercises.Trivial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: SemigroupExercises.Trivial)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { SemigroupExercises.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      SemigroupExercises.$fShowTrivial2)
                   eta }) -}
88aba6fec3955c1d3f630dd605e863ec
  $fShowTwo ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (SemigroupExercises.Two a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow7 :: GHC.Show.Show b)
                      ($dShow8 :: GHC.Show.Show a).
                  @ (SemigroupExercises.Two a b)
                  (SemigroupExercises.$fShowTwo_$cshowsPrec @ a @ b $dShow7 $dShow8)
                  (SemigroupExercises.$fShowTwo_$cshow @ a @ b $dShow7 $dShow8)
                  (SemigroupExercises.$fShowTwo_$cshowList
                     @ a
                     @ b
                     $dShow7
                     $dShow8) -}
bc2a38ae0283e75f648d82485c162680
  $fShowTwo1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Two "#) -}
88aba6fec3955c1d3f630dd605e863ec
  $fShowTwo_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    SemigroupExercises.Two a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show b)
                   ($dShow8 :: GHC.Show.Show a)
                   (x :: SemigroupExercises.Two a b) ->
                 SemigroupExercises.$fShowTwo_$cshowsPrec
                   @ a
                   @ b
                   $dShow7
                   $dShow8
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
88aba6fec3955c1d3f630dd605e863ec
  $fShowTwo_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [SemigroupExercises.Two a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show b)
                   ($dShow8 :: GHC.Show.Show a)
                   (eta :: [SemigroupExercises.Two a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (SemigroupExercises.Two a b)
                   (SemigroupExercises.$fShowTwo_$cshowsPrec
                      @ a
                      @ b
                      $dShow7
                      $dShow8
                      SemigroupExercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
88aba6fec3955c1d3f630dd605e863ec
  $fShowTwo_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> SemigroupExercises.Two a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: SemigroupExercises.Two a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { SemigroupExercises.Two ww3 ww4 ->
                 SemigroupExercises.$w$cshowsPrec9 @ a @ b w w1 ww1 ww3 ww4 } }) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fShowValidation ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (SemigroupExercises.Validation a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow7 :: GHC.Show.Show b)
                      ($dShow8 :: GHC.Show.Show a).
                  @ (SemigroupExercises.Validation a b)
                  (SemigroupExercises.$fShowValidation_$cshowsPrec
                     @ a
                     @ b
                     $dShow7
                     $dShow8)
                  (SemigroupExercises.$fShowValidation_$cshow
                     @ a
                     @ b
                     $dShow7
                     $dShow8)
                  (SemigroupExercises.$fShowValidation_$cshowList
                     @ a
                     @ b
                     $dShow7
                     $dShow8) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fShowValidation_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    SemigroupExercises.Validation a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show b)
                   ($dShow8 :: GHC.Show.Show a)
                   (x :: SemigroupExercises.Validation a b) ->
                 case x of wild {
                   SemigroupExercises.Fail b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        SemigroupExercises.$fShowAccumulateBoth4
                        (GHC.Show.showsPrec
                           @ a
                           $dShow8
                           SemigroupExercises.$fShowAccumulateBoth5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   SemigroupExercises.Succ b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        SemigroupExercises.$fShowAccumulateBoth3
                        (GHC.Show.showsPrec
                           @ b
                           $dShow7
                           SemigroupExercises.$fShowAccumulateBoth5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fShowValidation_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [SemigroupExercises.Validation a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow7 :: GHC.Show.Show b)
                   ($dShow8 :: GHC.Show.Show a)
                   (eta :: [SemigroupExercises.Validation a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (SemigroupExercises.Validation a b)
                   (SemigroupExercises.$fShowValidation_$cshowsPrec
                      @ a
                      @ b
                      $dShow7
                      $dShow8
                      SemigroupExercises.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
f266fe0821b39eea50aacafb9bf64fc0
  $fShowValidation_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int
    -> SemigroupExercises.Validation a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: SemigroupExercises.Validation a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 SemigroupExercises.$w$cshowsPrec1 @ a @ b w w1 ww1 w3 }) -}
d2b18e108d25e06ad206323631a79551
  $s$fShowNonEmpty ::
    GHC.Show.Show (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                  (Data.List.NonEmpty.$fShowNonEmpty_$cshowsPrec
                     @ GHC.Types.Char
                     GHC.Show.$fShowChar)
                  SemigroupExercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshow
                  SemigroupExercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshowList -}
d13763e79fa7baad40625f7c29ed51c4
  $s$fShowNonEmpty1 ::
    GHC.Show.Show (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
                  (Data.List.NonEmpty.$fShowNonEmpty_$cshowsPrec
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt)
                  SemigroupExercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshow1
                  SemigroupExercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshowList1 -}
78620808394458774e3712eab3b1fc9b
  $s$fShowNonEmpty_$s$fShowNonEmpty_$cshow ::
    Data.List.NonEmpty.NonEmpty GHC.Types.Char -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S(S)L),1*U(1*U(1*U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.List.NonEmpty.NonEmpty GHC.Types.Char) ->
                 Data.List.NonEmpty.$fShowNonEmpty_$cshowsPrec
                   @ GHC.Types.Char
                   GHC.Show.$fShowChar
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8f530c736fb7be2fcb31c76a787fc507
  $s$fShowNonEmpty_$s$fShowNonEmpty_$cshow1 ::
    Data.List.NonEmpty.NonEmpty GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S(S)L),1*U(1*U(U),1*U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.List.NonEmpty.NonEmpty GHC.Types.Int) ->
                 Data.List.NonEmpty.$fShowNonEmpty_$cshowsPrec
                   @ GHC.Types.Int
                   GHC.Show.$fShowInt
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
67ac9682a58d343de8a1b4181e9a56f1
  $s$fShowNonEmpty_$s$fShowNonEmpty_$cshowList ::
    [Data.List.NonEmpty.NonEmpty GHC.Types.Char] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Data.List.NonEmpty.NonEmpty GHC.Types.Char])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                   (Data.List.NonEmpty.$fShowNonEmpty_$cshowsPrec
                      @ GHC.Types.Char
                      GHC.Show.$fShowChar
                      Data.List.NonEmpty.$fShowNonEmpty1)
                   eta
                   eta1) -}
1507c2bb4ebd5090420f2fc9a699ae49
  $s$fShowNonEmpty_$s$fShowNonEmpty_$cshowList1 ::
    [Data.List.NonEmpty.NonEmpty GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Data.List.NonEmpty.NonEmpty GHC.Types.Int])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.List.NonEmpty.NonEmpty GHC.Types.Int)
                   (Data.List.NonEmpty.$fShowNonEmpty_$cshowsPrec
                      @ GHC.Types.Int
                      GHC.Show.$fShowInt
                      Data.List.NonEmpty.$fShowNonEmpty1)
                   eta
                   eta1) -}
2767cb8e029cf1408ba4f10a4da7d199
  $tc'AccumulateBoth :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5789177265678804852##
                   5097265537193222790##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'AccumulateBoth1) -}
e4da3ef7515d93287edda0324b53bc19
  $tc'AccumulateBoth1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AccumulateBoth"#) -}
5a583df3d6faa82334d16a3da5fbbe9b
  $tc'AccumulateRight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4370817110602718978##
                   5089382815507920467##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'AccumulateRight1) -}
5c9922a9bebd0e10af44049195651741
  $tc'AccumulateRight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AccumulateRight"#) -}
d10260b3c7aec5281cb305f76c7b3fcb
  $tc'BoolConj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7564928479794506307##
                   5723004203248959587##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'BoolConj1) -}
468363efa58782a4ed53268424e4221a
  $tc'BoolConj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BoolConj"#) -}
83274ee1a9de159cb0f93e1a747f8f93
  $tc'BoolDisj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   45365136334127473##
                   2037979370796634285##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'BoolDisj1) -}
28246398baa806fa111adcb4479c2d49
  $tc'BoolDisj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BoolDisj"#) -}
fbab09d81e3a060a150a646129959609
  $tc'Combine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   859441808720295475##
                   7451345699309358763##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'Combine1) -}
89cfb29c2209b1ea4356ddd03cedf488
  $tc'Combine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Combine"#) -}
d494890a9aca3e0a98f26715c025f077
  $tc'Comp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9700685710264163787##
                   467854425776187253##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'Comp1) -}
96aca643d99a06ebd3d12633ace519be
  $tc'Comp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Comp"#) -}
9a3783589dcbb98fbf3d34be301c0e7a
  $tc'Fail :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5676189794189527730##
                   3380660515203241511##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'Fail1) -}
4357108bbd2d8a8838ce34f7f165e84d
  $tc'Fail1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fail"#) -}
7b925ff0eccf281cdc4d38b7343d978f
  $tc'Four :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1434459590593505534##
                   9617416184842114211##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'Four1) -}
2e185c2c4f3869dc2d494752e642cbbd
  $tc'Four1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Four"#) -}
4a68e05f9c39e405e7a377918fb76059
  $tc'Fst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   462192760083798945##
                   16675895787494632361##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'Fst1) -}
a1ab88424db4660002bda849ab3e31a2
  $tc'Fst1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fst"#) -}
c52823d67878114a5ff4240a6ae8de6e
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5376095347019677391##
                   5762242284822834072##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'Identity1) -}
cb25e4188afcefa0ba85042c259c20a4
  $tc'Identity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Identity"#) -}
01bb419a907880b45e1c158f93033051
  $tc'Snd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17623114708213597344##
                   14830521806415035796##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'Snd1) -}
bb678c963bc88ea90c666e1aee50b74c
  $tc'Snd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Snd"#) -}
b22050d0c68c1cde4602791aed963407
  $tc'Succ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14542705675704396847##
                   9009768350392741048##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'Succ1) -}
d4bf01110266a8753b9a4ad7a6574409
  $tc'Succ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Succ"#) -}
6b0535c274054998ebe1e12713075210
  $tc'Three :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17643680771690283742##
                   8043787990552130713##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'Three1) -}
0c19e7392d5228588a02b75478bdcd1d
  $tc'Three1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Three"#) -}
f95941ac73124d0162700ef95537d30c
  $tc'Trivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6989187669795741901##
                   8268575350770778159##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'Trivial1) -}
75b88f397b0a1441af1c806464b49db6
  $tc'Trivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Trivial"#) -}
caaea14c844e68ad1f16669ff88cc19f
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13971119631903030966##
                   12116502295113980365##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tc'Two1) -}
b32622074ae53e971f04be98422883f9
  $tc'Two1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Two"#) -}
791cd2c6a23e976511f88506180a1989
  $tcAccumulateBoth :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15080101360606529424##
                   6893128547859096964##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcAccumulateBoth1) -}
7716fe44256d8856c0afcc0d71c3ef0d
  $tcAccumulateBoth1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AccumulateBoth"#) -}
be19ff94256f77e5ecea0c954d7e9b83
  $tcAccumulateRight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3206753965049365660##
                   3672556619902220189##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcAccumulateRight1) -}
fd35c58e9f6141fd698fd675052a8d5f
  $tcAccumulateRight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AccumulateRight"#) -}
776384f68c7d0f97e352387e28dcf726
  $tcBoolConj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11043409769748356497##
                   14185258157286743633##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcBoolConj1) -}
a45f9ea75dd85972aff0cfb1a0b35fff
  $tcBoolConj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BoolConj"#) -}
d34e124fc8a74f6093a7f4cbc0b16cb5
  $tcBoolDisj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5720813193621417110##
                   890161144450834277##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcBoolDisj1) -}
51f6bfbf659e17f877e593271eae8c41
  $tcBoolDisj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BoolDisj"#) -}
bbd74e4a72dab19116140d5720968d5a
  $tcCombine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10386041326239747638##
                   6303609129401085569##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcCombine1) -}
6af654f81a489ffcf3d8fa955df0bfc0
  $tcCombine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Combine"#) -}
ef6cbbb5ce1909c37ab91830dc11a56a
  $tcComp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10863242588510760998##
                   18239275394612438051##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcComp1) -}
dd780fecef23233bd6d82c0889d80cf7
  $tcComp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Comp"#) -}
58ae35f1bf7862674d06542e1658f2c9
  $tcFour :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5979383533116343917##
                   4236766635835861510##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcFour1) -}
d544becc275e163191ebc1ae4621daab
  $tcFour1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Four"#) -}
4a81625a46922b55d2b3c192a9bf19c2
  $tcIdentity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7863824786983540337##
                   7797509014911414417##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcIdentity1) -}
c7b9d3fb55569f871a376da2e4531301
  $tcIdentity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Identity"#) -}
3a773da6782eaf2abcd4c6139db5027b
  $tcOr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8363386985447200912##
                   3687590498929000548##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcOr1) -}
013324b5ace5f6e26a38a6804f5436aa
  $tcOr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Or"#) -}
a8adebab3f895185b216b0cb18d7b669
  $tcThree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8237312846794223497##
                   3315918460020582055##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcThree1) -}
2e4030e779975340226337792d1fa02e
  $tcThree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Three"#) -}
c336a38bf558afd00b1e124a3506a104
  $tcTrivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11452519188894899429##
                   4328050583484051298##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcTrivial1) -}
e5fad0228926757d6467d00b606ebc1a
  $tcTrivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Trivial"#) -}
e8a294fc83d0e44d9327d77eaf57a589
  $tcTwo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1252284490713682785##
                   11255975189032884644##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcTwo1) -}
052fe1f0289609a8d6bbb7b7f796be08
  $tcTwo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Two"#) -}
13b25b272cfb289d174c8aa3b7bd8370
  $tcValidation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15474256853049052322##
                   5218723520974795938##
                   SemigroupExercises.$trModule
                   SemigroupExercises.$tcValidation1) -}
2bdf5a80289b3ab82501b8fa0363fc22
  $tcValidation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Validation"#) -}
e2ec8ebc15de002e3c8fabe20bf02820
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SemigroupExercises.$trModule2
                   SemigroupExercises.$trModule1) -}
fb77d9dfd622340774daa33ca6b7f993
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SemigroupExercises"#) -}
086dd8eacac598c56f795440d548dbd1
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "semigroupExercises-0.1.0.0-3ZZywYqp2uy6AHh3wC4FVs"#) -}
a068465337c338ef01d78a09d65f42df
  $w$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> a -> b -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: a)
                   (ww3 :: b) ->
                 case GHC.Classes.== @ a w1 ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.== @ b w ww1 ww3 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
13a33ddbd54a8bcab1903919ef141da6
  $w$c== ::
    (GHC.Classes.Eq d, GHC.Classes.Eq c, GHC.Classes.Eq b,
     GHC.Classes.Eq a) =>
    a -> b -> c -> d -> a -> b -> c -> d -> GHC.Types.Bool
  {- Arity: 12, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Classes.Eq d)
                   (w1 :: GHC.Classes.Eq c)
                   (w2 :: GHC.Classes.Eq b)
                   (w3 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: d)
                   (ww4 :: a)
                   (ww5 :: b)
                   (ww6 :: c)
                   (ww7 :: d) ->
                 case GHC.Classes.== @ a w3 ww ww4 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.== @ b w2 ww1 ww5 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Classes.== @ c w1 ww2 ww6 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ d w ww3 ww7 } } }) -}
eff8347c8fbe81ec7b26feaf3d1bf04f
  $w$c==1 ::
    (GHC.Classes.Eq c, GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> c -> a -> b -> c -> GHC.Types.Bool
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Classes.Eq c)
                   (w1 :: GHC.Classes.Eq b)
                   (w2 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: a)
                   (ww4 :: b)
                   (ww5 :: c) ->
                 case GHC.Classes.== @ a w2 ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.== @ b w1 ww1 ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.== @ c w ww2 ww5 } }) -}
0c2abd38f0396889a06a4f9d85ead2b1
  $w$c==2 ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> a -> b -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: a)
                   (ww3 :: b) ->
                 case GHC.Classes.== @ a w1 ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.== @ b w ww1 ww3 }) -}
6ec030974f3ac8561ca93839591b4b84
  $w$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    SemigroupExercises.AccumulateBoth a b
    -> [SemigroupExercises.AccumulateBoth a b]
    -> SemigroupExercises.AccumulateBoth a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (ww :: SemigroupExercises.AccumulateBoth a b)
                   (ww1 :: [SemigroupExercises.AccumulateBoth a b]) ->
                 letrec {
                   go4 :: SemigroupExercises.AccumulateBoth a b
                          -> [SemigroupExercises.AccumulateBoth a b]
                          -> SemigroupExercises.AccumulateBoth a b
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (b1 :: SemigroupExercises.AccumulateBoth a b)
                       (ds1 :: [SemigroupExercises.AccumulateBoth a b]) ->
                     case ds1 of wild1 {
                       [] -> b1
                       : c cs
                       -> SemigroupExercises.$fSemigroupAccumulateBoth_$c<>
                            @ a
                            @ b
                            w
                            w1
                            b1
                            (go4 c cs) }
                 } in
                 go4 ww ww1) -}
99054518ead02c7186cf4a1fe6083f8d
  $w$csconcat1 ::
    Data.Semigroup.Semigroup b =>
    SemigroupExercises.AccumulateRight a b
    -> [SemigroupExercises.AccumulateRight a b]
    -> SemigroupExercises.AccumulateRight a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ b
                   @ a
                   (w :: Data.Semigroup.Semigroup b)
                   (ww :: SemigroupExercises.AccumulateRight a b)
                   (ww1 :: [SemigroupExercises.AccumulateRight a b]) ->
                 letrec {
                   go4 :: SemigroupExercises.AccumulateRight a b
                          -> [SemigroupExercises.AccumulateRight a b]
                          -> SemigroupExercises.AccumulateRight a b
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (b1 :: SemigroupExercises.AccumulateRight a b)
                       (ds1 :: [SemigroupExercises.AccumulateRight a b]) ->
                     case ds1 of wild1 {
                       [] -> b1
                       : c cs
                       -> case b1
                                 `cast`
                               (SemigroupExercises.N:AccumulateRight[0] <a>_N <b>_N) of wild {
                            SemigroupExercises.Fail ipv
                            -> case (go4 c cs)
                                      `cast`
                                    (SemigroupExercises.N:AccumulateRight[0] <a>_N <b>_N) of wild2 {
                                 SemigroupExercises.Fail ipv1
                                 -> wild
                                      `cast`
                                    (Sym (SemigroupExercises.N:AccumulateRight[0]) <a>_N <b>_N)
                                 SemigroupExercises.Succ ds
                                 -> wild2
                                      `cast`
                                    (Sym (SemigroupExercises.N:AccumulateRight[0]) <a>_N <b>_N) }
                            SemigroupExercises.Succ s0
                            -> case (go4 c cs)
                                      `cast`
                                    (SemigroupExercises.N:AccumulateRight[0] <a>_N <b>_N) of wild2 {
                                 SemigroupExercises.Fail ipv
                                 -> wild
                                      `cast`
                                    (Sym (SemigroupExercises.N:AccumulateRight[0]) <a>_N <b>_N)
                                 SemigroupExercises.Succ s1
                                 -> (SemigroupExercises.Succ
                                       @ a
                                       @ b
                                       (Data.Semigroup.<> @ b w s0 s1))
                                      `cast`
                                    (Sym (SemigroupExercises.N:AccumulateRight[0]) <a>_N <b>_N) } } }
                 } in
                 go4 ww ww1) -}
5b06cb5c2f099e3f2af775c317c13c9e
  $w$csconcat2 ::
    Data.Semigroup.Semigroup b =>
    SemigroupExercises.Combine a b
    -> [SemigroupExercises.Combine a b]
    -> SemigroupExercises.Combine a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ b
                   @ a
                   (w :: Data.Semigroup.Semigroup b)
                   (ww :: SemigroupExercises.Combine a b)
                   (ww1 :: [SemigroupExercises.Combine a b]) ->
                 letrec {
                   go4 :: SemigroupExercises.Combine a b
                          -> [SemigroupExercises.Combine a b]
                          -> SemigroupExercises.Combine a b
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (b1 :: SemigroupExercises.Combine a b)
                       (ds1 :: [SemigroupExercises.Combine a b]) ->
                     case ds1 of wild1 {
                       [] -> b1
                       : c cs
                       -> let {
                            g :: SemigroupExercises.Combine a b = go4 c cs
                          } in
                          (\ (a1 :: a) ->
                           Data.Semigroup.<>
                             @ b
                             w
                             (b1 `cast` (SemigroupExercises.N:Combine[0] <a>_N <b>_N) a1)
                             (g `cast` (SemigroupExercises.N:Combine[0] <a>_N <b>_N) a1))
                            `cast`
                          (Sym (SemigroupExercises.N:Combine[0]) <a>_N <b>_N) }
                 } in
                 go4 ww ww1) -}
4082cd6fd45bcfbae2731afee68de2d4
  $w$csconcat3 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    a
    -> b
    -> c
    -> d
    -> [SemigroupExercises.Four a b c d]
    -> (# a, b, c, d #)
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (w3 :: Data.Semigroup.Semigroup d)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: d)
                   (ww4 :: [SemigroupExercises.Four a b c d]) ->
                 letrec {
                   $wgo2 :: a
                            -> b
                            -> c
                            -> d
                            -> [SemigroupExercises.Four a b c d]
                            -> (# a, b, c, d #)
                     {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
                        Inline: [0] -}
                   = \ (ww5 :: a)
                       (ww6 :: b)
                       (ww7 :: c)
                       (ww8 :: d)
                       (w4 :: [SemigroupExercises.Four a b c d]) ->
                     case w4 of wild1 {
                       [] -> (# ww5, ww6, ww7, ww8 #)
                       : c1 cs
                       -> case c1 of ww9 { SemigroupExercises.Four ww10 ww11 ww12 ww13 ->
                          case $wgo2
                                 ww10
                                 ww11
                                 ww12
                                 ww13
                                 cs of ww14 { (#,,,#) ww15 ww16 ww17 ww18 ->
                          (# Data.Semigroup.<> @ a w ww5 ww15,
                             Data.Semigroup.<> @ b w1 ww6 ww16,
                             Data.Semigroup.<> @ c w2 ww7 ww17,
                             Data.Semigroup.<> @ d w3 ww8 ww18 #) } } }
                 } in
                 $wgo2 ww ww1 ww2 ww3 ww4) -}
4dbfc797ac50962695a70257cacde984
  $w$csconcat4 ::
    Data.Semigroup.Semigroup a =>
    SemigroupExercises.Identity a
    -> [SemigroupExercises.Identity a] -> SemigroupExercises.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Semigroup.Semigroup a)
                   (ww :: SemigroupExercises.Identity a)
                   (ww1 :: [SemigroupExercises.Identity a]) ->
                 letrec {
                   go4 :: SemigroupExercises.Identity a
                          -> [SemigroupExercises.Identity a] -> SemigroupExercises.Identity a
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (b :: SemigroupExercises.Identity a)
                       (ds1 :: [SemigroupExercises.Identity a]) ->
                     case ds1 of wild1 {
                       [] -> b
                       : c cs
                       -> (Data.Semigroup.<>
                             @ a
                             w
                             b `cast` (SemigroupExercises.N:Identity[0] <a>_R)
                             (go4 c cs) `cast` (SemigroupExercises.N:Identity[0] <a>_R))
                            `cast`
                          (Sym (SemigroupExercises.N:Identity[0] <a>_R)) }
                 } in
                 go4 ww ww1) -}
94a4a888e362b10d842c13eb6a414550
  $w$csconcat5 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    a -> b -> c -> [SemigroupExercises.Three a b c] -> (# a, b, c #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.Semigroup.Semigroup c)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: c)
                   (ww3 :: [SemigroupExercises.Three a b c]) ->
                 letrec {
                   $wgo2 :: a
                            -> b -> c -> [SemigroupExercises.Three a b c] -> (# a, b, c #)
                     {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
                   = \ (ww4 :: a)
                       (ww5 :: b)
                       (ww6 :: c)
                       (w3 :: [SemigroupExercises.Three a b c]) ->
                     case w3 of wild1 {
                       [] -> (# ww4, ww5, ww6 #)
                       : c1 cs
                       -> case c1 of ww7 { SemigroupExercises.Three ww8 ww9 ww10 ->
                          case $wgo2 ww8 ww9 ww10 cs of ww11 { (#,,#) ww12 ww13 ww14 ->
                          (# Data.Semigroup.<> @ a w ww4 ww12,
                             Data.Semigroup.<> @ b w1 ww5 ww13,
                             Data.Semigroup.<> @ c w2 ww6 ww14 #) } } }
                 } in
                 $wgo2 ww ww1 ww2 ww3) -}
88aba6fec3955c1d3f630dd605e863ec
  $w$csconcat6 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    a -> b -> [SemigroupExercises.Two a b] -> (# a, b #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: [SemigroupExercises.Two a b]) ->
                 letrec {
                   $wgo2 :: a -> b -> [SemigroupExercises.Two a b] -> (# a, b #)
                     {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
                   = \ (ww3 :: a) (ww4 :: b) (w2 :: [SemigroupExercises.Two a b]) ->
                     case w2 of wild1 {
                       [] -> (# ww3, ww4 #)
                       : c cs
                       -> case c of ww5 { SemigroupExercises.Two ww6 ww7 ->
                          case $wgo2 ww6 ww7 cs of ww8 { (#,#) ww9 ww10 ->
                          (# Data.Semigroup.<> @ a w ww3 ww9,
                             Data.Semigroup.<> @ b w1 ww4 ww10 #) } } }
                 } in
                 $wgo2 ww ww1 ww2) -}
f266fe0821b39eea50aacafb9bf64fc0
  $w$csconcat7 ::
    Data.Semigroup.Semigroup a =>
    SemigroupExercises.Validation a b
    -> [SemigroupExercises.Validation a b]
    -> SemigroupExercises.Validation a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (ww :: SemigroupExercises.Validation a b)
                   (ww1 :: [SemigroupExercises.Validation a b]) ->
                 letrec {
                   go4 :: SemigroupExercises.Validation a b
                          -> [SemigroupExercises.Validation a b]
                          -> SemigroupExercises.Validation a b
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (b1 :: SemigroupExercises.Validation a b)
                       (ds1 :: [SemigroupExercises.Validation a b]) ->
                     case ds1 of wild1 {
                       [] -> b1
                       : c cs
                       -> case b1 of wild {
                            SemigroupExercises.Fail a0
                            -> case go4 c cs of wild2 {
                                 SemigroupExercises.Fail a1
                                 -> SemigroupExercises.Fail @ a @ b (Data.Semigroup.<> @ a w a0 a1)
                                 SemigroupExercises.Succ ipv -> wild }
                            SemigroupExercises.Succ ipv
                            -> case go4 c cs of wild2 {
                                 SemigroupExercises.Fail ds -> wild2
                                 SemigroupExercises.Succ ipv1 -> wild } } }
                 } in
                 go4 ww ww1) -}
6ec030974f3ac8561ca93839591b4b84
  $w$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Prim.Int#
    -> SemigroupExercises.AccumulateBoth a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: SemigroupExercises.AccumulateBoth a b) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = SemigroupExercises.$w$cshowsPrec1
                       @ a
                       @ b
                       w1
                       w
                       11#
                       w2 `cast` (SemigroupExercises.N:AccumulateBoth[0] <a>_N <b>_N)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        SemigroupExercises.$fShowAccumulateBoth2
                        (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           SemigroupExercises.$fShowAccumulateBoth2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
f266fe0821b39eea50aacafb9bf64fc0
  $w$cshowsPrec1 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int#
    -> SemigroupExercises.Validation a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: SemigroupExercises.Validation a b) ->
                 case w2 of wild {
                   SemigroupExercises.Fail b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ a
                            w1
                            SemigroupExercises.$fShowAccumulateBoth5
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             SemigroupExercises.$fShowAccumulateBoth4
                             (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SemigroupExercises.$fShowAccumulateBoth4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   SemigroupExercises.Succ b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ b
                            w
                            SemigroupExercises.$fShowAccumulateBoth5
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             SemigroupExercises.$fShowAccumulateBoth3
                             (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SemigroupExercises.$fShowAccumulateBoth3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
99054518ead02c7186cf4a1fe6083f8d
  $w$cshowsPrec2 ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Prim.Int#
    -> SemigroupExercises.AccumulateRight a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: SemigroupExercises.AccumulateRight a b) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = SemigroupExercises.$w$cshowsPrec1
                       @ a
                       @ b
                       w1
                       w
                       11#
                       w2 `cast` (SemigroupExercises.N:AccumulateRight[0] <a>_N <b>_N)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        SemigroupExercises.$fShowAccumulateRight1
                        (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           SemigroupExercises.$fShowAccumulateRight1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
f2b795f0b3cc03e4a566a4d8fff242a6
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> SemigroupExercises.BoolConj
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: SemigroupExercises.BoolConj)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       SemigroupExercises.$fShowBoolConj2
                       (case w `cast` (SemigroupExercises.N:BoolConj[0]) of wild {
                          GHC.Types.False -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows18 x
                          GHC.Types.True
                          -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 x })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) }) -}
ecdf6a3a2508264e26d1d66f82627cf5
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> SemigroupExercises.BoolDisj
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: SemigroupExercises.BoolDisj)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       SemigroupExercises.$fShowBoolDisj2
                       (case w `cast` (SemigroupExercises.N:BoolDisj[0]) of wild {
                          GHC.Types.False -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows18 x
                          GHC.Types.True
                          -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 x })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) }) -}
aa0ae9e9626663f4815c70f617d57464
  $w$cshowsPrec5 ::
    (GHC.Show.Show d, GHC.Show.Show c, GHC.Show.Show b,
     GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> c -> d -> GHC.Show.ShowS
  {- Arity: 9,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: GHC.Show.Show d)
                   (w1 :: GHC.Show.Show c)
                   (w2 :: GHC.Show.Show b)
                   (w3 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b)
                   (ww3 :: c)
                   (ww4 :: d) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w3
                       SemigroupExercises.$fShowAccumulateBoth5
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ b
                       w2
                       SemigroupExercises.$fShowAccumulateBoth5
                       ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ c
                       w1
                       SemigroupExercises.$fShowAccumulateBoth5
                       ww3
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ d
                       w
                       SemigroupExercises.$fShowAccumulateBoth5
                       ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       SemigroupExercises.$fShowFour1
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (f1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (f2 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
4dbfc797ac50962695a70257cacde984
  $w$cshowsPrec6 ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> SemigroupExercises.Identity a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: SemigroupExercises.Identity a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       SemigroupExercises.$fShowAccumulateBoth5
                       w1 `cast` (SemigroupExercises.N:Identity[0] <a>_R)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        SemigroupExercises.$fShowIdentity1
                        (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           SemigroupExercises.$fShowIdentity1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
6b70697a115eb259ba3a128ef9e53b67
  $w$cshowsPrec7 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> SemigroupExercises.Or a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: SemigroupExercises.Or a b) ->
                 case w2 of wild {
                   SemigroupExercises.Fst b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ a
                            w1
                            SemigroupExercises.$fShowAccumulateBoth5
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char SemigroupExercises.$fShowOr3 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SemigroupExercises.$fShowOr3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   SemigroupExercises.Snd b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ b
                            w
                            SemigroupExercises.$fShowAccumulateBoth5
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char SemigroupExercises.$fShowOr2 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SemigroupExercises.$fShowOr2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
3f874be774751dbfd073d959b1a69e46
  $w$cshowsPrec8 ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> c -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Show.Show c)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b)
                   (ww3 :: c) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w2
                       SemigroupExercises.$fShowAccumulateBoth5
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ b
                       w1
                       SemigroupExercises.$fShowAccumulateBoth5
                       ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ c
                       w
                       SemigroupExercises.$fShowAccumulateBoth5
                       ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       SemigroupExercises.$fShowThree1
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (f1 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
cf69e24d693b8967b19e5125ae60aa8e
  $w$cshowsPrec9 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w1
                       SemigroupExercises.$fShowAccumulateBoth5
                       ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ b
                       w
                       SemigroupExercises.$fShowAccumulateBoth5
                       ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        SemigroupExercises.$fShowTwo1
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           SemigroupExercises.$fShowTwo1
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))))) }) -}
5d7fa3d31af65843258e60853f6dfa4a
  $w$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c, Data.Semigroup.Semigroup d) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> a -> b -> c -> d -> (# a, b, c, d #)
  {- Arity: 10,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
ec66391aa9a2c2e6cff12e80c53dab6b
  $w$cstimes1 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b,
     Data.Semigroup.Semigroup c) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> a -> b -> c -> (# a, b, c #)
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
dac34b150478c2d9e66de7c281979bbd
  $w$cstimes2 ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    forall b1. GHC.Real.Integral b1 => b1 -> a -> b -> (# a, b #)
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U>,
     Inline: [0] -}
6b70697a115eb259ba3a128ef9e53b67
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: SemigroupExercises.Or GHC.Types.Int GHC.Types.Bool)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   SemigroupExercises.Fst b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             SemigroupExercises.$fShowOr3
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SemigroupExercises.$fShowOr3
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   SemigroupExercises.Snd b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            SemigroupExercises.$fShowOr2
                            (case b1 of wild1 {
                               GHC.Types.False -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows18 x
                               GHC.Types.True
                               -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 x })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) } }) -}
d338078a6d0083f7bc6d5e6d403ab587
  $wfourGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (# a, b, c, d #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Arbitrary.Arbitrary d)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case w4
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 let {
                   ds3 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds2 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      (case ds1 of wild { (,) r1 r2 -> r1 })
                      w5,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      (case ds2 of wild { (,) r1 r2 -> r1 })
                      w5,
                    (Test.QuickCheck.Arbitrary.arbitrary @ c w2)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <c>_R)
                      (case ds3 of wild { (,) r1 r2 -> r1 })
                      w5,
                    (Test.QuickCheck.Arbitrary.arbitrary @ d w3)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <d>_R)
                      (case ds3 of wild { (,) r1 r2 ->
                       case r2
                              `cast`
                            (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } })
                      w5 #)) -}
77ce6b36c0d1574a9e37a2494296aa81
  $wthreeGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (# a, b, c #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Random.QCGen)
                   (w4 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case w3
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      (case ds1 of wild { (,) r1 r2 -> r1 })
                      w4,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      (case ds2 of wild { (,) r1 r2 -> r1 })
                      w4,
                    (Test.QuickCheck.Arbitrary.arbitrary @ c w2)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <c>_R)
                      (case ds2 of wild { (,) r1 r2 ->
                       case r2
                              `cast`
                            (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } })
                      w4 #)) -}
ebc52518aa3f1cd7f1726654a6940e96
  $wtwoGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (# a, b #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case w2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      (case ds1 of wild { (,) r1 r2 -> r1 })
                      w3,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      (case ds1 of wild { (,) r1 r2 ->
                       case r2
                              `cast`
                            (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } })
                      w3 #)) -}
6ec030974f3ac8561ca93839591b4b84
  newtype AccumulateBoth a b
    = AccumulateBoth (SemigroupExercises.Validation a b)
350a3ec3582eb5c29b44ffd319ff3469
  type AccumulateBothAssoc a b =
    SemigroupExercises.AccumulateBoth a b
    -> SemigroupExercises.AccumulateBoth a b
    -> SemigroupExercises.AccumulateBoth a b
    -> GHC.Types.Bool
99054518ead02c7186cf4a1fe6083f8d
  newtype AccumulateRight a b
    = AccumulateRight (SemigroupExercises.Validation a b)
c305468048ecedf43d4f6fe91c86a384
  type AccumulateRightAssoc a b =
    SemigroupExercises.AccumulateRight a b
    -> SemigroupExercises.AccumulateRight a b
    -> SemigroupExercises.AccumulateRight a b
    -> GHC.Types.Bool
f2b795f0b3cc03e4a566a4d8fff242a6
  newtype BoolConj = BoolConj GHC.Types.Bool
e57acf538225f2f6518d930aebc3c41d
  type BoolConjAssoc =
    SemigroupExercises.BoolConj
    -> SemigroupExercises.BoolConj
    -> SemigroupExercises.BoolConj
    -> GHC.Types.Bool
ecdf6a3a2508264e26d1d66f82627cf5
  newtype BoolDisj = BoolDisj GHC.Types.Bool
85658242e58380c309363ed3988a4831
  type BoolDisjAssoc =
    SemigroupExercises.BoolDisj
    -> SemigroupExercises.BoolDisj
    -> SemigroupExercises.BoolDisj
    -> GHC.Types.Bool
5b06cb5c2f099e3f2af775c317c13c9e
  newtype Combine a b = Combine {unCombine :: a -> b}
db3067e4b4b1cadbdaefc63bf44644ee
  newtype Comp a = Comp {unComp :: a -> a}
4082cd6fd45bcfbae2731afee68de2d4
  data Four a b c d = Four a b c d
c750a1e0c738d133cd25d0931a9ad0f8
  type FourAssoc a b c d =
    SemigroupExercises.Four a b c d
    -> SemigroupExercises.Four a b c d
    -> SemigroupExercises.Four a b c d
    -> GHC.Types.Bool
4dbfc797ac50962695a70257cacde984
  newtype Identity a = Identity a
d47cebc68e19771052d5f337246a4f64
  type IdentityAssoc a =
    SemigroupExercises.Identity a
    -> SemigroupExercises.Identity a
    -> SemigroupExercises.Identity a
    -> GHC.Types.Bool
6b70697a115eb259ba3a128ef9e53b67
  data Or a b = Fst a | Snd b
2af2b961c7d26163dbb9652350e99782
  type OrAssoc a b =
    SemigroupExercises.Or a b
    -> SemigroupExercises.Or a b
    -> SemigroupExercises.Or a b
    -> GHC.Types.Bool
94a4a888e362b10d842c13eb6a414550
  data Three a b c = Three a b c
d8df3e52775564be15dcb4cedc858e03
  type ThreeAssoc a b c =
    SemigroupExercises.Three a b c
    -> SemigroupExercises.Three a b c
    -> SemigroupExercises.Three a b c
    -> GHC.Types.Bool
dcaf039bd6caaa5ff809a4d92eb372ea
  data Trivial = Trivial
ab67bd481abd31888e14090c29b37cff
  type TrivialAssoc =
    SemigroupExercises.Trivial
    -> SemigroupExercises.Trivial
    -> SemigroupExercises.Trivial
    -> GHC.Types.Bool
88aba6fec3955c1d3f630dd605e863ec
  data Two a b = Two a b
b28a251846521d84ff64aa9897b8d7e5
  type TwoAssoc a b =
    SemigroupExercises.Two a b
    -> SemigroupExercises.Two a b
    -> SemigroupExercises.Two a b
    -> GHC.Types.Bool
f266fe0821b39eea50aacafb9bf64fc0
  data Validation a b = Fail a | Succ b
cbfadd26b56a3abbcbe3ba2973925b39
  type ValidationAssoc a b =
    SemigroupExercises.Validation a b
    -> SemigroupExercises.Validation a b
    -> SemigroupExercises.Validation a b
    -> GHC.Types.Bool
6ec030974f3ac8561ca93839591b4b84
  accumulateBothGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (SemigroupExercises.AccumulateBoth a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.accumulateBothGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <SemigroupExercises.AccumulateBoth a b>_R)) -}
6ec030974f3ac8561ca93839591b4b84
  accumulateBothGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> SemigroupExercises.AccumulateBoth a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (Test.QuickCheck.Gen.elements
                    @ (SemigroupExercises.AccumulateBoth a b)
                    (GHC.Types.:
                       @ (SemigroupExercises.AccumulateBoth a b)
                       (SemigroupExercises.Fail
                          @ a
                          @ b
                          ((Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                             `cast`
                           (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                             (case ds1 of wild { (,) r1 r2 -> r1 })
                             eta1))
                         `cast`
                       (Sym (SemigroupExercises.N:AccumulateBoth[0]) <a>_N <b>_N)
                       (GHC.Types.:
                          @ (SemigroupExercises.AccumulateBoth a b)
                          (SemigroupExercises.Succ
                             @ a
                             @ b
                             ((Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                                `cast`
                              (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                                (case ds2 of wild { (,) r1 r2 -> r1 })
                                eta1))
                            `cast`
                          (Sym (SemigroupExercises.N:AccumulateBoth[0]) <a>_N <b>_N)
                          (GHC.Types.[] @ (SemigroupExercises.AccumulateBoth a b)))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0]
                      <SemigroupExercises.AccumulateBoth a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
99054518ead02c7186cf4a1fe6083f8d
  accumulateRightGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (SemigroupExercises.AccumulateRight a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.accumulateRightGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <SemigroupExercises.AccumulateRight a b>_R)) -}
99054518ead02c7186cf4a1fe6083f8d
  accumulateRightGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> SemigroupExercises.AccumulateRight a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 let {
                   a1 :: a
                   = (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                       (case ds1 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 let {
                   b1 :: b
                   = (Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                       (case ds2 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 (Test.QuickCheck.Gen.frequency
                    @ (SemigroupExercises.AccumulateRight a b)
                    (GHC.Types.:
                       @ (GHC.Types.Int,
                          Test.QuickCheck.Gen.Gen (SemigroupExercises.AccumulateRight a b))
                       (SemigroupExercises.accumulateRightGen3,
                        let {
                          x :: SemigroupExercises.Validation a b
                          = SemigroupExercises.Fail @ a @ b a1
                        } in
                        (\ (ds :: Test.QuickCheck.Random.QCGen) (ds3 :: GHC.Types.Int) ->
                         x)
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (SemigroupExercises.N:AccumulateRight[0] <a>_N <b>_N))))
                       (GHC.Types.:
                          @ (GHC.Types.Int,
                             Test.QuickCheck.Gen.Gen (SemigroupExercises.AccumulateRight a b))
                          (SemigroupExercises.accumulateRightGen2,
                           let {
                             x :: SemigroupExercises.Validation a b
                             = SemigroupExercises.Succ @ a @ b b1
                           } in
                           (\ (ds :: Test.QuickCheck.Random.QCGen) (ds3 :: GHC.Types.Int) ->
                            x)
                             `cast`
                           (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                     (SemigroupExercises.N:AccumulateRight[0] <a>_N <b>_N))))
                          (GHC.Types.[]
                             @ (GHC.Types.Int,
                                Test.QuickCheck.Gen.Gen
                                  (SemigroupExercises.AccumulateRight a b))))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0]
                      <SemigroupExercises.AccumulateRight a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
c6d65f8f0e118e83d6a706197eba97e9
  accumulateRightGen2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
a6104fb57b59894098057ab3752e3f6c
  accumulateRightGen3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
f2b795f0b3cc03e4a566a4d8fff242a6
  boolConjGen :: Test.QuickCheck.Gen.Gen SemigroupExercises.BoolConj
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,A>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.boolConjGen1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                          (SemigroupExercises.N:BoolConj[0]))) -}
fc5204f55eb4539ad4a9eadff429bf9a
  boolConjGen1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,A>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 Test.QuickCheck.Arbitrary.$w$carbitrary6
                   (case r `cast`
                         (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                    case System.Random.TF.Gen.$wtfGenSplit
                           ww1
                           ww2
                           ww3
                           ww4 of ww7 { (#,#) ww8 ww9 ->
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } })) -}
ecdf6a3a2508264e26d1d66f82627cf5
  boolDisjGen :: Test.QuickCheck.Gen.Gen SemigroupExercises.BoolDisj
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,A>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.boolConjGen1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                          (SemigroupExercises.N:BoolDisj[0]))) -}
4082cd6fd45bcfbae2731afee68de2d4
  fourGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Gen.Gen (SemigroupExercises.Four a b c d)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.fourGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary c>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary d>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <SemigroupExercises.Four a b c d>_R)) -}
4082cd6fd45bcfbae2731afee68de2d4
  fourGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c,
     Test.QuickCheck.Arbitrary.Arbitrary d) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> SemigroupExercises.Four a b c d
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Arbitrary.Arbitrary d)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case SemigroupExercises.$wfourGen
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 SemigroupExercises.Four @ a @ b @ c @ d ww1 ww2 ww3 ww4 }) -}
4dbfc797ac50962695a70257cacde984
  identityGen ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (SemigroupExercises.Identity a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.identityGen1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               (SemigroupExercises.N:Identity[0] <a>_R))) -}
c86b47f818c1a768114ae6fe083b88c3
  identityGen1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                   (case eta
                           `cast`
                         (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                    case System.Random.TF.Gen.$wtfGenSplit
                           ww1
                           ww2
                           ww3
                           ww4 of ww7 { (#,#) ww8 ww9 ->
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } })
                   eta1) -}
0fcb74deb9436ff4d373708e460500fb
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
e44b76a4b1e1ad0c6b560b629a454bf3
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
6b70697a115eb259ba3a128ef9e53b67
  orGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (SemigroupExercises.Or a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.orGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <SemigroupExercises.Or a b>_R)) -}
6b70697a115eb259ba3a128ef9e53b67
  orGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> SemigroupExercises.Or a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (Test.QuickCheck.Gen.elements
                    @ (SemigroupExercises.Or a b)
                    (GHC.Types.:
                       @ (SemigroupExercises.Or a b)
                       (SemigroupExercises.Fst
                          @ a
                          @ b
                          ((Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                             `cast`
                           (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                             (case ds1 of wild { (,) r1 r2 -> r1 })
                             eta1))
                       (GHC.Types.:
                          @ (SemigroupExercises.Or a b)
                          (SemigroupExercises.Snd
                             @ a
                             @ b
                             ((Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                                `cast`
                              (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                                (case ds2 of wild { (,) r1 r2 -> r1 })
                                eta1))
                          (GHC.Types.[] @ (SemigroupExercises.Or a b)))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <SemigroupExercises.Or a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
7d57e3c5bbe971209e6b5a933eedf5ee
  semigroupAssoc ::
    (GHC.Classes.Eq m, Data.Semigroup.Semigroup m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dSemigroup :: Data.Semigroup.Semigroup m)
                   (a :: m)
                   (b :: m)
                   (c :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (Data.Semigroup.<> @ m $dSemigroup a b)
                      c)
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      a
                      (Data.Semigroup.<> @ m $dSemigroup b c))) -}
241627b0274132fdbba2574fa04a4f08
  semigroupAssoc_$ssemigroupAssoc10 ::
    SemigroupExercises.Trivial
    -> SemigroupExercises.Trivial
    -> SemigroupExercises.Trivial
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ (a :: SemigroupExercises.Trivial)
                   (b :: SemigroupExercises.Trivial)
                   (c :: SemigroupExercises.Trivial) ->
                 GHC.Types.True) -}
4aeb3a529cdeb01a9185e15f3b20e4fa
  semigroupAssoc_$ssemigroupAssoc4 ::
    SemigroupExercises.BoolDisj
    -> SemigroupExercises.BoolDisj
    -> SemigroupExercises.BoolDisj
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (a :: SemigroupExercises.BoolDisj)
                   (b :: SemigroupExercises.BoolDisj)
                   (c :: SemigroupExercises.BoolDisj) ->
                 case a `cast` (SemigroupExercises.N:BoolDisj[0]) of wild {
                   GHC.Types.False
                   -> case b `cast` (SemigroupExercises.N:BoolDisj[0]) of wild1 {
                        GHC.Types.False -> case c of tpl { DEFAULT -> GHC.Types.True }
                        GHC.Types.True -> GHC.Types.True }
                   GHC.Types.True -> GHC.Types.True }) -}
ac6ed6bd7d49892fa873e28addf4c4e3
  semigroupAssoc_$ssemigroupAssoc5 ::
    SemigroupExercises.BoolConj
    -> SemigroupExercises.BoolConj
    -> SemigroupExercises.BoolConj
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (a :: SemigroupExercises.BoolConj)
                   (b :: SemigroupExercises.BoolConj)
                   (c :: SemigroupExercises.BoolConj) ->
                 case a `cast` (SemigroupExercises.N:BoolConj[0]) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case b `cast` (SemigroupExercises.N:BoolConj[0]) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case c of tpl { DEFAULT -> GHC.Types.True } } }) -}
94a4a888e362b10d842c13eb6a414550
  threeGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Gen.Gen (SemigroupExercises.Three a b c)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.threeGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary c>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <SemigroupExercises.Three a b c>_R)) -}
94a4a888e362b10d842c13eb6a414550
  threeGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> SemigroupExercises.Three a b c
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Random.QCGen)
                   (w4 :: GHC.Types.Int) ->
                 case SemigroupExercises.$wthreeGen
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,,#) ww1 ww2 ww3 ->
                 SemigroupExercises.Three @ a @ b @ c ww1 ww2 ww3 }) -}
88aba6fec3955c1d3f630dd605e863ec
  twoGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (SemigroupExercises.Two a b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.twoGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <SemigroupExercises.Two a b>_R)) -}
88aba6fec3955c1d3f630dd605e863ec
  twoGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> SemigroupExercises.Two a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case SemigroupExercises.$wtwoGen
                        @ a
                        @ b
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 SemigroupExercises.Two @ a @ b ww1 ww2 }) -}
d860299edb0639bebc325a935bb8e61c
  unCombine :: SemigroupExercises.Combine a b -> a -> b
  RecSel Left SemigroupExercises.Combine
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.unCombine1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <SemigroupExercises.Combine a b>_R
                 ->_R SemigroupExercises.N:Combine[0] <a>_N <b>_N) -}
9b03d3df38d14a690a38978fa95224c8
  unCombine1 ::
    SemigroupExercises.Combine a b -> SemigroupExercises.Combine a b
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a @ b (ds :: SemigroupExercises.Combine a b) -> ds) -}
624ff829155cc97a5e4a1eb4ddcb9743
  unComp :: SemigroupExercises.Comp a -> a -> a
  RecSel Left SemigroupExercises.Comp
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.unComp1
                  `cast`
                (forall (a :: <*>_N).
                 <SemigroupExercises.Comp a>_R
                 ->_R SemigroupExercises.N:Comp[0] <a>_R) -}
bf81b27528016d20d26c9a95e4251fe2
  unComp1 :: SemigroupExercises.Comp a -> SemigroupExercises.Comp a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: SemigroupExercises.Comp a) -> ds) -}
f266fe0821b39eea50aacafb9bf64fc0
  validationGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (SemigroupExercises.Validation a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                SemigroupExercises.validationGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <SemigroupExercises.Validation a b>_R)) -}
f266fe0821b39eea50aacafb9bf64fc0
  validationGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> SemigroupExercises.Validation a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 let {
                   a1 :: b
                   = (Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                       (case ds1 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 let {
                   b1 :: a
                   = (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                       (case ds2 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 (Test.QuickCheck.Gen.frequency
                    @ (SemigroupExercises.Validation a b)
                    (GHC.Types.:
                       @ (GHC.Types.Int,
                          Test.QuickCheck.Gen.Gen (SemigroupExercises.Validation a b))
                       (SemigroupExercises.accumulateRightGen3,
                        let {
                          x :: SemigroupExercises.Validation a b
                          = SemigroupExercises.Succ @ a @ b a1
                        } in
                        (\ (ds :: Test.QuickCheck.Random.QCGen) (ds3 :: GHC.Types.Int) ->
                         x)
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  <SemigroupExercises.Validation a b>_R)))
                       (GHC.Types.:
                          @ (GHC.Types.Int,
                             Test.QuickCheck.Gen.Gen (SemigroupExercises.Validation a b))
                          (SemigroupExercises.accumulateRightGen2,
                           let {
                             x :: SemigroupExercises.Validation a b
                             = SemigroupExercises.Fail @ a @ b b1
                           } in
                           (\ (ds :: Test.QuickCheck.Random.QCGen) (ds3 :: GHC.Types.Int) ->
                            x)
                             `cast`
                           (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                     <SemigroupExercises.Validation a b>_R)))
                          (GHC.Types.[]
                             @ (GHC.Types.Int,
                                Test.QuickCheck.Gen.Gen (SemigroupExercises.Validation a b))))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0]
                      <SemigroupExercises.Validation a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [SemigroupExercises.AccumulateBoth]
  = SemigroupExercises.$fArbitraryAccumulateBoth
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [SemigroupExercises.AccumulateRight]
  = SemigroupExercises.$fArbitraryAccumulateRight
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [SemigroupExercises.BoolConj]
  = SemigroupExercises.$fArbitraryBoolConj
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [SemigroupExercises.BoolDisj]
  = SemigroupExercises.$fArbitraryBoolDisj
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [SemigroupExercises.Four]
  = SemigroupExercises.$fArbitraryFour
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [SemigroupExercises.Identity]
  = SemigroupExercises.$fArbitraryIdentity
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [SemigroupExercises.Or]
  = SemigroupExercises.$fArbitraryOr
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [SemigroupExercises.Three]
  = SemigroupExercises.$fArbitraryThree
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [SemigroupExercises.Trivial]
  = SemigroupExercises.$fArbitraryTrivial
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [SemigroupExercises.Two]
  = SemigroupExercises.$fArbitraryTwo
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [SemigroupExercises.Validation]
  = SemigroupExercises.$fArbitraryValidation
instance [safe] GHC.Classes.Eq [SemigroupExercises.AccumulateBoth]
  = SemigroupExercises.$fEqAccumulateBoth
instance [safe] GHC.Classes.Eq [SemigroupExercises.AccumulateRight]
  = SemigroupExercises.$fEqAccumulateRight
instance [safe] GHC.Classes.Eq [SemigroupExercises.BoolConj]
  = SemigroupExercises.$fEqBoolConj
instance [safe] GHC.Classes.Eq [SemigroupExercises.BoolDisj]
  = SemigroupExercises.$fEqBoolDisj
instance [safe] GHC.Classes.Eq [SemigroupExercises.Four]
  = SemigroupExercises.$fEqFour
instance [safe] GHC.Classes.Eq [SemigroupExercises.Identity]
  = SemigroupExercises.$fEqIdentity
instance [safe] GHC.Classes.Eq [SemigroupExercises.Or]
  = SemigroupExercises.$fEqOr
instance [safe] GHC.Classes.Eq [SemigroupExercises.Three]
  = SemigroupExercises.$fEqThree
instance [safe] GHC.Classes.Eq [SemigroupExercises.Trivial]
  = SemigroupExercises.$fEqTrivial
instance [safe] GHC.Classes.Eq [SemigroupExercises.Two]
  = SemigroupExercises.$fEqTwo
instance [safe] GHC.Classes.Eq [SemigroupExercises.Validation]
  = SemigroupExercises.$fEqValidation
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.AccumulateBoth]
  = SemigroupExercises.$fSemigroupAccumulateBoth
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.AccumulateRight]
  = SemigroupExercises.$fSemigroupAccumulateRight
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.BoolConj]
  = SemigroupExercises.$fSemigroupBoolConj
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.BoolDisj]
  = SemigroupExercises.$fSemigroupBoolDisj
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.Combine]
  = SemigroupExercises.$fSemigroupCombine
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.Comp]
  = SemigroupExercises.$fSemigroupComp
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.Four]
  = SemigroupExercises.$fSemigroupFour
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.Identity]
  = SemigroupExercises.$fSemigroupIdentity
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.Or]
  = SemigroupExercises.$fSemigroupOr
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.Three]
  = SemigroupExercises.$fSemigroupThree
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.Trivial]
  = SemigroupExercises.$fSemigroupTrivial
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.Two]
  = SemigroupExercises.$fSemigroupTwo
instance [safe] Data.Semigroup.Semigroup [SemigroupExercises.Validation]
  = SemigroupExercises.$fSemigroupValidation
instance [safe] GHC.Show.Show [SemigroupExercises.AccumulateBoth]
  = SemigroupExercises.$fShowAccumulateBoth
instance [safe] GHC.Show.Show [SemigroupExercises.AccumulateRight]
  = SemigroupExercises.$fShowAccumulateRight
instance [safe] GHC.Show.Show [SemigroupExercises.BoolConj]
  = SemigroupExercises.$fShowBoolConj
instance [safe] GHC.Show.Show [SemigroupExercises.BoolDisj]
  = SemigroupExercises.$fShowBoolDisj
instance [safe] GHC.Show.Show [SemigroupExercises.Four]
  = SemigroupExercises.$fShowFour
instance [safe] GHC.Show.Show [SemigroupExercises.Identity]
  = SemigroupExercises.$fShowIdentity
instance [safe] GHC.Show.Show [SemigroupExercises.Or]
  = SemigroupExercises.$fShowOr
instance [safe] GHC.Show.Show [SemigroupExercises.Three]
  = SemigroupExercises.$fShowThree
instance [safe] GHC.Show.Show [SemigroupExercises.Trivial]
  = SemigroupExercises.$fShowTrivial
instance [safe] GHC.Show.Show [SemigroupExercises.Two]
  = SemigroupExercises.$fShowTwo
instance [safe] GHC.Show.Show [SemigroupExercises.Validation]
  = SemigroupExercises.$fShowValidation
"SPEC $cshow @ Int @ Bool" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                         GHC.Types.Int)
                                           ($dShow8 :: GHC.Show.Show GHC.Types.Bool)
  SemigroupExercises.$fShowOr_$cshow @ GHC.Types.Int
                                     @ GHC.Types.Bool
                                     $dShow8
                                     $dShow7
  = SemigroupExercises.$fShowOr_$s$cshow
"SPEC $cshowList @ Int @ Bool" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                             GHC.Types.Int)
                                               ($dShow8 :: GHC.Show.Show GHC.Types.Bool)
  SemigroupExercises.$fShowOr_$cshowList @ GHC.Types.Int
                                         @ GHC.Types.Bool
                                         $dShow8
                                         $dShow7
  = SemigroupExercises.$fShowOr_$s$cshowList
"SPEC $cshowsPrec @ Int @ Bool" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                              GHC.Types.Int)
                                                ($dShow8 :: GHC.Show.Show GHC.Types.Bool)
  SemigroupExercises.$fShowOr_$cshowsPrec @ GHC.Types.Int
                                          @ GHC.Types.Bool
                                          $dShow8
                                          $dShow7
  = SemigroupExercises.$fShowOr_$s$cshowsPrec
"SPEC $cshrink @ (NonEmpty Char) @ (NonEmpty Int)" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                     (Data.List.NonEmpty.NonEmpty
                                                                                        GHC.Types.Int))
                                                                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                      (Data.List.NonEmpty.NonEmpty
                                                                                         GHC.Types.Char))
  SemigroupExercises.$fArbitraryAccumulateBoth_$cshrink @ (Data.List.NonEmpty.NonEmpty
                                                             GHC.Types.Char)
                                                        @ (Data.List.NonEmpty.NonEmpty
                                                             GHC.Types.Int)
                                                        $dArbitrary1
                                                        $dArbitrary
  = SemigroupExercises.$fArbitraryAccumulateBoth_$s$cshrink
"SPEC $cshrink @ (NonEmpty Int)" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                   (Data.List.NonEmpty.NonEmpty
                                                                      GHC.Types.Int))
  SemigroupExercises.$fArbitraryIdentity_$cshrink @ (Data.List.NonEmpty.NonEmpty
                                                       GHC.Types.Int)
                                                  $dArbitrary
  = SemigroupExercises.$fArbitraryIdentity_$s$cshrink
"SPEC $cshrink @ (NonEmpty Int) @ Bool" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                          GHC.Types.Bool)
                                                        ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                           (Data.List.NonEmpty.NonEmpty
                                                                              GHC.Types.Int))
  SemigroupExercises.$fArbitraryValidation_$cshrink @ (Data.List.NonEmpty.NonEmpty
                                                         GHC.Types.Int)
                                                    @ GHC.Types.Bool
                                                    $dArbitrary1
                                                    $dArbitrary
  = SemigroupExercises.$fArbitraryValidation_$s$cshrink
"SPEC $cshrink @ Bool @ (NonEmpty Int)" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                          (Data.List.NonEmpty.NonEmpty
                                                                             GHC.Types.Int))
                                                        ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                           GHC.Types.Bool)
  SemigroupExercises.$fArbitraryAccumulateRight_$cshrink @ GHC.Types.Bool
                                                         @ (Data.List.NonEmpty.NonEmpty
                                                              GHC.Types.Int)
                                                         $dArbitrary1
                                                         $dArbitrary
  = SemigroupExercises.$fArbitraryAccumulateRight_$s$cshrink
"SPEC $cshrink @ Int @ Bool" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                               GHC.Types.Bool)
                                             ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                GHC.Types.Int)
  SemigroupExercises.$fArbitraryOr_$cshrink @ GHC.Types.Int
                                            @ GHC.Types.Bool
                                            $dArbitrary1
                                            $dArbitrary
  = SemigroupExercises.$fArbitraryOr_$s$cshrink
"SPEC $fShowOr @ Int @ Bool" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                           GHC.Types.Int)
                                             ($dShow8 :: GHC.Show.Show GHC.Types.Bool)
  SemigroupExercises.$fShowOr @ GHC.Types.Int
                              @ GHC.Types.Bool
                              $dShow8
                              $dShow7
  = SemigroupExercises.$fShowOr_$s$fShowOr
"SPEC semigroupAssoc @ BoolConj" [ALWAYS] forall ($dSemigroup :: Data.Semigroup.Semigroup
                                                                   SemigroupExercises.BoolConj)
                                                 ($dEq :: GHC.Classes.Eq
                                                            SemigroupExercises.BoolConj)
  SemigroupExercises.semigroupAssoc @ SemigroupExercises.BoolConj
                                    $dEq
                                    $dSemigroup
  = SemigroupExercises.semigroupAssoc_$ssemigroupAssoc5
"SPEC semigroupAssoc @ BoolDisj" [ALWAYS] forall ($dSemigroup :: Data.Semigroup.Semigroup
                                                                   SemigroupExercises.BoolDisj)
                                                 ($dEq :: GHC.Classes.Eq
                                                            SemigroupExercises.BoolDisj)
  SemigroupExercises.semigroupAssoc @ SemigroupExercises.BoolDisj
                                    $dEq
                                    $dSemigroup
  = SemigroupExercises.semigroupAssoc_$ssemigroupAssoc4
"SPEC semigroupAssoc @ Trivial" [ALWAYS] forall ($dSemigroup :: Data.Semigroup.Semigroup
                                                                  SemigroupExercises.Trivial)
                                                ($dEq :: GHC.Classes.Eq SemigroupExercises.Trivial)
  SemigroupExercises.semigroupAssoc @ SemigroupExercises.Trivial
                                    $dEq
                                    $dSemigroup
  = SemigroupExercises.semigroupAssoc_$ssemigroupAssoc10
"SPEC/SemigroupExercises $fArbitraryNonEmpty @ Char" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                       GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitraryNonEmpty @ GHC.Types.Char
                                                $dArbitrary
  = SemigroupExercises.$fArbitraryAccumulateBoth_$s$fArbitraryNonEmpty1
"SPEC/SemigroupExercises $fArbitraryNonEmpty @ Int" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                      GHC.Types.Int)
  Test.QuickCheck.Arbitrary.$fArbitraryNonEmpty @ GHC.Types.Int
                                                $dArbitrary
  = SemigroupExercises.$fArbitraryAccumulateBoth_$s$fArbitraryNonEmpty
"SPEC/SemigroupExercises $fShowNonEmpty @ Char" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                                              GHC.Types.Char)
  Data.List.NonEmpty.$fShowNonEmpty @ GHC.Types.Char $dShow7
  = SemigroupExercises.$s$fShowNonEmpty
"SPEC/SemigroupExercises $fShowNonEmpty @ Int" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                                             GHC.Types.Int)
  Data.List.NonEmpty.$fShowNonEmpty @ GHC.Types.Int $dShow7
  = SemigroupExercises.$s$fShowNonEmpty1
"SPEC/SemigroupExercises $fShowNonEmpty_$cshow @ Char" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                                                     GHC.Types.Char)
  Data.List.NonEmpty.$fShowNonEmpty_$cshow @ GHC.Types.Char $dShow7
  = SemigroupExercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshow
"SPEC/SemigroupExercises $fShowNonEmpty_$cshow @ Int" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                                                    GHC.Types.Int)
  Data.List.NonEmpty.$fShowNonEmpty_$cshow @ GHC.Types.Int $dShow7
  = SemigroupExercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshow1
"SPEC/SemigroupExercises $fShowNonEmpty_$cshowList @ Char" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                                                         GHC.Types.Char)
  Data.List.NonEmpty.$fShowNonEmpty_$cshowList @ GHC.Types.Char
                                               $dShow7
  = SemigroupExercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshowList
"SPEC/SemigroupExercises $fShowNonEmpty_$cshowList @ Int" [ALWAYS] forall ($dShow7 :: GHC.Show.Show
                                                                                        GHC.Types.Int)
  Data.List.NonEmpty.$fShowNonEmpty_$cshowList @ GHC.Types.Int
                                               $dShow7
  = SemigroupExercises.$s$fShowNonEmpty_$s$fShowNonEmpty_$cshowList1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

